[
  {
    "name": "Camera.java",
    "path": "src/com/ch/Camera.java",
    "content": {
      "structured": {
        "description": "An abstract Camera class that encapsulates the transformation and projection matrices for a 3D camera. The camera's transformation matrix is calculated based on its position and rotation, while its projection matrix is calculated using the calculateProjectionMatrix method. The camera also provides methods to get and set its view-projection matrix and transform.",
        "diagram": {
          "gviz": "digraph G {\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"]\n    \n    Vector3f []\n    CameraStruct []\n    World []\n    Matrix4f []\n    subgraph cluster_main {\n        // style=filled\n        color=\"#00000000\"\n        Camera [] [fontsize=\"20pt\",style=filled,color=\"#26de81\",shape=square, fontname=\"Courier New\"]\n        label = \"\"\n    }\n    Transform []\n    Camera -> Transform [penwidth=1]\n    Camera -> Matrix4f [style=\"dashed\"]\n    Camera -> World [penwidth=1]\n    World -> Camera [style=\"dashed\"]\n    Matrix4f -> Camera [dir=\"both\", penwidth=6]\n    Camera -> Vector3f [style=\"dashed\"]\n    CameraStruct -> Camera [penwidth=1]\n}\n",
          "d2": "<?xml version=\"1.0\" encoding=\"utf-8\"?><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" d2Version=\"v0.6.5\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 1053 800\"><svg id=\"d2-svg\" class=\"d2-3616583411\" width=\"1053\" height=\"800\" viewBox=\"11 11 1053 800\"><rect x=\"11.000000\" y=\"11.000000\" width=\"1053.000000\" height=\"800.000000\" rx=\"0.000000\" fill=\"#151719\" stroke-width=\"0\" /><style type=\"text/css\"><![CDATA[\n.d2-3616583411 .text {\n\tfont-family: \"d2-3616583411-font-regular\";\n}\n@font-face {\n\tfont-family: d2-3616583411-font-regular;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-3616583411 .text-italic {\n\tfont-family: \"d2-3616583411-font-italic\";\n}\n@font-face {\n\tfont-family: d2-3616583411-font-italic;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-3616583411 .text-mono {\n\tfont-family: \"d2-3616583411-font-mono\";\n}\n@font-face {\n\tfont-family: d2-3616583411-font-mono;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-3616583411 .text-mono-bold {\n\tfont-family: \"d2-3616583411-font-mono-bold\";\n}\n@font-face {\n\tfont-family: d2-3616583411-font-mono-bold;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}]]></style><style type=\"text/css\"><![CDATA[.shape {\n  shape-rendering: geometricPrecision;\n  stroke-linejoin: round;\n}\n.connection {\n  stroke-linecap: round;\n  stroke-linejoin: round;\n}\n.blend {\n  mix-blend-mode: multiply;\n  opacity: 0.5;\n}\n\n\t\t.d2-3616583411 .fill-N1{fill:#ECEDED;}\n\t\t.d2-3616583411 .fill-N2{fill:#676C7E;}\n\t\t.d2-3616583411 .fill-N3{fill:#9499AB;}\n\t\t.d2-3616583411 .fill-N4{fill:#CFD2DD;}\n\t\t.d2-3616583411 .fill-N5{fill:#DEE1EB;}\n\t\t.d2-3616583411 .fill-N6{fill:#EEF1F8;}\n\t\t.d2-3616583411 .fill-N7{fill:#151719;}\n\t\t.d2-3616583411 .fill-B1{fill:#717D86;}\n\t\t.d2-3616583411 .fill-B2{fill:#717D86;}\n\t\t.d2-3616583411 .fill-B3{fill:#ffff00;}\n\t\t.d2-3616583411 .fill-B4{fill:#151719;}\n\t\t.d2-3616583411 .fill-B5{fill:#151719;}\n\t\t.d2-3616583411 .fill-B6{fill:#151719;}\n\t\t.d2-3616583411 .fill-AA2{fill:#ECEDED;}\n\t\t.d2-3616583411 .fill-AA4{fill:#CFD2DD;}\n\t\t.d2-3616583411 .fill-AA5{fill:#DEE1EB;}\n\t\t.d2-3616583411 .fill-AB4{fill:#CFD2DD;}\n\t\t.d2-3616583411 .fill-AB5{fill:#DEE1EB;}\n\t\t.d2-3616583411 .stroke-N1{stroke:#ECEDED;}\n\t\t.d2-3616583411 .stroke-N2{stroke:#676C7E;}\n\t\t.d2-3616583411 .stroke-N3{stroke:#9499AB;}\n\t\t.d2-3616583411 .stroke-N4{stroke:#CFD2DD;}\n\t\t.d2-3616583411 .stroke-N5{stroke:#DEE1EB;}\n\t\t.d2-3616583411 .stroke-N6{stroke:#EEF1F8;}\n\t\t.d2-3616583411 .stroke-N7{stroke:#151719;}\n\t\t.d2-3616583411 .stroke-B1{stroke:#717D86;}\n\t\t.d2-3616583411 .stroke-B2{stroke:#717D86;}\n\t\t.d2-3616583411 .stroke-B3{stroke:#ffff00;}\n\t\t.d2-3616583411 .stroke-B4{stroke:#151719;}\n\t\t.d2-3616583411 .stroke-B5{stroke:#151719;}\n\t\t.d2-3616583411 .stroke-B6{stroke:#151719;}\n\t\t.d2-3616583411 .stroke-AA2{stroke:#ECEDED;}\n\t\t.d2-3616583411 .stroke-AA4{stroke:#CFD2DD;}\n\t\t.d2-3616583411 .stroke-AA5{stroke:#DEE1EB;}\n\t\t.d2-3616583411 .stroke-AB4{stroke:#CFD2DD;}\n\t\t.d2-3616583411 .stroke-AB5{stroke:#DEE1EB;}\n\t\t.d2-3616583411 .background-color-N1{background-color:#ECEDED;}\n\t\t.d2-3616583411 .background-color-N2{background-color:#676C7E;}\n\t\t.d2-3616583411 .background-color-N3{background-color:#9499AB;}\n\t\t.d2-3616583411 .background-color-N4{background-color:#CFD2DD;}\n\t\t.d2-3616583411 .background-color-N5{background-color:#DEE1EB;}\n\t\t.d2-3616583411 .background-color-N6{background-color:#EEF1F8;}\n\t\t.d2-3616583411 .background-color-N7{background-color:#151719;}\n\t\t.d2-3616583411 .background-color-B1{background-color:#717D86;}\n\t\t.d2-3616583411 .background-color-B2{background-color:#717D86;}\n\t\t.d2-3616583411 .background-color-B3{background-color:#ffff00;}\n\t\t.d2-3616583411 .background-color-B4{background-color:#151719;}\n\t\t.d2-3616583411 .background-color-B5{background-color:#151719;}\n\t\t.d2-3616583411 .background-color-B6{background-color:#151719;}\n\t\t.d2-3616583411 .background-color-AA2{background-color:#ECEDED;}\n\t\t.d2-3616583411 .background-color-AA4{background-color:#CFD2DD;}\n\t\t.d2-3616583411 .background-color-AA5{background-color:#DEE1EB;}\n\t\t.d2-3616583411 .background-color-AB4{background-color:#CFD2DD;}\n\t\t.d2-3616583411 .background-color-AB5{background-color:#DEE1EB;}\n\t\t.d2-3616583411 .color-N1{color:#ECEDED;}\n\t\t.d2-3616583411 .color-N2{color:#676C7E;}\n\t\t.d2-3616583411 .color-N3{color:#9499AB;}\n\t\t.d2-3616583411 .color-N4{color:#CFD2DD;}\n\t\t.d2-3616583411 .color-N5{color:#DEE1EB;}\n\t\t.d2-3616583411 .color-N6{color:#EEF1F8;}\n\t\t.d2-3616583411 .color-N7{color:#151719;}\n\t\t.d2-3616583411 .color-B1{color:#717D86;}\n\t\t.d2-3616583411 .color-B2{color:#717D86;}\n\t\t.d2-3616583411 .color-B3{color:#ffff00;}\n\t\t.d2-3616583411 .color-B4{color:#151719;}\n\t\t.d2-3616583411 .color-B5{color:#151719;}\n\t\t.d2-3616583411 .color-B6{color:#151719;}\n\t\t.d2-3616583411 .color-AA2{color:#ECEDED;}\n\t\t.d2-3616583411 .color-AA4{color:#CFD2DD;}\n\t\t.d2-3616583411 .color-AA5{color:#DEE1EB;}\n\t\t.d2-3616583411 .color-AB4{color:#CFD2DD;}\n\t\t.d2-3616583411 .color-AB5{color:#DEE1EB;}.appendix text.text{fill:#ECEDED}.md{--color-fg-default:#ECEDED;--color-fg-muted:#676C7E;--color-fg-subtle:#9499AB;--color-canvas-default:#151719;--color-canvas-subtle:#EEF1F8;--color-border-default:#717D86;--color-border-muted:#717D86;--color-neutral-muted:#EEF1F8;--color-accent-fg:#717D86;--color-accent-emphasis:#717D86;--color-attention-subtle:#676C7E;--color-danger-fg:red;}.sketch-overlay-B1{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B3{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-B4{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B5{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B6{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-AA2{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AA4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AA5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AB4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AB5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N1{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-N3{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N6{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N7{fill:url(#streaks-darker);mix-blend-mode:lighten}.light-code{display: block}.dark-code{display: none}]]></style><g id=\"com\"><g class=\"shape\" ><rect x=\"12.000000\" y=\"12.000000\" width=\"1051.000000\" height=\"798.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"537.500000\" y=\"45.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">com</text></g><g id=\"com.ch\"><g class=\"shape\" ><rect x=\"62.000000\" y=\"62.000000\" width=\"951.000000\" height=\"698.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"537.500000\" y=\"91.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">ch</text></g><g id=\"com.ch.Camera\"><g class=\"shape\" ><rect x=\"506.000000\" y=\"248.000000\" width=\"160.000000\" height=\"66.000000\" fill=\"#26de81\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"586.000000\" y=\"286.500000\" fill=\"#151719\" class=\"text-mono-bold\" style=\"text-anchor:middle;font-size:16px\">Camera</text></g><g id=\"com.ch.math\"><g class=\"shape\" ><rect x=\"112.000000\" y=\"499.000000\" width=\"366.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"295.000000\" y=\"524.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">math</text></g><g id=\"com.ch.voxel\"><g class=\"shape\" ><rect x=\"558.000000\" y=\"499.000000\" width=\"193.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"654.500000\" y=\"524.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">voxel</text></g><g id=\"com.ch.Transform\"><g class=\"shape\" ><rect x=\"831.000000\" y=\"499.000000\" width=\"132.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"897.000000\" y=\"537.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Transform</text></g><g id=\"com.ch.CameraStruct\"><g class=\"shape\" ><rect x=\"506.000000\" y=\"112.000000\" width=\"160.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"586.000000\" y=\"150.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">CameraStruct</text></g><g id=\"com.ch.math.Matrix4f\"><g class=\"shape\" ><rect x=\"162.000000\" y=\"549.000000\" width=\"123.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"223.500000\" y=\"587.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Matrix4f</text></g><g id=\"com.ch.math.Vector3f\"><g class=\"shape\" ><rect x=\"305.000000\" y=\"549.000000\" width=\"123.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"366.500000\" y=\"587.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Vector3f</text></g><g id=\"com.ch.voxel.World\"><g class=\"shape\" ><rect x=\"608.000000\" y=\"549.000000\" width=\"93.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"654.500000\" y=\"587.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">World</text></g><g id=\"com.ch.(Camera -&gt; math.Matrix4f)[0]\"><marker id=\"mk-558834944\" markerWidth=\"10.000000\" markerHeight=\"12.000000\" refX=\"7.000000\" refY=\"6.000000\" viewBox=\"0.000000 0.000000 10.000000 12.000000\" orient=\"auto\" markerUnits=\"userSpaceOnUse\"> <polygon points=\"0.000000,0.000000 10.000000,6.000000 0.000000,12.000000\" fill=\"#26de81\" class=\"connection\" stroke-width=\"2\" /> </marker><path d=\"M 529.106995 315.000000 L 529.106995 344.000000 S 529.106995 354.000000 519.106995 354.000000 L 233.500000 354.000000 S 223.500000 354.000000 223.500000 364.000000 L 223.500000 546.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3616583411)\" /><text x=\"258.000000\" y=\"539.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(Camera -&gt; math.Vector3f)[0]\"><path d=\"M 551.963989 315.000000 L 551.963989 394.000000 S 551.963989 404.000000 541.963989 404.000000 L 376.500000 404.000000 S 366.500000 404.000000 366.500000 414.000000 L 366.500000 546.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3616583411)\" /><text x=\"401.000000\" y=\"539.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(voxel.World -&gt; Camera)[0]\"><path d=\"M 654.500000 616.000000 L 654.500000 700.000000 S 654.500000 710.000000 664.500000 710.000000 L 781.000000 710.000000 S 791.000000 710.000000 791.000000 700.000000 L 791.000000 414.000000 S 791.000000 404.000000 781.000000 404.000000 L 630.534973 404.000000 S 620.534973 404.000000 620.534973 394.000000 L 620.534973 317.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3616583411)\" /><text x=\"587.000000\" y=\"335.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(Camera -&gt; voxel.World)[0]\"><path d=\"M 597.677979 315.000000 L 597.677979 444.000000 S 597.677979 454.000000 607.677979 454.000000 L 644.500000 454.000000 S 654.500000 454.000000 654.500000 464.000000 L 654.500000 546.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3616583411)\" /></g><g id=\"com.ch.(Camera -&gt; Transform)[0]\"><path d=\"M 643.392029 315.000000 L 643.392029 344.000000 S 643.392029 354.000000 653.392029 354.000000 L 887.000000 354.000000 S 897.000000 354.000000 897.000000 364.000000 L 897.000000 496.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3616583411)\" /></g><g id=\"com.ch.(CameraStruct -&gt; Camera)[0]\"><path d=\"M 586.250000 179.000000 L 586.250000 245.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3616583411)\" /></g><g id=\"com.ch.(math.Matrix4f &lt;-&gt; Camera)[0]\"><marker id=\"mk-3695359059\" markerWidth=\"10.000000\" markerHeight=\"12.000000\" refX=\"3.000000\" refY=\"6.000000\" viewBox=\"0.000000 0.000000 10.000000 12.000000\" orient=\"auto\" markerUnits=\"userSpaceOnUse\"> <polygon points=\"10.000000,0.000000 0.000000,6.000000 10.000000,12.000000\" fill=\"#26de81\" class=\"connection\" stroke-width=\"2\" /> </marker><path d=\"M 223.500000 618.000000 L 223.500000 700.000000 S 223.500000 710.000000 233.500000 710.000000 L 508.000000 710.000000 S 518.000000 710.000000 518.000000 700.000000 L 518.000000 464.000000 S 518.000000 454.000000 528.000000 454.000000 L 564.820984 454.000000 S 574.820984 454.000000 574.820984 444.000000 L 574.820984 317.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-start=\"url(#mk-3695359059)\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3616583411)\" /></g><mask id=\"d2-3616583411\" maskUnits=\"userSpaceOnUse\" x=\"11\" y=\"11\" width=\"1053\" height=\"800\">\n<rect x=\"11\" y=\"11\" width=\"1053\" height=\"800\" fill=\"white\"></rect>\n<rect x=\"513.000000\" y=\"17.000000\" width=\"49\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"526.500000\" y=\"67.000000\" width=\"22\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"557.500000\" y=\"270.500000\" width=\"57\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"273.500000\" y=\"504.000000\" width=\"43\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"632.000000\" y=\"504.000000\" width=\"45\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"853.500000\" y=\"521.500000\" width=\"87\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"528.500000\" y=\"134.500000\" width=\"115\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"184.500000\" y=\"571.500000\" width=\"78\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"327.500000\" y=\"571.500000\" width=\"78\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"630.500000\" y=\"571.500000\" width=\"48\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n</mask></svg></svg>\n",
          "d2_src": "direction: down\n\nvars: {\n  d2-config: {\n    pad: 0\n    theme-overrides: {\n      B1: \"#717D86\"\n      B2: \"#717D86\"\n      B3: \"#ffff00\"\n      B4: \"#151719\"\n      B5: \"#151719\"\n      B6: \"#151719\"\n      N1: \"#ECEDED\"\n      N7: \"#151719\"\n      AA2: \"#ECEDED\"\n    }\n  }\n}\n\nstyle: {\n  fill: \"#151719\"\n}\ncom.ch.Camera -> com.ch.math.Matrix4f: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Camera -> com.ch.math.Vector3f: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.voxel.World -> com.ch.Camera: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Camera -> com.ch.voxel.World: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\ncom.ch.Camera -> com.ch.Transform: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\ncom.ch.CameraStruct -> com.ch.Camera: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\ncom.ch.math.Matrix4f <-> com.ch.Camera: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\ncom.ch.Camera: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.math.Matrix4f: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.Transform: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.CameraStruct: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.voxel.World: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.math.Vector3f: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.Camera: {\n  style: {\n    fill: \"#26de81\"\n    font-color: \"#151719\"\n    stroke-width: 0\n  }\n}\n"
        },
        "items": [
          {
            "id": "dd004b5e-7ef8-808a-724d-0478fe6690ea",
            "ancestors": [],
            "description": "Is an abstract class that handles camera-related tasks in a 3D graphics context. It maintains a projection matrix and calculates view matrices based on transformations and position of the camera. The class also provides methods to calculate view projections, translate camera positions, and adjust the camera for viewport changes.",
            "name": "Camera",
            "location": {
              "start": 6,
              "insert": 6,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 49,
            "docLength": null
          },
          {
            "id": "ab97fc87-174e-6c99-7f49-e4e128b5bb5f",
            "ancestors": [
              "dd004b5e-7ef8-808a-724d-0478fe6690ea"
            ],
            "description": "Calculates and returns a matrix representing the combined view and projection transformations when necessary, based on whether the `viewProjectionMat4` is null or if the transformation has changed. The calculation of the view matrix is performed only when required.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a Matrix4f object, either cached or recalculated.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Camera camera = new Camera(projection);\ncamera.getTransform().setPosition(new Vector3f(0, 0, -5));\nMatrix4f viewProjectionMat = camera.getViewProjection();\n",
              "description": "\nResulting in: Calculating the view matrix and returning it as a Matrix4f object."
            },
            "name": "getViewProjection",
            "location": {
              "start": 18,
              "insert": 18,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "0fdc91cd-0029-3a99-2440-49b251390c98",
            "ancestors": [
              "dd004b5e-7ef8-808a-724d-0478fe6690ea"
            ],
            "description": "Calculates a view matrix by multiplying three matrices: a rotation matrix representing camera rotation, a translation matrix representing camera position, and a projection matrix. The result is then stored in the `viewProjectionMat4`.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a combined view-projection matrix.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Camera camera = new Camera(projection);\ncamera.getTransform().setPos(new Vector3f(1, 2, 3));\ncamera.getTransform().setRot(new Quaternion(0, 0, 0, 1));\nMatrix4f viewProjectionMat4 = camera.getViewProjection();\n",
              "description": ""
            },
            "name": "calculateViewMatrix",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "58052af7-83af-b2a0-234d-bc74de805f18",
            "ancestors": [
              "dd004b5e-7ef8-808a-724d-0478fe6690ea"
            ],
            "description": "Computes a translation matrix from a given camera position. It multiplies the transformed position by -1, then initializes a new Matrix4f object with the translated x, y, and z coordinates.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a 4x4 matrix for translation based on the camera position.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Camera camera = new Camera(projection);\ncamera.getTransform().setPos(new Vector3f(1, 2, 3));\nMatrix4f translationMat = camera.getTranslationMatrix();\n",
              "description": ""
            },
            "name": "getTranslationMatrix",
            "location": {
              "start": 35,
              "insert": 35,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "7f4c7903-9fbe-bdbd-b242-c306badbf58d",
            "ancestors": [
              "dd004b5e-7ef8-808a-724d-0478fe6690ea"
            ],
            "description": "Returns a reference to a `transform` object. This allows other parts of the program to access and utilize the transformation data stored in the `transform` object. The function does not modify or manipulate the `transform` object in any way.",
            "params": [],
            "returns": {
              "type_name": "Transform",
              "description": "a reference to an object of type `Transform`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Camera camera = new Camera(projection);\nTransform transform = camera.getTransform();\n",
              "description": ""
            },
            "name": "getTransform",
            "location": {
              "start": 40,
              "insert": 40,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "a9ed4636-bb72-55a3-b447-60d9041326dd",
            "ancestors": [
              "dd004b5e-7ef8-808a-724d-0478fe6690ea"
            ],
            "description": "Defines an abstract class with one method. This abstract class is intended to serve as a base for other classes that represent camera data structures. It provides a way to get the data as a Matrix4f object.",
            "name": "CameraStruct",
            "location": {
              "start": 48,
              "insert": 48,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "class",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Model.java",
    "path": "src/com/ch/Model.java",
    "content": {
      "structured": {
        "description": "A Model class that utilizes the LWJGL library to manage vertex arrays (VAO) and buffers for rendering 3D graphics. The model can be loaded from float[] vertices and int[] indices data, and then drawn using the glDrawElements method. The Model class provides methods for enabling/disabling attribute arrays and retrieving the VAO and size of the model.",
        "diagram": {
          "gviz": "digraph G {\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"]\n    \n    GL15 [label=\"org.lwjgl.opengl.GL15\", style=\"rounded,filled\"]\n    GL11 [label=\"org.lwjgl.opengl.GL11\", style=\"rounded,filled\"]\n    GL30 [label=\"org.lwjgl.opengl.GL30\", style=\"rounded,filled\"]\n    Chunk []\n    subgraph cluster_main {\n        // style=filled\n        color=\"#00000000\"\n        Model [] [fontsize=\"20pt\",style=filled,color=\"#26de81\",shape=square, fontname=\"Courier New\"]\n        label = \"\"\n    }\n    GL20 [label=\"org.lwjgl.opengl.GL20\", style=\"rounded,filled\"]\n    Model -> GL20 [style=\"dashed\"]\n    Chunk -> Model [penwidth=2]\n    Model -> GL11 [style=\"dashed\"]\n    Model -> GL15 [style=\"dashed\"]\n    Model -> GL30 [style=\"dashed\"]\n    Chunk -> Model [style=\"dashed\"]\n}\n",
          "d2": "<?xml version=\"1.0\" encoding=\"utf-8\"?><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" d2Version=\"v0.6.5\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 694 1040\"><svg id=\"d2-svg\" class=\"d2-4291077933\" width=\"694\" height=\"1040\" viewBox=\"11 11 694 1040\"><rect x=\"11.000000\" y=\"11.000000\" width=\"694.000000\" height=\"1040.000000\" rx=\"0.000000\" fill=\"#151719\" stroke-width=\"0\" /><style type=\"text/css\"><![CDATA[\n.d2-4291077933 .text {\n\tfont-family: \"d2-4291077933-font-regular\";\n}\n@font-face {\n\tfont-family: d2-4291077933-font-regular;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-4291077933 .text-italic {\n\tfont-family: \"d2-4291077933-font-italic\";\n}\n@font-face {\n\tfont-family: d2-4291077933-font-italic;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-4291077933 .text-mono {\n\tfont-family: \"d2-4291077933-font-mono\";\n}\n@font-face {\n\tfont-family: d2-4291077933-font-mono;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-4291077933 .text-mono-bold {\n\tfont-family: \"d2-4291077933-font-mono-bold\";\n}\n@font-face {\n\tfont-family: d2-4291077933-font-mono-bold;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}]]></style><style type=\"text/css\"><![CDATA[.shape {\n  shape-rendering: geometricPrecision;\n  stroke-linejoin: round;\n}\n.connection {\n  stroke-linecap: round;\n  stroke-linejoin: round;\n}\n.blend {\n  mix-blend-mode: multiply;\n  opacity: 0.5;\n}\n\n\t\t.d2-4291077933 .fill-N1{fill:#ECEDED;}\n\t\t.d2-4291077933 .fill-N2{fill:#676C7E;}\n\t\t.d2-4291077933 .fill-N3{fill:#9499AB;}\n\t\t.d2-4291077933 .fill-N4{fill:#CFD2DD;}\n\t\t.d2-4291077933 .fill-N5{fill:#DEE1EB;}\n\t\t.d2-4291077933 .fill-N6{fill:#EEF1F8;}\n\t\t.d2-4291077933 .fill-N7{fill:#151719;}\n\t\t.d2-4291077933 .fill-B1{fill:#717D86;}\n\t\t.d2-4291077933 .fill-B2{fill:#717D86;}\n\t\t.d2-4291077933 .fill-B3{fill:#ffff00;}\n\t\t.d2-4291077933 .fill-B4{fill:#151719;}\n\t\t.d2-4291077933 .fill-B5{fill:#151719;}\n\t\t.d2-4291077933 .fill-B6{fill:#151719;}\n\t\t.d2-4291077933 .fill-AA2{fill:#ECEDED;}\n\t\t.d2-4291077933 .fill-AA4{fill:#CFD2DD;}\n\t\t.d2-4291077933 .fill-AA5{fill:#DEE1EB;}\n\t\t.d2-4291077933 .fill-AB4{fill:#CFD2DD;}\n\t\t.d2-4291077933 .fill-AB5{fill:#DEE1EB;}\n\t\t.d2-4291077933 .stroke-N1{stroke:#ECEDED;}\n\t\t.d2-4291077933 .stroke-N2{stroke:#676C7E;}\n\t\t.d2-4291077933 .stroke-N3{stroke:#9499AB;}\n\t\t.d2-4291077933 .stroke-N4{stroke:#CFD2DD;}\n\t\t.d2-4291077933 .stroke-N5{stroke:#DEE1EB;}\n\t\t.d2-4291077933 .stroke-N6{stroke:#EEF1F8;}\n\t\t.d2-4291077933 .stroke-N7{stroke:#151719;}\n\t\t.d2-4291077933 .stroke-B1{stroke:#717D86;}\n\t\t.d2-4291077933 .stroke-B2{stroke:#717D86;}\n\t\t.d2-4291077933 .stroke-B3{stroke:#ffff00;}\n\t\t.d2-4291077933 .stroke-B4{stroke:#151719;}\n\t\t.d2-4291077933 .stroke-B5{stroke:#151719;}\n\t\t.d2-4291077933 .stroke-B6{stroke:#151719;}\n\t\t.d2-4291077933 .stroke-AA2{stroke:#ECEDED;}\n\t\t.d2-4291077933 .stroke-AA4{stroke:#CFD2DD;}\n\t\t.d2-4291077933 .stroke-AA5{stroke:#DEE1EB;}\n\t\t.d2-4291077933 .stroke-AB4{stroke:#CFD2DD;}\n\t\t.d2-4291077933 .stroke-AB5{stroke:#DEE1EB;}\n\t\t.d2-4291077933 .background-color-N1{background-color:#ECEDED;}\n\t\t.d2-4291077933 .background-color-N2{background-color:#676C7E;}\n\t\t.d2-4291077933 .background-color-N3{background-color:#9499AB;}\n\t\t.d2-4291077933 .background-color-N4{background-color:#CFD2DD;}\n\t\t.d2-4291077933 .background-color-N5{background-color:#DEE1EB;}\n\t\t.d2-4291077933 .background-color-N6{background-color:#EEF1F8;}\n\t\t.d2-4291077933 .background-color-N7{background-color:#151719;}\n\t\t.d2-4291077933 .background-color-B1{background-color:#717D86;}\n\t\t.d2-4291077933 .background-color-B2{background-color:#717D86;}\n\t\t.d2-4291077933 .background-color-B3{background-color:#ffff00;}\n\t\t.d2-4291077933 .background-color-B4{background-color:#151719;}\n\t\t.d2-4291077933 .background-color-B5{background-color:#151719;}\n\t\t.d2-4291077933 .background-color-B6{background-color:#151719;}\n\t\t.d2-4291077933 .background-color-AA2{background-color:#ECEDED;}\n\t\t.d2-4291077933 .background-color-AA4{background-color:#CFD2DD;}\n\t\t.d2-4291077933 .background-color-AA5{background-color:#DEE1EB;}\n\t\t.d2-4291077933 .background-color-AB4{background-color:#CFD2DD;}\n\t\t.d2-4291077933 .background-color-AB5{background-color:#DEE1EB;}\n\t\t.d2-4291077933 .color-N1{color:#ECEDED;}\n\t\t.d2-4291077933 .color-N2{color:#676C7E;}\n\t\t.d2-4291077933 .color-N3{color:#9499AB;}\n\t\t.d2-4291077933 .color-N4{color:#CFD2DD;}\n\t\t.d2-4291077933 .color-N5{color:#DEE1EB;}\n\t\t.d2-4291077933 .color-N6{color:#EEF1F8;}\n\t\t.d2-4291077933 .color-N7{color:#151719;}\n\t\t.d2-4291077933 .color-B1{color:#717D86;}\n\t\t.d2-4291077933 .color-B2{color:#717D86;}\n\t\t.d2-4291077933 .color-B3{color:#ffff00;}\n\t\t.d2-4291077933 .color-B4{color:#151719;}\n\t\t.d2-4291077933 .color-B5{color:#151719;}\n\t\t.d2-4291077933 .color-B6{color:#151719;}\n\t\t.d2-4291077933 .color-AA2{color:#ECEDED;}\n\t\t.d2-4291077933 .color-AA4{color:#CFD2DD;}\n\t\t.d2-4291077933 .color-AA5{color:#DEE1EB;}\n\t\t.d2-4291077933 .color-AB4{color:#CFD2DD;}\n\t\t.d2-4291077933 .color-AB5{color:#DEE1EB;}.appendix text.text{fill:#ECEDED}.md{--color-fg-default:#ECEDED;--color-fg-muted:#676C7E;--color-fg-subtle:#9499AB;--color-canvas-default:#151719;--color-canvas-subtle:#EEF1F8;--color-border-default:#717D86;--color-border-muted:#717D86;--color-neutral-muted:#EEF1F8;--color-accent-fg:#717D86;--color-accent-emphasis:#717D86;--color-attention-subtle:#676C7E;--color-danger-fg:red;}.sketch-overlay-B1{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B3{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-B4{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B5{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B6{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-AA2{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AA4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AA5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AB4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AB5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N1{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-N3{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N6{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N7{fill:url(#streaks-darker);mix-blend-mode:lighten}.light-code{display: block}.dark-code{display: none}]]></style><g id=\"com\"><g class=\"shape\" ><rect x=\"161.000000\" y=\"12.000000\" width=\"394.000000\" height=\"522.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"358.000000\" y=\"45.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">com</text></g><g id=\"org\"><g class=\"shape\" ><rect x=\"12.000000\" y=\"674.000000\" width=\"692.000000\" height=\"376.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"358.000000\" y=\"707.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">org</text></g><g id=\"com.ch\"><g class=\"shape\" ><rect x=\"211.000000\" y=\"62.000000\" width=\"294.000000\" height=\"417.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"358.000000\" y=\"91.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">ch</text></g><g id=\"org.lwjgl\"><g class=\"shape\" ><rect x=\"62.000000\" y=\"729.000000\" width=\"592.000000\" height=\"271.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"358.000000\" y=\"758.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">lwjgl</text></g><g id=\"com.ch.Model\"><g class=\"shape\" ><rect x=\"278.000000\" y=\"363.000000\" width=\"160.000000\" height=\"66.000000\" fill=\"#26de81\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"358.000000\" y=\"401.500000\" fill=\"#151719\" class=\"text-mono-bold\" style=\"text-anchor:middle;font-size:16px\">Model</text></g><g id=\"org.lwjgl.opengl\"><g class=\"shape\" ><rect x=\"112.000000\" y=\"784.000000\" width=\"492.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"358.000000\" y=\"809.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">opengl</text></g><g id=\"com.ch.voxel\"><g class=\"shape\" ><rect x=\"261.000000\" y=\"112.000000\" width=\"194.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"358.000000\" y=\"137.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">voxel</text></g><g id=\"org.lwjgl.opengl.GL11\"><g class=\"shape\" ><rect x=\"162.000000\" y=\"834.000000\" width=\"83.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"203.500000\" y=\"872.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">GL11</text></g><g id=\"org.lwjgl.opengl.GL15\"><g class=\"shape\" ><rect x=\"265.000000\" y=\"834.000000\" width=\"83.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"306.500000\" y=\"872.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">GL15</text></g><g id=\"org.lwjgl.opengl.GL20\"><g class=\"shape\" ><rect x=\"368.000000\" y=\"834.000000\" width=\"83.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"409.500000\" y=\"872.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">GL20</text></g><g id=\"org.lwjgl.opengl.GL30\"><g class=\"shape\" ><rect x=\"471.000000\" y=\"834.000000\" width=\"83.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"512.500000\" y=\"872.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">GL30</text></g><g id=\"com.ch.voxel.Chunk\"><g class=\"shape\" ><rect x=\"311.000000\" y=\"162.000000\" width=\"94.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"358.000000\" y=\"200.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Chunk</text></g><g id=\"(com.ch.Model -&gt; org.lwjgl.opengl.GL11)[0]\"><marker id=\"mk-558834944\" markerWidth=\"10.000000\" markerHeight=\"12.000000\" refX=\"7.000000\" refY=\"6.000000\" viewBox=\"0.000000 0.000000 10.000000 12.000000\" orient=\"auto\" markerUnits=\"userSpaceOnUse\"> <polygon points=\"0.000000,0.000000 10.000000,6.000000 0.000000,12.000000\" fill=\"#26de81\" class=\"connection\" stroke-width=\"2\" /> </marker><path d=\"M 310.000000 430.000000 L 310.000000 569.000000 S 310.000000 579.000000 300.000000 579.000000 L 213.500000 579.000000 S 203.500000 579.000000 203.500000 589.000000 L 203.500000 830.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-4291077933)\" /><text x=\"238.000000\" y=\"824.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Model -&gt; org.lwjgl.opengl.GL15)[0]\"><path d=\"M 342.000000 430.000000 L 342.000000 619.000000 S 342.000000 629.000000 332.000000 629.000000 L 316.500000 629.000000 S 306.500000 629.000000 306.500000 639.000000 L 306.500000 830.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-4291077933)\" /><text x=\"341.000000\" y=\"824.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Model -&gt; org.lwjgl.opengl.GL20)[0]\"><path d=\"M 374.000000 430.000000 L 374.000000 619.000000 S 374.000000 629.000000 384.000000 629.000000 L 399.500000 629.000000 S 409.500000 629.000000 409.500000 639.000000 L 409.500000 830.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-4291077933)\" /><text x=\"444.000000\" y=\"824.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Model -&gt; org.lwjgl.opengl.GL30)[0]\"><path d=\"M 406.000000 430.000000 L 406.000000 569.000000 S 406.000000 579.000000 416.000000 579.000000 L 502.500000 579.000000 S 512.500000 579.000000 512.500000 589.000000 L 512.500000 830.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-4291077933)\" /><text x=\"547.000000\" y=\"824.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(voxel.Chunk -&gt; Model)[0]\"><path d=\"M 331.333008 229.000000 L 331.333008 360.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-4291077933)\" /><text x=\"365.000000\" y=\"353.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(voxel.Chunk -&gt; Model)[1]\"><path d=\"M 384.665985 229.000000 L 384.665985 360.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-4291077933)\" /></g><mask id=\"d2-4291077933\" maskUnits=\"userSpaceOnUse\" x=\"11\" y=\"11\" width=\"694\" height=\"1040\">\n<rect x=\"11\" y=\"11\" width=\"694\" height=\"1040\" fill=\"white\"></rect>\n<rect x=\"333.500000\" y=\"17.000000\" width=\"49\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"339.000000\" y=\"679.000000\" width=\"38\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"347.000000\" y=\"67.000000\" width=\"22\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"334.500000\" y=\"734.000000\" width=\"47\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"334.000000\" y=\"385.500000\" width=\"48\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"329.000000\" y=\"789.000000\" width=\"58\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"335.500000\" y=\"117.000000\" width=\"45\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"184.500000\" y=\"856.500000\" width=\"38\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"287.500000\" y=\"856.500000\" width=\"38\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"390.500000\" y=\"856.500000\" width=\"38\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"493.500000\" y=\"856.500000\" width=\"38\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"333.500000\" y=\"184.500000\" width=\"49\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n</mask></svg></svg>\n",
          "d2_src": "direction: down\n\nvars: {\n  d2-config: {\n    pad: 0\n    theme-overrides: {\n      B1: \"#717D86\"\n      B2: \"#717D86\"\n      B3: \"#ffff00\"\n      B4: \"#151719\"\n      B5: \"#151719\"\n      B6: \"#151719\"\n      N1: \"#ECEDED\"\n      N7: \"#151719\"\n      AA2: \"#ECEDED\"\n    }\n  }\n}\n\nstyle: {\n  fill: \"#151719\"\n}\ncom.ch.Model -> org.lwjgl.opengl.GL11: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Model -> org.lwjgl.opengl.GL15: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Model -> org.lwjgl.opengl.GL20: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Model -> org.lwjgl.opengl.GL30: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.voxel.Chunk -> com.ch.Model: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.voxel.Chunk -> com.ch.Model: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\norg.lwjgl.opengl.GL11: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.opengl.GL20: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.opengl.GL15: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.opengl.GL30: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\ncom.ch.Model: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.voxel.Chunk: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.Model: {\n  style: {\n    fill: \"#26de81\"\n    font-color: \"#151719\"\n    stroke-width: 0\n  }\n}\n"
        },
        "items": [
          {
            "id": "c7df95e5-2254-5a8e-a34a-2f15391e0197",
            "ancestors": [],
            "description": "Is used for rendering 3D models in an OpenGL context. It manages vertex array objects (VAOs) and buffers for storing vertex data and indices. The class provides methods for loading model data, enabling/disabling attributes, drawing the model, and accessing VAO and size properties.",
            "name": "Model",
            "location": {
              "start": 8,
              "insert": 8,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 73,
            "docLength": null
          },
          {
            "id": "75fd9fff-6217-46aa-e143-0a2c959dda40",
            "ancestors": [
              "c7df95e5-2254-5a8e-a34a-2f15391e0197"
            ],
            "description": "Renders a graphical object with vertices and indices stored in the vertex array object (VAO). It binds the VAO, enables vertex attributes, draws triangles using indices, disables vertex attributes, and unbinds the VAO to prepare for further rendering operations.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public void render() {\n    Model model = Model.load(new float[] {0, 0, 0, 1, 0, 0, 0, 1}, new int[] {0, 1, 2});\n    model.draw();\n}\n",
              "description": ""
            },
            "name": "draw",
            "location": {
              "start": 17,
              "insert": 17,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "b4ecde5f-8160-5a89-2e42-c3264f411e0d",
            "ancestors": [
              "c7df95e5-2254-5a8e-a34a-2f15391e0197"
            ],
            "description": "Enables attribute arrays for vertex shader programs. It specifies two attribute arrays with indices 0 and 1, indicating that these attributes should be enabled for rendering.",
            "params": [],
            "name": "enableAttribs",
            "location": {
              "start": 28,
              "insert": 28,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "d6d3b333-5053-9494-914f-3ad5b97c8d4f",
            "ancestors": [
              "c7df95e5-2254-5a8e-a34a-2f15391e0197"
            ],
            "description": "Disables vertex attribute arrays for indices 0 and 1 using OpenGL API calls to GL20.",
            "params": [],
            "name": "disableAttribs",
            "location": {
              "start": 33,
              "insert": 33,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "111dca35-08e2-25a0-5444-999c29995a11",
            "ancestors": [
              "c7df95e5-2254-5a8e-a34a-2f15391e0197"
            ],
            "description": "Returns an integer value representing a vertex array object (VAO). The VAO is presumably used for rendering graphics, and its returned value can be accessed or utilized by other parts of the program.",
            "params": [],
            "returns": {
              "type_name": "integer",
              "description": "an integer value representing a Vertex Array Object (VAO).",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Model model = Model.load(vertices, indices);\nint vao = model.getVAO();",
              "description": ""
            },
            "name": "getVAO",
            "location": {
              "start": 38,
              "insert": 38,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "8dfc7b87-469a-3f8d-2544-772f07ca61fd",
            "ancestors": [
              "c7df95e5-2254-5a8e-a34a-2f15391e0197"
            ],
            "description": "Returns the value of the `size` variable. It does not perform any calculations or modifications to external variables, but simply retrieves and exposes the current state of the `size`. The returned value is an integer representing the size.",
            "params": [],
            "returns": {
              "type_name": "integer",
              "description": "an integer representing the value of the variable `size`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Model model = Model.load(new float[] {}, new int[] {});\nSystem.out.println(model.getSize());\n",
              "description": ""
            },
            "name": "getSize",
            "location": {
              "start": 42,
              "insert": 42,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "c09da5a6-6dc2-79b1-0244-d7da152e7e5d",
            "ancestors": [
              "c7df95e5-2254-5a8e-a34a-2f15391e0197"
            ],
            "description": "Initializes a Model object by creating a Vertex Array Object (VAO) and storing vertex data and indices. It then unbinds the VAO before returning the new Model instance with its unique identifier and index count.",
            "params": [
              {
                "name": "vertices",
                "type_name": "float[]",
                "description": "3D vertex data to be stored and used for rendering a model.",
                "complex_type": false
              },
              {
                "name": "indices",
                "type_name": "int[]",
                "description": "1D array of indices that define the order in which vertices are used to render geometric shapes.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "object",
              "description": "an instance of the `Model` class with specified VAO and vertex count.",
              "complex_type": false
            },
            "name": "load",
            "location": {
              "start": 46,
              "insert": 46,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "98ab4e96-3f52-b4bb-be42-e7b0b847112e",
            "ancestors": [
              "c7df95e5-2254-5a8e-a34a-2f15391e0197"
            ],
            "description": "Generates a unique identifier for a vertex array object using `GL30.glGenVertexArrays()`, then binds it to the current context with `GL30.glBindVertexArray()`. It returns the generated identifier, enabling the creation of vertex arrays for rendering graphics.",
            "params": [],
            "returns": {
              "type_name": "integer",
              "description": "an integer representing a generated vertex array object.",
              "complex_type": false
            },
            "name": "createVAO",
            "location": {
              "start": 55,
              "insert": 55,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "0af3ca1f-5b69-c285-fd4f-7db7e6c4ad03",
            "ancestors": [
              "c7df95e5-2254-5a8e-a34a-2f15391e0197"
            ],
            "description": "Creates a buffer object to store data and binds it to the OpenGL context. It then loads the data into the buffer using `glBufferData`. The function also sets up vertex attributes for the stored data, specifying their layout and type.",
            "params": [
              {
                "name": "attrib",
                "type_name": "int",
                "description": "attribute index that corresponds to the vertex attribute array being configured for vertex buffer object (VBO) data storage.",
                "complex_type": false
              },
              {
                "name": "data",
                "type_name": "float[]",
                "description": "1D array of floating-point values to be stored in a buffer object and subsequently used for rendering purposes.",
                "complex_type": false
              }
            ],
            "name": "storeData",
            "location": {
              "start": 61,
              "insert": 61,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "293cd955-d01f-428a-2244-f877d88a132d",
            "ancestors": [
              "c7df95e5-2254-5a8e-a34a-2f15391e0197"
            ],
            "description": "Generates a buffer object, binds it to the element array buffer target, and loads the specified indices into the buffer using static draw mode.",
            "params": [
              {
                "name": "indices",
                "type_name": "int[]",
                "description": "1D array of indices that are used to store the vertex buffer object (VBO) on the graphics processing unit (GPU).",
                "complex_type": false
              }
            ],
            "name": "storeIndices",
            "location": {
              "start": 70,
              "insert": 70,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "6afdbc46-2c9d-48a1-6e41-64c1edc19ba5",
            "ancestors": [
              "c7df95e5-2254-5a8e-a34a-2f15391e0197"
            ],
            "description": "Binds a vertex array object (VAO) to index 0, effectively releasing any previously bound VAO and making it unavailable for rendering operations until another VAO is bound. This allows for efficient management of multiple VAOs in OpenGL applications.",
            "params": [],
            "name": "unbindVAO",
            "location": {
              "start": 76,
              "insert": 76,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Shader.java",
    "path": "src/com/ch/Shader.java",
    "content": {
      "structured": {
        "description": "A `Shader` class that loads and manages OpenGL shaders. It allows for the creation and binding of shaders, uniform floats, and matrices, as well as validating and linking the program. The code uses the `GL20` package for OpenGL functionality.",
        "items": [
          {
            "id": "af8a0eab-6f19-ff83-364b-3ee7cbc4218f",
            "ancestors": [],
            "type": "function",
            "description": "Is used to create and manage shaders for use in a 3D graphics pipeline. It provides methods for binding a program, getting the program, uniform floats, uniform matrices, and validating the program. The class also provides utilities for loading shader code from files.",
            "name": "Shader",
            "location": {
              "start": 19,
              "insert": 19,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 97,
            "docLength": null
          },
          {
            "id": "f92f19fd-0be1-7d8d-1943-580cf5a153f6",
            "ancestors": [
              "af8a0eab-6f19-ff83-364b-3ee7cbc4218f"
            ],
            "type": "function",
            "description": "Glues a program to the current GL context, enabling its use for rendering.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public void bind() {\n\tGL20.glUseProgram(program);\n}\n",
              "description": "\nThis method calls the OpenGL API function glUseProgram to bind a shader program to the current rendering state. It takes the program variable as an argument, which is an integer representing the handle of the shader program that should be bound. This method will typically be called at the beginning of each frame to ensure that the correct shader program is being used for the upcoming render operation."
            },
            "name": "bind",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "db976eb3-c7b1-0691-1146-fe0d64d4aaca",
            "ancestors": [
              "af8a0eab-6f19-ff83-364b-3ee7cbc4218f"
            ],
            "type": "function",
            "description": "Returns the value of a field called `program`.",
            "params": [],
            "returns": {
              "type_name": "int",
              "description": "an integer representation of the program.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n    Shader shader = new Shader(\"shader\");\n    int program = shader.getProgram();\n}\n",
              "description": ""
            },
            "name": "getProgram",
            "location": {
              "start": 31,
              "insert": 31,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "08ae9720-9bf2-c89b-cb4e-a508f500aeb7",
            "ancestors": [
              "af8a0eab-6f19-ff83-364b-3ee7cbc4218f"
            ],
            "type": "function",
            "description": "In Java takes a string `name` and an array of floating-point values `vals`. It applies the corresponding GL uniform function to the value at the specified location.",
            "params": [
              {
                "name": "name",
                "type_name": "String",
                "description": "name of the uniform location being modified.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "float val1 = 20; // single float value\nfloat val2 = 30; // multiple float values\nfloat val3[] = {1,2,3}; // array of float values\n\n// passing a single float value\nuniformf(\"myFloat\", val1);\n\n// passing multiple float values\nuniformf(\"myFloats\", val2, val3[0], val3[1], val3[2]);\n",
              "description": ""
            },
            "name": "uniformf",
            "location": {
              "start": 35,
              "insert": 35,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "0f7defb1-c0ba-dbb1-ec40-5d516712ee97",
            "ancestors": [
              "af8a0eab-6f19-ff83-364b-3ee7cbc4218f"
            ],
            "type": "function",
            "description": "Sets a 4x4 matrix to a uniform buffer using the `glUniformMatrix4` method from OpenGL's GL20 class, passing the matrix data as a flipped buffer.",
            "params": [
              {
                "name": "name",
                "type_name": "String",
                "description": "0-based index of a uniform buffer location for storing a 4x4 matrix.",
                "complex_type": false
              },
              {
                "name": "mat",
                "type_name": "Matrix4f",
                "description": "4x4 matrix of uniform values that will be uploaded to the GPU as a unified array through the `GL20.glUniformMatrix4()` method.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Matrix4f view = new Matrix4f();\nview.identity().translate(0, 1, -3);\nshader.uniformMat4(\"modelView\", view);\n",
              "description": "\nIn this code snippet, the Matrix4f object is created and assigned to a variable named \"view\". The identity() method of the Matrix4f object initializes the matrix to an identity matrix, and then the translate() method is called on it with parameters (0, 1, -3), which translates the matrix by those amounts.\nThe uniformMat4 method is then called on the Shader object, passing in the name of the uniform variable (\"modelView\") as a string, and the Matrix4f object created as a parameter. The getLoaction() method is used to retrieve the location of the uniform variable within the shader program, and the Util.createFlippedBuffer() method is then called on that location, passing in the linear data of the Matrix4f object. This creates an OpenGL-compatible buffer containing the matrix values for use in the shader program.\nThe result of this code is that a uniform variable named \"modelView\" will be set to the value of the view matrix within the shader program."
            },
            "name": "unifromMat4",
            "location": {
              "start": 52,
              "insert": 52,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "298dfdd0-77e0-6ea6-fd4f-1a850a6d721f",
            "ancestors": [
              "af8a0eab-6f19-ff83-364b-3ee7cbc4218f"
            ],
            "type": "function",
            "description": "Retrieves the uniform location of a named uniform in a GL20 program.",
            "params": [
              {
                "name": "name",
                "type_name": "String",
                "description": "0-based index of a uniform location to retrieve in the OpenGL 2.0 program.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "int",
              "description": "an integer representing the location of a uniform in a GPU program.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Shader shader = Shader.loadShader(\"myshader\");\nint location = shader.getLoaction(\"uniform_name\");\nGL20.glUniform1f(location, 5);\n",
              "description": ""
            },
            "name": "getLoaction",
            "location": {
              "start": 56,
              "insert": 56,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "707180fe-47ff-e997-8c44-50ee7af6c6be",
            "ancestors": [
              "af8a0eab-6f19-ff83-364b-3ee7cbc4218f"
            ],
            "type": "function",
            "description": "Loads a shader program from a file and validates it, returning a new `Shader` object representing the program.",
            "params": [
              {
                "name": "filename",
                "type_name": "String",
                "description": "name of a shader file that contains the vertex and fragment shaders to be loaded by the `loadShader()` function.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Shader",
              "description": "a new `Shader` object representing a compiled shader program.",
              "complex_type": false
            },
            "name": "loadShader",
            "location": {
              "start": 62,
              "insert": 62,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "a4c3563d-d07e-12bf-f74d-61ac4cd5ab32",
            "ancestors": [
              "af8a0eab-6f19-ff83-364b-3ee7cbc4218f"
            ],
            "type": "function",
            "description": "Creates a shader program and loads a shader source code into it. It compiles the shader and attaches it to the program. If compilation fails, an error message is printed and the program exits.",
            "params": [
              {
                "name": "target",
                "type_name": "int",
                "description": "type of shader being created, which determines the shader's functionality and is one of the four values defined by the GL20 class.",
                "complex_type": false
              },
              {
                "name": "src",
                "type_name": "String",
                "description": "1:1 representation of the source code for the shader, which is passed as a string to the `GL20.glShaderSource()` method for compilation.",
                "complex_type": false
              },
              {
                "name": "program",
                "type_name": "int",
                "description": "3D game engine program that the shader will be attached to after being compiled.",
                "complex_type": false
              }
            ],
            "name": "loadShader",
            "location": {
              "start": 70,
              "insert": 70,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "853359c9-a961-bbad-5643-7d28b7553ff2",
            "ancestors": [
              "af8a0eab-6f19-ff83-364b-3ee7cbc4218f"
            ],
            "type": "function",
            "description": "Links and validates a GPU program with the given ID, checking for errors and exiting the application if any are found.",
            "params": [
              {
                "name": "program",
                "type_name": "int",
                "description": "3D graphics program to be validated and linked, which is passed through the `glLinkProgram()` and `glValidateProgram()` functions for verification and linking.",
                "complex_type": false
              }
            ],
            "name": "validateProgram",
            "location": {
              "start": 84,
              "insert": 84,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "98ff94ae-ce54-929a-9346-305737b01d18",
            "ancestors": [
              "af8a0eab-6f19-ff83-364b-3ee7cbc4218f"
            ],
            "type": "function",
            "description": "Reads the contents of a given file as a string, handling potential exceptions gracefully.",
            "params": [
              {
                "name": "file",
                "type_name": "String",
                "description": "file whose contents are to be read and returned as a string.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a string representation of the contents of the specified file.",
              "complex_type": false
            },
            "name": "getText",
            "location": {
              "start": 100,
              "insert": 100,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 14,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Texture.java",
    "path": "res/shaders/Texture.java",
    "content": {
      "structured": {
        "description": "A class `Texture` that loads and manages textures for use in an OpenGL application. It uses the `GL11` and `GL30` packages to create and manage textures, as well as the `BufferedImage` class to read and manipulate image data. The `loadTexture()` method reads an image file and returns a texture ID that can be used to bind and render the texture in OpenGL. The `bind()` and `bind(int samplerSlot)` methods bind the specified texture to a specific texture slot, while the `getID()` method returns the ID of the bound texture.",
        "items": [
          {
            "id": "64d2697b-a4d0-219f-0440-92c8f21c68c3",
            "ancestors": [],
            "type": "function",
            "description": "Is used to handle texture mapping in OpenGL. It provides a simple way to load and bind textures to OpenGL surfaces. The class takes a filename as a constructor parameter and loads the texture data from the file using ImageIO. The loaded texture data is then bound to an OpenGL surface using the `bind()` method. The `getID()` method returns the ID of the loaded texture.",
            "name": "Texture",
            "location": {
              "start": 30,
              "insert": 30,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 80,
            "docLength": null
          },
          {
            "id": "53df2853-6370-c295-8d46-b182c6ce75e6",
            "ancestors": [
              "64d2697b-a4d0-219f-0440-92c8f21c68c3"
            ],
            "type": "function",
            "description": "Is a hook that allows for custom cleanup code to be executed when an object is about to be garbage collected.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public class MyClass {\n\t@Override\n\tprotected void finalize() {\n\t\tSystem.out.println(\"Finalizing\");\n\t}\n}\n\npublic static void main(String[] args) {\n\tMyClass myObject = new MyClass();\n\tmyObject = null; // This is where the garbage collector would pick up the object.\n}\n",
              "description": "\nThis code would print out \"Finalizing\" when the garbage collector picks up the object.  The finalize method should be used to free resources that your objects use, as they are about to be thrown away."
            },
            "name": "finalize",
            "location": {
              "start": 40,
              "insert": 40,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "d225b6d2-dcdf-3dbb-3147-60f3737ba5a0",
            "ancestors": [
              "64d2697b-a4d0-219f-0440-92c8f21c68c3"
            ],
            "type": "function",
            "description": "0 is used to bind a listener to a particular event.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "import java.io.*;\nimport java.nio.*;\nimport javax.imageio.*;\nimport org.lwjgl.opengl.*;\n\npublic class Texture {\n    private int id;\n    \n    public void bind() {\n        glActiveTexture(GL_TEXTURE0 + 0);\n        glBindTexture(GL_TEXTURE_2D, id);\n    }\n}\n\npublic static void main(String[] args) {\n    Texture texture = new Texture(\"image.png\");\n    \n    texture.bind();\n    \n    GL11.glBegin(GL11.GL_QUADS);\n    GL11.glTexCoord2f(0, 0);\n    GL11.glVertex2f(-1, -1);\n    GL11.glTexCoord2f(1, 0);\n    GL11.glVertex2f(1, -1);\n    GL11.glTexCoord2f(1, 1);\n    GL11.glVertex2f(1, 1);\n    GL11.glTexCoord2f(0, 1);\n    GL11.glVertex2f(-1, 1);\n    GL11.glEnd();\n}\n",
              "description": ""
            },
            "name": "bind",
            "location": {
              "start": 44,
              "insert": 44,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "de7e633b-0d54-66bc-0049-52450449ad11",
            "ancestors": [
              "64d2697b-a4d0-219f-0440-92c8f21c68c3"
            ],
            "type": "function",
            "description": "Sets the active texture slot to a specific value (0-31) and binds a texture ID to that slot using the `glBindTexture()` method.",
            "params": [
              {
                "name": "samplerSlot",
                "type_name": "int",
                "description": "0-based index of a texture slot to bind, with a range of 0 to 31.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "//Bind texture to sampler slot 0.\nTexture myTexture = new Texture(\"myTexture.png\");\nmyTexture.bind(0);\n",
              "description": ""
            },
            "name": "bind",
            "location": {
              "start": 48,
              "insert": 48,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "ab2a90ca-ea27-2b8e-bd4b-76fefcf18f32",
            "ancestors": [
              "64d2697b-a4d0-219f-0440-92c8f21c68c3"
            ],
            "type": "function",
            "description": "Returns the `id` variable's value.",
            "params": [],
            "returns": {
              "type_name": "int",
              "description": "an integer representing the value of the `id` field.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Texture texture = new Texture(\"grass.png\");\nint id = texture.getID();\n",
              "description": "\nIn this example, a new instance of the Texture class is created with the name \"grass.png\". Then, the value returned by the getID() method is assigned to an integer variable named \"id\". The code then uses this integer to access and manipulate the texture in some way."
            },
            "name": "getID",
            "location": {
              "start": 54,
              "insert": 54,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "24a8ff9c-5bdb-28a4-2143-70ada16c9e54",
            "ancestors": [
              "64d2697b-a4d0-219f-0440-92c8f21c68c3"
            ],
            "type": "function",
            "description": "Loads a 2D texture from an image file and stores it in a GL texture object, optionally generating mipmaps.",
            "params": [
              {
                "name": "fileName",
                "type_name": "String",
                "description": "file path of the texture image to load.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "int",
              "description": "an integer identifier of a texture object created from an image file.",
              "complex_type": false
            },
            "name": "loadTexture",
            "location": {
              "start": 58,
              "insert": 58,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 49,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Camera3D.java",
    "path": "src/com/ch/Camera3D.java",
    "content": {
      "structured": {
        "description": "A 3D camera class that handles user input and applies it to adjust the camera's perspective, rotation, and position in real-time. The camera uses OpenGL and LWJGL libraries for rendering and graphics manipulation. It also calculates projection and view matrices based on the camera's settings and updates them accordingly when the window is resized or the camera moves.",
        "diagram": {
          "gviz": "digraph G {\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"]\n    \n    subgraph cluster_1 {\n        label=\"com\"\n        color=\"#33363A\"\n        subgraph cluster_main {\n            // style=filled\n            color=\"#00000000\"\n            Camera3D [] [fontsize=\"20pt\",style=filled,color=\"#26de81\",shape=square, fontname=\"Courier New\"]\n            label = \"\"\n        }\n        CameraStruct []\n        subgraph cluster_2 {\n            label=\"ch\"\n            color=\"#33363A\"\n            Matrix4f []\n            Vector3f []\n        }\n    }\n    subgraph cluster_4 {\n        label=\"org/lwjgl\"\n        color=\"#33363A\"\n        Mouse [label=\"org.lwjgl.input.Mouse\", style=\"rounded,filled\"]\n        Keyboard [label=\"org.lwjgl.input.Keyboard\", style=\"rounded,filled\"]\n        GL11 [label=\"org.lwjgl.opengl.GL11\", style=\"rounded,filled\"]\n    }\n    Camera3D -> Vector3f [style=\"dashed\"]\n    Camera3D -> GL11 [style=\"dashed\"]\n    Camera3D -> Matrix4f [penwidth=2]\n    Camera3D -> Matrix4f [style=\"dashed\"]\n    Camera3D -> Mouse [style=\"dashed\"]\n    Camera3D -> Keyboard [style=\"dashed\"]\n    CameraStruct -> Camera3D [penwidth=1]\n    Vector3f -> Camera3D [penwidth=1]\n}\n",
          "d2": "<?xml version=\"1.0\" encoding=\"utf-8\"?><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" d2Version=\"v0.6.5\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 781 1461\"><svg id=\"d2-svg\" class=\"d2-1670053911\" width=\"781\" height=\"1461\" viewBox=\"11 11 781 1461\"><rect x=\"11.000000\" y=\"11.000000\" width=\"781.000000\" height=\"1461.000000\" rx=\"0.000000\" fill=\"#151719\" stroke-width=\"0\" /><style type=\"text/css\"><![CDATA[\n.d2-1670053911 .text {\n\tfont-family: \"d2-1670053911-font-regular\";\n}\n@font-face {\n\tfont-family: d2-1670053911-font-regular;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-1670053911 .text-italic {\n\tfont-family: \"d2-1670053911-font-italic\";\n}\n@font-face {\n\tfont-family: d2-1670053911-font-italic;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-1670053911 .text-mono {\n\tfont-family: \"d2-1670053911-font-mono\";\n}\n@font-face {\n\tfont-family: d2-1670053911-font-mono;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-1670053911 .text-mono-bold {\n\tfont-family: \"d2-1670053911-font-mono-bold\";\n}\n@font-face {\n\tfont-family: d2-1670053911-font-mono-bold;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}]]></style><style type=\"text/css\"><![CDATA[.shape {\n  shape-rendering: geometricPrecision;\n  stroke-linejoin: round;\n}\n.connection {\n  stroke-linecap: round;\n  stroke-linejoin: round;\n}\n.blend {\n  mix-blend-mode: multiply;\n  opacity: 0.5;\n}\n\n\t\t.d2-1670053911 .fill-N1{fill:#ECEDED;}\n\t\t.d2-1670053911 .fill-N2{fill:#676C7E;}\n\t\t.d2-1670053911 .fill-N3{fill:#9499AB;}\n\t\t.d2-1670053911 .fill-N4{fill:#CFD2DD;}\n\t\t.d2-1670053911 .fill-N5{fill:#DEE1EB;}\n\t\t.d2-1670053911 .fill-N6{fill:#EEF1F8;}\n\t\t.d2-1670053911 .fill-N7{fill:#151719;}\n\t\t.d2-1670053911 .fill-B1{fill:#717D86;}\n\t\t.d2-1670053911 .fill-B2{fill:#717D86;}\n\t\t.d2-1670053911 .fill-B3{fill:#ffff00;}\n\t\t.d2-1670053911 .fill-B4{fill:#151719;}\n\t\t.d2-1670053911 .fill-B5{fill:#151719;}\n\t\t.d2-1670053911 .fill-B6{fill:#151719;}\n\t\t.d2-1670053911 .fill-AA2{fill:#ECEDED;}\n\t\t.d2-1670053911 .fill-AA4{fill:#CFD2DD;}\n\t\t.d2-1670053911 .fill-AA5{fill:#DEE1EB;}\n\t\t.d2-1670053911 .fill-AB4{fill:#CFD2DD;}\n\t\t.d2-1670053911 .fill-AB5{fill:#DEE1EB;}\n\t\t.d2-1670053911 .stroke-N1{stroke:#ECEDED;}\n\t\t.d2-1670053911 .stroke-N2{stroke:#676C7E;}\n\t\t.d2-1670053911 .stroke-N3{stroke:#9499AB;}\n\t\t.d2-1670053911 .stroke-N4{stroke:#CFD2DD;}\n\t\t.d2-1670053911 .stroke-N5{stroke:#DEE1EB;}\n\t\t.d2-1670053911 .stroke-N6{stroke:#EEF1F8;}\n\t\t.d2-1670053911 .stroke-N7{stroke:#151719;}\n\t\t.d2-1670053911 .stroke-B1{stroke:#717D86;}\n\t\t.d2-1670053911 .stroke-B2{stroke:#717D86;}\n\t\t.d2-1670053911 .stroke-B3{stroke:#ffff00;}\n\t\t.d2-1670053911 .stroke-B4{stroke:#151719;}\n\t\t.d2-1670053911 .stroke-B5{stroke:#151719;}\n\t\t.d2-1670053911 .stroke-B6{stroke:#151719;}\n\t\t.d2-1670053911 .stroke-AA2{stroke:#ECEDED;}\n\t\t.d2-1670053911 .stroke-AA4{stroke:#CFD2DD;}\n\t\t.d2-1670053911 .stroke-AA5{stroke:#DEE1EB;}\n\t\t.d2-1670053911 .stroke-AB4{stroke:#CFD2DD;}\n\t\t.d2-1670053911 .stroke-AB5{stroke:#DEE1EB;}\n\t\t.d2-1670053911 .background-color-N1{background-color:#ECEDED;}\n\t\t.d2-1670053911 .background-color-N2{background-color:#676C7E;}\n\t\t.d2-1670053911 .background-color-N3{background-color:#9499AB;}\n\t\t.d2-1670053911 .background-color-N4{background-color:#CFD2DD;}\n\t\t.d2-1670053911 .background-color-N5{background-color:#DEE1EB;}\n\t\t.d2-1670053911 .background-color-N6{background-color:#EEF1F8;}\n\t\t.d2-1670053911 .background-color-N7{background-color:#151719;}\n\t\t.d2-1670053911 .background-color-B1{background-color:#717D86;}\n\t\t.d2-1670053911 .background-color-B2{background-color:#717D86;}\n\t\t.d2-1670053911 .background-color-B3{background-color:#ffff00;}\n\t\t.d2-1670053911 .background-color-B4{background-color:#151719;}\n\t\t.d2-1670053911 .background-color-B5{background-color:#151719;}\n\t\t.d2-1670053911 .background-color-B6{background-color:#151719;}\n\t\t.d2-1670053911 .background-color-AA2{background-color:#ECEDED;}\n\t\t.d2-1670053911 .background-color-AA4{background-color:#CFD2DD;}\n\t\t.d2-1670053911 .background-color-AA5{background-color:#DEE1EB;}\n\t\t.d2-1670053911 .background-color-AB4{background-color:#CFD2DD;}\n\t\t.d2-1670053911 .background-color-AB5{background-color:#DEE1EB;}\n\t\t.d2-1670053911 .color-N1{color:#ECEDED;}\n\t\t.d2-1670053911 .color-N2{color:#676C7E;}\n\t\t.d2-1670053911 .color-N3{color:#9499AB;}\n\t\t.d2-1670053911 .color-N4{color:#CFD2DD;}\n\t\t.d2-1670053911 .color-N5{color:#DEE1EB;}\n\t\t.d2-1670053911 .color-N6{color:#EEF1F8;}\n\t\t.d2-1670053911 .color-N7{color:#151719;}\n\t\t.d2-1670053911 .color-B1{color:#717D86;}\n\t\t.d2-1670053911 .color-B2{color:#717D86;}\n\t\t.d2-1670053911 .color-B3{color:#ffff00;}\n\t\t.d2-1670053911 .color-B4{color:#151719;}\n\t\t.d2-1670053911 .color-B5{color:#151719;}\n\t\t.d2-1670053911 .color-B6{color:#151719;}\n\t\t.d2-1670053911 .color-AA2{color:#ECEDED;}\n\t\t.d2-1670053911 .color-AA4{color:#CFD2DD;}\n\t\t.d2-1670053911 .color-AA5{color:#DEE1EB;}\n\t\t.d2-1670053911 .color-AB4{color:#CFD2DD;}\n\t\t.d2-1670053911 .color-AB5{color:#DEE1EB;}.appendix text.text{fill:#ECEDED}.md{--color-fg-default:#ECEDED;--color-fg-muted:#676C7E;--color-fg-subtle:#9499AB;--color-canvas-default:#151719;--color-canvas-subtle:#EEF1F8;--color-border-default:#717D86;--color-border-muted:#717D86;--color-neutral-muted:#EEF1F8;--color-accent-fg:#717D86;--color-accent-emphasis:#717D86;--color-attention-subtle:#676C7E;--color-danger-fg:red;}.sketch-overlay-B1{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B3{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-B4{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B5{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B6{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-AA2{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AA4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AA5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AB4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AB5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N1{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-N3{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N6{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N7{fill:url(#streaks-darker);mix-blend-mode:lighten}.light-code{display: block}.dark-code{display: none}]]></style><g id=\"com\"><g class=\"shape\" ><rect x=\"122.000000\" y=\"12.000000\" width=\"669.000000\" height=\"943.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"456.500000\" y=\"45.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">com</text></g><g id=\"org\"><g class=\"shape\" ><rect x=\"12.000000\" y=\"1095.000000\" width=\"737.000000\" height=\"376.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"380.500000\" y=\"1128.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">org</text></g><g id=\"com.ch\"><g class=\"shape\" ><rect x=\"172.000000\" y=\"62.000000\" width=\"569.000000\" height=\"838.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"456.500000\" y=\"91.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">ch</text></g><g id=\"org.lwjgl\"><g class=\"shape\" ><rect x=\"62.000000\" y=\"1150.000000\" width=\"637.000000\" height=\"271.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"380.500000\" y=\"1179.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">lwjgl</text></g><g id=\"com.ch.Camera3D\"><g class=\"shape\" ><rect x=\"360.000000\" y=\"248.000000\" width=\"240.000000\" height=\"66.000000\" fill=\"#26de81\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"480.000000\" y=\"286.500000\" fill=\"#151719\" class=\"text-mono-bold\" style=\"text-anchor:middle;font-size:16px\">Camera3D</text></g><g id=\"org.lwjgl.input\"><g class=\"shape\" ><rect x=\"112.000000\" y=\"1205.000000\" width=\"334.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"279.000000\" y=\"1230.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">input</text></g><g id=\"org.lwjgl.opengl\"><g class=\"shape\" ><rect x=\"466.000000\" y=\"1205.000000\" width=\"183.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"557.500000\" y=\"1230.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">opengl</text></g><g id=\"com.ch.math\"><g class=\"shape\" ><rect x=\"285.000000\" y=\"599.000000\" width=\"366.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"468.000000\" y=\"624.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">math</text></g><g id=\"com.ch.CameraStruct\"><g class=\"shape\" ><rect x=\"400.000000\" y=\"112.000000\" width=\"160.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"480.000000\" y=\"150.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">CameraStruct</text></g><g id=\"org.lwjgl.input.Keyboard\"><g class=\"shape\" ><rect x=\"162.000000\" y=\"1255.000000\" width=\"121.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"222.500000\" y=\"1293.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Keyboard</text></g><g id=\"org.lwjgl.input.Mouse\"><g class=\"shape\" ><rect x=\"303.000000\" y=\"1255.000000\" width=\"93.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"349.500000\" y=\"1293.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Mouse</text></g><g id=\"org.lwjgl.opengl.GL11\"><g class=\"shape\" ><rect x=\"516.000000\" y=\"1255.000000\" width=\"83.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"557.500000\" y=\"1293.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">GL11</text></g><g id=\"com.ch.math.Matrix4f\"><g class=\"shape\" ><rect x=\"335.000000\" y=\"649.000000\" width=\"123.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"396.500000\" y=\"687.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Matrix4f</text></g><g id=\"com.ch.math.Vector3f\"><g class=\"shape\" ><rect x=\"478.000000\" y=\"649.000000\" width=\"123.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"539.500000\" y=\"687.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Vector3f</text></g><g id=\"(com.ch.Camera3D -&gt; org.lwjgl.input.Keyboard)[0]\"><marker id=\"mk-558834944\" markerWidth=\"10.000000\" markerHeight=\"12.000000\" refX=\"7.000000\" refY=\"6.000000\" viewBox=\"0.000000 0.000000 10.000000 12.000000\" orient=\"auto\" markerUnits=\"userSpaceOnUse\"> <polygon points=\"0.000000,0.000000 10.000000,6.000000 0.000000,12.000000\" fill=\"#26de81\" class=\"connection\" stroke-width=\"2\" /> </marker><path d=\"M 390.000000 315.000000 L 390.000000 344.000000 S 390.000000 354.000000 380.000000 354.000000 L 232.500000 354.000000 S 222.500000 354.000000 222.500000 364.000000 L 222.500000 1251.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-1670053911)\" /><text x=\"257.000000\" y=\"1245.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Camera3D -&gt; org.lwjgl.input.Mouse)[0]\"><path d=\"M 420.000000 315.000000 L 420.000000 394.000000 S 420.000000 404.000000 410.000000 404.000000 L 243.500000 404.000000 S 233.500000 404.000000 233.500000 414.000000 L 233.500000 1040.000000 S 233.500000 1050.000000 243.500000 1050.000000 L 339.500000 1050.000000 S 349.500000 1050.000000 349.500000 1060.000000 L 349.500000 1251.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-1670053911)\" /><text x=\"384.000000\" y=\"1245.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Camera3D -&gt; org.lwjgl.opengl.GL11)[0]\"><path d=\"M 450.000000 315.000000 L 450.000000 444.000000 S 450.000000 454.000000 440.000000 454.000000 L 254.500000 454.000000 S 244.500000 454.000000 244.500000 464.000000 L 244.500000 990.000000 S 244.500000 1000.000000 254.500000 1000.000000 L 547.500000 1000.000000 S 557.500000 1000.000000 557.500000 1010.000000 L 557.500000 1251.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-1670053911)\" /><text x=\"592.000000\" y=\"1245.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(Camera3D -&gt; math.Matrix4f)[0]\"><path d=\"M 480.000000 315.000000 L 480.000000 494.000000 S 480.000000 504.000000 470.000000 504.000000 L 386.500000 504.000000 S 376.500000 504.000000 376.500000 514.000000 L 376.500000 646.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-1670053911)\" /><text x=\"411.000000\" y=\"639.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(Camera3D -&gt; math.Vector3f)[0]\"><path d=\"M 540.000000 315.000000 L 540.000000 646.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-1670053911)\" /><text x=\"574.000000\" y=\"639.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(Camera3D -&gt; math.Matrix4f)[1]\"><path d=\"M 510.000000 315.000000 L 510.000000 544.000000 S 510.000000 554.000000 500.000000 554.000000 L 427.500000 554.000000 S 417.500000 554.000000 417.500000 564.000000 L 417.500000 646.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-1670053911)\" /></g><g id=\"com.ch.(CameraStruct -&gt; Camera3D)[0]\"><path d=\"M 480.000000 179.000000 L 480.000000 245.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-1670053911)\" /></g><g id=\"com.ch.(math.Vector3f -&gt; Camera3D)[0]\"><path d=\"M 540.000000 716.000000 L 540.000000 800.000000 S 540.000000 810.000000 550.000000 810.000000 L 681.500000 810.000000 S 691.500000 810.000000 691.500000 800.000000 L 691.500000 364.000000 S 691.500000 354.000000 681.500000 354.000000 L 580.000000 354.000000 S 570.000000 354.000000 570.000000 344.000000 L 570.000000 317.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-1670053911)\" /></g><mask id=\"d2-1670053911\" maskUnits=\"userSpaceOnUse\" x=\"11\" y=\"11\" width=\"781\" height=\"1461\">\n<rect x=\"11\" y=\"11\" width=\"781\" height=\"1461\" fill=\"white\"></rect>\n<rect x=\"432.000000\" y=\"17.000000\" width=\"49\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"361.500000\" y=\"1100.000000\" width=\"38\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"445.500000\" y=\"67.000000\" width=\"22\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"357.000000\" y=\"1155.000000\" width=\"47\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"441.000000\" y=\"270.500000\" width=\"78\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"256.500000\" y=\"1210.000000\" width=\"45\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"528.500000\" y=\"1210.000000\" width=\"58\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"446.500000\" y=\"604.000000\" width=\"43\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"422.500000\" y=\"134.500000\" width=\"115\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"184.500000\" y=\"1277.500000\" width=\"76\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"325.500000\" y=\"1277.500000\" width=\"48\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"538.500000\" y=\"1277.500000\" width=\"38\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"357.500000\" y=\"671.500000\" width=\"78\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"500.500000\" y=\"671.500000\" width=\"78\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n</mask></svg></svg>\n",
          "d2_src": "direction: down\n\nvars: {\n  d2-config: {\n    pad: 0\n    theme-overrides: {\n      B1: \"#717D86\"\n      B2: \"#717D86\"\n      B3: \"#ffff00\"\n      B4: \"#151719\"\n      B5: \"#151719\"\n      B6: \"#151719\"\n      N1: \"#ECEDED\"\n      N7: \"#151719\"\n      AA2: \"#ECEDED\"\n    }\n  }\n}\n\nstyle: {\n  fill: \"#151719\"\n}\ncom.ch.Camera3D -> org.lwjgl.input.Keyboard: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Camera3D -> org.lwjgl.input.Mouse: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Camera3D -> org.lwjgl.opengl.GL11: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Camera3D -> com.ch.math.Matrix4f: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Camera3D -> com.ch.math.Vector3f: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Camera3D -> com.ch.math.Matrix4f: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\ncom.ch.CameraStruct -> com.ch.Camera3D: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\ncom.ch.math.Vector3f -> com.ch.Camera3D: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\norg.lwjgl.opengl.GL11: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.input.Keyboard: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.input.Mouse: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\ncom.ch.CameraStruct: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.math.Matrix4f: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.Camera3D: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.math.Vector3f: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.Camera3D: {\n  style: {\n    fill: \"#26de81\"\n    font-color: \"#151719\"\n    stroke-width: 0\n  }\n}\n"
        },
        "items": [
          {
            "id": "e65edb9f-5c3e-55be-c942-8aab0b132c85",
            "ancestors": [],
            "description": "Represents a camera object in a 3D environment, handling projection and view matrix calculations, as well as adjusting to the viewport. It also processes user input, including mouse and keyboard events, to control the camera's rotation and movement.",
            "name": "Camera3D",
            "location": {
              "start": 10,
              "insert": 10,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 70,
            "docLength": null
          },
          {
            "id": "61a5f265-4f78-a8a2-c046-62983374a906",
            "ancestors": [
              "e65edb9f-5c3e-55be-c942-8aab0b132c85"
            ],
            "description": "Returns a 4x4 projection matrix based on input from a `CameraStruct`. The input is directly assigned to the `projection` variable and returned as the output.",
            "params": [
              {
                "name": "data",
                "type_name": "CameraStruct",
                "description": "4x4 matrix that is used to create the projection matrix, which is then returned by the function.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a `Matrix4f` object representing the projection matrix.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "CameraStruct3D cameraData = new CameraStruct3D(45, 16/9f, 0.1f, 100);\nMatrix4f projection = camera.new Camera().calculateProjectionMatrix(cameraData);",
              "description": ""
            },
            "name": "calculateProjectionMatrix",
            "location": {
              "start": 18,
              "insert": 18,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "0dbd3d71-73d7-a5a4-3f42-b5f412541bfa",
            "ancestors": [
              "e65edb9f-5c3e-55be-c942-8aab0b132c85"
            ],
            "description": "Sets the aspect ratio of a camera and calculates its projection matrix and view matrix based on the provided viewport dimensions. It also sets up the OpenGL viewport to match the specified width and height, handling potential null pointer exceptions.",
            "params": [
              {
                "name": "width",
                "type_name": "int",
                "description": "2D viewport width that determines the aspect ratio for the camera's projection matrix.",
                "complex_type": false
              },
              {
                "name": "height",
                "type_name": "int",
                "description": "height of the viewport and is used to calculate the aspect ratio and update the glViewport function.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Camera3D camera = new Camera3D(45, 4/3f, 0.1f, 100);\ncamera.adjustToViewport(800, 600);",
              "description": ""
            },
            "name": "adjustToViewport",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "a659c3de-7ffd-d196-da47-027128779257",
            "ancestors": [
              "e65edb9f-5c3e-55be-c942-8aab0b132c85"
            ],
            "description": "Is an extension of the CameraStruct class that represents a camera configuration for a 3D perspective projection. It encapsulates parameters necessary to initialize a projection matrix.",
            "name": "CameraStruct3D",
            "location": {
              "start": 34,
              "insert": 34,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "class",
            "length": 16,
            "docLength": null
          },
          {
            "id": "72905d69-9bc3-65b2-0249-cbae9cba8a7a",
            "ancestors": [
              "e65edb9f-5c3e-55be-c942-8aab0b132c85",
              "a659c3de-7ffd-d196-da47-027128779257"
            ],
            "description": "Initializes a perspective matrix with the given field-of-view (fov), aspect ratio (aspect), and near/far clipping planes (zNear, zFar) before returning it as a Matrix4f object. This matrix is used for transformations in computer graphics or other applications.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a perspective projection matrix.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "CameraStruct3D data = new CameraStruct3D(45, 16/9f, 0.1f, 100f);\nMatrix4f projection = data.getAsMatrix4();\n",
              "description": ""
            },
            "name": "getAsMatrix4",
            "location": {
              "start": 45,
              "insert": 45,
              "offset": "\t",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "ed8c773c-ad22-ee98-614a-b70aa8c6be7a",
            "ancestors": [
              "e65edb9f-5c3e-55be-c942-8aab0b132c85"
            ],
            "description": "Updates the object's rotation and movement based on user input from mouse and keyboard. It adjusts the rotation according to mouse movements, and moves the object forward, backward, left, or right based on keyboard key presses, with optional speed boost for shift key.",
            "params": [
              {
                "name": "dt",
                "type_name": "float",
                "description": "3D time delta used to calculate the movement amount based on the speed.",
                "complex_type": false
              },
              {
                "name": "speed",
                "type_name": "float",
                "description": "3D movement speed of an object, which is multiplied by the delta time (`dt`) to calculate the actual movement amount and is adjusted based on the shift key being pressed.",
                "complex_type": false
              },
              {
                "name": "sens",
                "type_name": "float",
                "description": "sensitivity of mouse rotation, affecting the amount of rotation around the Y-axis and X-axis based on the mouse movement.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Camera3D camera = new Camera3D(60, 16/9f, 0.1f, 100f);\ncamera.processInput(0.016f, 5f, 0.5f);",
              "description": ""
            },
            "name": "processInput",
            "location": {
              "start": 51,
              "insert": 51,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 23,
            "docLength": null
          },
          {
            "id": "c4714148-95c6-bfab-1a40-e59f70d79dd6",
            "ancestors": [
              "e65edb9f-5c3e-55be-c942-8aab0b132c85"
            ],
            "description": "Modifies the position of an object by adding a specified vector to its current position, scaled by a given amount. The new position is calculated by multiplying the direction vector with the amplitude and then adding it to the original position.",
            "params": [
              {
                "name": "dir",
                "type_name": "Vector3f",
                "description": "3D direction vector that is scaled by the `amt` value and added to the current position of an object, resulting in its movement.",
                "complex_type": false
              },
              {
                "name": "amt",
                "type_name": "float",
                "description": "scalar amount by which the direction vector `dir` is multiplied to determine the displacement of the position.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Vector3f dir = new Vector3f(1, 0, 0);\nfloat amt = 5;\nmove(dir, amt);",
              "description": ""
            },
            "name": "move",
            "location": {
              "start": 75,
              "insert": 75,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Main.java",
    "path": "src/com/ch/Main.java",
    "content": {
      "structured": {
        "description": "A 3D rendering engine using LWJGL library, which initializes an OpenGL context and renders a 3D world. It creates a camera, shader, texture, and model, and then enters a loop where it continuously updates and renders the scene based on user input and timing information. The engine also includes features such as depth testing, culling, and texture mapping.",
        "diagram": {
          "gviz": "digraph G {\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"]\n    \n    Vector3f []\n    Keyboard [label=\"org.lwjgl.input.Keyboard\", style=\"rounded,filled\"]\n    Mouse [label=\"org.lwjgl.input.Mouse\", style=\"rounded,filled\"]\n    ContextAttribs [label=\"org.lwjgl.opengl.ContextAttribs\", style=\"rounded,filled\"]\n    LWJGLException [label=\"org.lwjgl.LWJGLException\", style=\"rounded,filled\"]\n    DisplayMode [label=\"org.lwjgl.opengl.DisplayMode\", style=\"rounded,filled\"]\n    GL11 [label=\"org.lwjgl.opengl.GL11\", style=\"rounded,filled\"]\n    PixelFormat [label=\"org.lwjgl.opengl.PixelFormat\", style=\"rounded,filled\"]\n    World []\n    subgraph cluster_main {\n        // style=filled\n        color=\"#00000000\"\n        Main [] [fontsize=\"20pt\",style=filled,color=\"#26de81\",shape=square, fontname=\"Courier New\"]\n        label = \"\"\n    }\n    Display [label=\"org.lwjgl.opengl.Display\", style=\"rounded,filled\"]\n    Main -> World [style=\"dashed\"]\n    Main -> ContextAttribs [style=\"dashed\"]\n    Main -> PixelFormat [style=\"dashed\"]\n    Main -> LWJGLException [style=\"dashed\"]\n    Main -> GL11 [style=\"dashed\"]\n    Main -> Keyboard [style=\"dashed\"]\n    Main -> DisplayMode [style=\"dashed\"]\n    Main -> Mouse [style=\"dashed\"]\n    Main -> Display [style=\"dashed\"]\n    Main -> Vector3f [style=\"dashed\"]\n}\n",
          "d2": "<?xml version=\"1.0\" encoding=\"utf-8\"?><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" d2Version=\"v0.6.5\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 1606 1540\"><svg id=\"d2-svg\" class=\"d2-3557019253\" width=\"1606\" height=\"1540\" viewBox=\"11 11 1606 1540\"><rect x=\"11.000000\" y=\"11.000000\" width=\"1606.000000\" height=\"1540.000000\" rx=\"0.000000\" fill=\"#151719\" stroke-width=\"0\" /><style type=\"text/css\"><![CDATA[\n.d2-3557019253 .text {\n\tfont-family: \"d2-3557019253-font-regular\";\n}\n@font-face {\n\tfont-family: d2-3557019253-font-regular;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-3557019253 .text-italic {\n\tfont-family: \"d2-3557019253-font-italic\";\n}\n@font-face {\n\tfont-family: d2-3557019253-font-italic;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-3557019253 .text-mono {\n\tfont-family: \"d2-3557019253-font-mono\";\n}\n@font-face {\n\tfont-family: d2-3557019253-font-mono;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-3557019253 .text-mono-bold {\n\tfont-family: \"d2-3557019253-font-mono-bold\";\n}\n@font-face {\n\tfont-family: d2-3557019253-font-mono-bold;\n\tsrc: url(\"data:application/font-woff;base64,d09GRgABAAAAABJ8AAwAAAAAHtAAAQScAAAAAAAAAAAAAAAAAAAAAAAAAABPUy8yAAABHAAAAGAAAABgmKbWhWNtYXAAAAF8AAAAmwAAAMIDpwQgZ2FzcAAAAhgAAAAIAAAACAAAABBnbHlmAAACIAAACfIAAA2IsDfU0GhlYWQAAAwUAAAANgAAADYbI9ohaGhlYQAADEwAAAAkAAAAJAYzAL5obXR4AAAMcAAAAHwAAACoYnAJ32xvY2EAAAzsAAAAVgAAAFZJrEa8bWF4cAAADUQAAAAgAAAAIABeAmpuYW1lAAANZAAABO8AAA2sAwZtKnBvc3QAABJUAAAAIAAAACD/uAAzcHJlcAAAEnQAAAAHAAAAB2gGjIUABAJYArwABQAAAooCWAAAAEsCigJYAAABXgAyAR4AAAILAwkDBAMCAgQgAAL3AgA4AwAAAAAAAAAAQURCTwCgACD//wPY/u8AAAQkAcZgAAGfAAAAAAHeApQAAAAgAAN4nGzMuU7CAByA8V9trVfVetX7PnbjExgHExOTTjq7GgbCxjMBaxdC4J1g/5MQRr7xG35IpBIUMg0qpVTu1Zt3n77Vfv1r60aw/B++1H78aelExCymMYlxjGIYTQyiH72FuqpnLxJrUpl1uQ2btmzbUdi1Z1/pwKEjx05UTp05d+HSlWs3bt259+DRE3MAAAD//wEAAP//cXoftQAAAQAB//8AD3icfFZbbBvH1T4zXJESuaK0IneX4lK87JJcXkRS3OVFEk3qYlmWLEoWKSmyLFtOHBt/bEuJ/1D+rfyWX5oWcRs6aWMnsXMD0jpAjbppUrRG09QPbVMgdoCiSJMWKFD0kiAB8lAoiPomLYvdZXRp0L7MSsOZOed8833fGWgAAQCn8VUwQBOQ0AY0QIXyUQFZFAWTKSuycjYreDAl4DbltRuhEBFePXbsNSLqueY5t4Cvbi7Ojx8/3vzWz88ey+VuvoUqABiaAPBBXIVmoAAqNtkmGIJBUTAaTQYx7aOb3nvjvZemSRdJkM7mmVbUjauby+hA8mFZfjip3H6xUgEEmdo67sXXwA2wj4/jdCqTkSWGNQWDAm800naGkaVMljUa0Yn80nTX1OXZwglfic364yORyFjS3+sohRbJyMzF8uL1kuydZ9rlhYG9xySvcy6RBAzDADiFq2DWK5YlhqHtRqMgylImk04Fg4Iw/JNjlyfGv3U47EgVo9FiyoGrQ0+fPfvM/vOhIxMTcwEAQHAEADO4ChYNN9pHy7RA++gj6A3l488/R0FcXX38wnOr2tpTANiJqyo+22tPoTeVv6+v4+rq86uboK3rrK1jAV8Dn1p7MPgfak8LaZkyGtHs1KXJyW9ODy54SrQkRoZEfli2CeZjH/mWyLFnH166Pil752mnXr7ZfHZF+cDTpcXJ1dYxgavQpsURs9q5aUpI+yi70YiozLnojKvfK8k19EziFNm1Z14IpPYi8YJS7j/dr+aKYQgAl3EVGoHUcKRkm4xo2ZC1DT1r+OX3lOt/uDb7Ma4q/0QWJfhjlKgoC1rsMwDYi6vQoO/y0WeuIB5XN9dWdQx6AbAbV6FD+51VaShTQjpVwFnBZBJEUXAbaLr3hX6GYPpfWCWMJmyQpBE5YcAmI4Grnx4+/Onm8j2udGjS+frLL7/unDxU4u7pOY8B4CSuAvlvdy/QlApAKigIY5/ur+wbXt43PZbP5XNjuCoeOVg8nvgzKmekVBgQtADgUY3jUDHINoZh5Uwma5MNH/zmpYkW1kq0stbx597BVeV3mZOZzMkM6tpcBgQEAJ7GVQjo++wMQ8sFnM3KrBuz6l822SCIdbmY5mev2zEiCAvZ0LkQNppJgkAIobanJ18JGs3YYGg0BnFVec2VTrvd6Qx3+zaXyrrd2RSH5jeX73n6Ozr6PffUmvO1dcyiDXBDBGBWZ1U2jlVCmcQC1jCgBDWqqHLLilWa/VUaDT3/hsER4x1dsivFj5UiwycyKxYicBj7ep2jJS/lIUNDkalDZtZLWWjr/XY3lXywqHzc7Qo9ytnLBMMzLYwZMIzU1nEY3wEa/DrbBJNAybRJ1rit4S9+qTzeaKIZBpX5/W6CrFxpMHTs9/fNdeWPz3GdTrvodcRYOkby3gy+c2uCcxf+tzjzWN+Ke0CO5dx0+12qFRDsVTWENlT+/BcNqf4xO3FxdPLxYu5+z1BH2hUZ9At9YXGAy3Uukflz5fK5fMA9b7fx/dFoP++yHQ34NQ4lauu4Fd8BO/BahC8DyGJa1nFMqzhuhUOwUMkfT4f3OAjTlRWLgRttj9rsYYaLcxL55GOl5T5X+/jNzb0y51+h2++2tbjzidF9uhay9Vr8u2pRMTP50j5T6islHRi/OHrg/wbHH0o3YOUSolk56c+4/UNdfN6XjD6k1lU6V+g7M2QPND3o2pP3DkrygLeNmuM8am1ljdt3oVXXxy7oaAqlsz76w8QDE9Gix+WQOxJx5bNLqAdt9hzNUObFJnMkpmB0cclYATBAqhbDe9AGSDAIU1v5q8BsfzKyxMq0UFchHxS1amRZ0iYM27TQirTp/wtbCxE9cDInBukOn5ML5h7ojvvvnmhqzh7ptfrbSHM4euT4/4x8o0zzdjtP29XRF9rDd0YLnGC1tQ79nuvudEs2whrytEttRNtgdM9kiFy0CLaeUX9DQ2Nrs62td2+qFEd32wKc02+z+Z1coE252spR7c2EgWStXId+TyMA2KVxXHWVL7lNUwKlXZGJGrnSaHCVuqfHr/hC7pgT37l1rCO2uKD8FnmkONeu/BQAajWYAEBv4y+MQRABwAihmD4fqe2pz4e35wGBXFvHHvwLtduqTNQNfIsMTx69/0UUl9xtAdYb7CPPLqAnKgrEhcbGRbJF26++AQpoQ2Wy6rV62ux28lruW0UIj5gJqxT1xhut6Wi6t8pZaXPFarXazWgt746GQ3zivgPKDVSOse3Km6jMMup3Cx+0AfadcXbCs2IhvFPd0xM6PGht0BvfjY6uuzDagBbwfEUNOx1EowrqHFgeGVke0Ec+xrIxXhvrytbH87q29RE0rxrRYmheNbuV6RY9BZa27faqkRWLwTMeKqgm1e3rcxKmGde2Vf0Mf1/ihMKjxZmVPpez9B3k3+1VywDYjzbUPrwDf11vJmp5hTQETuV8YcbNBlzxOS9aW8znzOYLJlNmr6IAgnRtXcM1squPp+JY1ODZ7XusG6t1oNDg1xJ9sZOZcNDCJQInD/3/6b1L4mBgOsy6W1N9xft82SUy5jnS4W6nLC3NZCNT7BmeibYfYh1NNovdZqU6e8Kxkah6r1JtHQfxJWiv30haSGezsva62WFKXz94NLL6uO2x999n4v6OLsbpO0hmjw/8aMl47Vrl9UCcNjeeNlPqeYXaOm5GaypPZlU+y3U2U3Vn/ctM8Yon7Opsv7JiIXyT5OICkpS/SXGHDw0rrfsDcUAqO3APWqv3Z7ben7Oy4U9vX50gGQthocmJy7fR2meBYihUDHymtGpa0PozWlPfXrv27Thhuz3PlJ7yNJgIQ4PF5DnjNTU3EA0NhOtS8Ycc0dRAGBqNTrT2iX80GDwg3Lihfkf9nyitr/pGIp59iVe1eAEALKE1FbuKTdwRxsRuxwncevUVWX0wN7FNnS9899YrPdYOK2FxWJII/2OSjtJ0p32y9nmZ7qTpKFNWz/XUCjiH1oDTMKxzIpvdBYUVP80EW51me1M0SZr/+MyU1UESZodl9Ml32PzMr4zEWYMh4HKijz4UxsRA0f+hYilMR3XPOQiAO/AFDV+146ULOCtTMn3wB5ejfZJj8dvn0SPzpha6ZXPjvLo+UlvHNvwExHWO1BPSNZSuOzpvNInbrY2uE5XNzA07hryTUT7j4afG+g7wUmdgwHcgsZjfdzrX3xMaCAw/SrIh7qjLT/EOV5h5iAm28/4O7nAwGh7vTg4zhCVcCOemooA0b72J1tR35wOaUSLmXTSPLlbq938PF9BT+Av1PT/A19VD242oM9LdHYlms7iQDIVlORxK6jionnxzi6tbZekebMW/jo95o+4k4w+1vovmmdTcO7aWU80WNu5HJytKPF7qU58T/wIAAP//AQAA//96VrCrAAAAAQAAAAEEnMOKYthfDzz1AAMD6AAAAADcHHOkAAAAAN2XHqD/TP46AwwEJAABAAYAAgAAAAAAAAABAAAD2P7vAAACWP9M/0wDDAABAAAAAAAAAAAAAAAAAAAAKnicLI09akJhFAWHIU2qLCFFSBMCgfxCRBtFHggKVlO4AbF1la5KHnzVHS7nzDFejEfj19gaJ+NsvBsLY2NcjH9jZzwZD8bSmIy18WH8GUfje/z3xpvxNTamkZvv1fgxPo2V8Tycr4MPozs7bjPfAQAA//8BAAD//wRfGKQAAAAqAEwAfACgALYAygD+ASABPAFMAXoBnAG4AfQCNAJsApwC0gMKAzADpgPKA9YD4gQCBDYEWASKBMIE4gUiBUoFbAWIBcAF7AYcBjQGeAaIBqAGxAAAAAEAAAAqAfgAKgBuAAYAAQAAAAAAAAAAAAAAAAADAAN4nJyWTW8b1RfGf2OntsdN+88/lNIUKJcSSholEztKoypFArdpVUNISpxSoVIJx3acUfwme9w2rFmwZMVnAMSqqy4QYpUFC5aIFSvEig+AWCA0Z449Y9ckbVWpee7c8/o8595r4J3Y38SxxmzgABRbnONAcYwUvyuOs8KfiseYsS4oPkbZWlecYNp6pDjJj9YvilMsxb5SbLMU+0nxcRZj/yg+ETfxjOKTLCVuKZ5iOvF5gC1IJ75WbDGe0FxWjInED4rjTCR+VjzG2cRvio8xnvhLcYLJ5JjiJJPJ04pTTCZnFNtMJlcUp5lOrik+jkm2FI8zl/xS8Qkyye8Vn8RJKlfW/1hMnVU8weVUL87/uZDq9TXJ26lvFb8QqfkU51N/KH4x0vvpSO8vRXKdieSa4qSdUnyWcbvX48sR31c4ZZ9X/Cppe1nxuYjva4zb7yo2TNi9+l8PZ8M6z6T9ieI3SNsNxdOROG9GaniLJfuh4ovM2t8pnsWxdWasOebSPY3mI3kdMmmdE2shUkOGmfSniheZTX+h+Fqk31Xh8BsMi2TIksEwr6tFWeUo02SbCoYC+3TwqFCngyFPgxJN2rTk/6LslTHMsIuHR4sVFljggfxzKPajOeJZZ4GLzGF4gIvHLoZNKnSo0Oa+RrtBkwYehnWK1P1azBkKNOnSpkTFTOFE1xiu0aQs6BZtmlylSY0yWRzp9DJXyLHKVTa4MuDb8wz85vueh8c3fbuPpPYOrlRtBjLu0sSTzhvc7+85ZMmyzBXqFNmjIlY7VHgoGRZxuITDMpdYlljPXq8rihUxeKJUWVQs0mYPQ5Od59balS597Xy/2zREyWCvgKeWQfYGZRbE30iPu8KVkchd0biNK9bOc1VziyJdahhWcTDc1Kj+hG0Jr/7frkyeX3eFxjNMqsc+LSpssat8hpNZEA49HginIeM1XFGgITPtc9IVFoK+e6wVyLOGYUPiNwYirw1E8DsZNWFZ6TesbDBvqP99irjUKLJNTXbCk1eUvDk+FOyxghlip0NJFGrhiUYdieWIBlUW2OAGa0OVHM1RWf4G2m/T7U9P0J0/Nf55z1EQ5QtmSk5bTlgrCCN3yLPFTTa4zZasc2yySY51tshzXXw32JSTu8E6q+KRFxzs3ZATsM7HGN4nLzZ+7IryEyjmn8mWVN+R2oNZdqnTEs79yh3ptSIdPrvChh2N2vPtiE8Jlx2xNKJfgypdilR1KlpSYV247M1GeOqCiahLL7624X6Vpty0bTm5flTDvt4d/rQGNQU3hPcUqjrPNTP/faNtyunzuwhRXroIZrzTZ78i3Q6uq/qWuHKfBveV4YLwUZDXxMVY71GS7L6vz4WJP3riy+MnvhyIym22cYMpjR9wjX3JVtPqDNvCinhwN/Yr9+iIfh1R16/oM4ni3013yXBP75kmVbnZWsJ5Sc7ivqyC+bnL/CG2Rb0v26LXntjPjshdlteiJtoZ6a2q0ae5Jxx7OhvBHWto0JU3uC27wSmV3sgeWs9wpI72MKd1Dao4J6/CsCbD2o6yeixfh5QZyw6oPcrvQH55VOX98Nm4Iye/KtN8nYf6bq71v4XoA+HSFV4K8kb591jwCoeevXf5qsQvsTdy5sMZnx+Z9Sifp7cc7PYo68EeD7cd5uAo+1G/WEbbKXP/AgAA//8BAAD///u8HqIAAAMAAAAAAAD/tQAyAAAAAQAAAAAAAAAAAAAAAAAAAAC4Af+FsASNAA==\");\n}]]></style><style type=\"text/css\"><![CDATA[.shape {\n  shape-rendering: geometricPrecision;\n  stroke-linejoin: round;\n}\n.connection {\n  stroke-linecap: round;\n  stroke-linejoin: round;\n}\n.blend {\n  mix-blend-mode: multiply;\n  opacity: 0.5;\n}\n\n\t\t.d2-3557019253 .fill-N1{fill:#ECEDED;}\n\t\t.d2-3557019253 .fill-N2{fill:#676C7E;}\n\t\t.d2-3557019253 .fill-N3{fill:#9499AB;}\n\t\t.d2-3557019253 .fill-N4{fill:#CFD2DD;}\n\t\t.d2-3557019253 .fill-N5{fill:#DEE1EB;}\n\t\t.d2-3557019253 .fill-N6{fill:#EEF1F8;}\n\t\t.d2-3557019253 .fill-N7{fill:#151719;}\n\t\t.d2-3557019253 .fill-B1{fill:#717D86;}\n\t\t.d2-3557019253 .fill-B2{fill:#717D86;}\n\t\t.d2-3557019253 .fill-B3{fill:#ffff00;}\n\t\t.d2-3557019253 .fill-B4{fill:#151719;}\n\t\t.d2-3557019253 .fill-B5{fill:#151719;}\n\t\t.d2-3557019253 .fill-B6{fill:#151719;}\n\t\t.d2-3557019253 .fill-AA2{fill:#ECEDED;}\n\t\t.d2-3557019253 .fill-AA4{fill:#CFD2DD;}\n\t\t.d2-3557019253 .fill-AA5{fill:#DEE1EB;}\n\t\t.d2-3557019253 .fill-AB4{fill:#CFD2DD;}\n\t\t.d2-3557019253 .fill-AB5{fill:#DEE1EB;}\n\t\t.d2-3557019253 .stroke-N1{stroke:#ECEDED;}\n\t\t.d2-3557019253 .stroke-N2{stroke:#676C7E;}\n\t\t.d2-3557019253 .stroke-N3{stroke:#9499AB;}\n\t\t.d2-3557019253 .stroke-N4{stroke:#CFD2DD;}\n\t\t.d2-3557019253 .stroke-N5{stroke:#DEE1EB;}\n\t\t.d2-3557019253 .stroke-N6{stroke:#EEF1F8;}\n\t\t.d2-3557019253 .stroke-N7{stroke:#151719;}\n\t\t.d2-3557019253 .stroke-B1{stroke:#717D86;}\n\t\t.d2-3557019253 .stroke-B2{stroke:#717D86;}\n\t\t.d2-3557019253 .stroke-B3{stroke:#ffff00;}\n\t\t.d2-3557019253 .stroke-B4{stroke:#151719;}\n\t\t.d2-3557019253 .stroke-B5{stroke:#151719;}\n\t\t.d2-3557019253 .stroke-B6{stroke:#151719;}\n\t\t.d2-3557019253 .stroke-AA2{stroke:#ECEDED;}\n\t\t.d2-3557019253 .stroke-AA4{stroke:#CFD2DD;}\n\t\t.d2-3557019253 .stroke-AA5{stroke:#DEE1EB;}\n\t\t.d2-3557019253 .stroke-AB4{stroke:#CFD2DD;}\n\t\t.d2-3557019253 .stroke-AB5{stroke:#DEE1EB;}\n\t\t.d2-3557019253 .background-color-N1{background-color:#ECEDED;}\n\t\t.d2-3557019253 .background-color-N2{background-color:#676C7E;}\n\t\t.d2-3557019253 .background-color-N3{background-color:#9499AB;}\n\t\t.d2-3557019253 .background-color-N4{background-color:#CFD2DD;}\n\t\t.d2-3557019253 .background-color-N5{background-color:#DEE1EB;}\n\t\t.d2-3557019253 .background-color-N6{background-color:#EEF1F8;}\n\t\t.d2-3557019253 .background-color-N7{background-color:#151719;}\n\t\t.d2-3557019253 .background-color-B1{background-color:#717D86;}\n\t\t.d2-3557019253 .background-color-B2{background-color:#717D86;}\n\t\t.d2-3557019253 .background-color-B3{background-color:#ffff00;}\n\t\t.d2-3557019253 .background-color-B4{background-color:#151719;}\n\t\t.d2-3557019253 .background-color-B5{background-color:#151719;}\n\t\t.d2-3557019253 .background-color-B6{background-color:#151719;}\n\t\t.d2-3557019253 .background-color-AA2{background-color:#ECEDED;}\n\t\t.d2-3557019253 .background-color-AA4{background-color:#CFD2DD;}\n\t\t.d2-3557019253 .background-color-AA5{background-color:#DEE1EB;}\n\t\t.d2-3557019253 .background-color-AB4{background-color:#CFD2DD;}\n\t\t.d2-3557019253 .background-color-AB5{background-color:#DEE1EB;}\n\t\t.d2-3557019253 .color-N1{color:#ECEDED;}\n\t\t.d2-3557019253 .color-N2{color:#676C7E;}\n\t\t.d2-3557019253 .color-N3{color:#9499AB;}\n\t\t.d2-3557019253 .color-N4{color:#CFD2DD;}\n\t\t.d2-3557019253 .color-N5{color:#DEE1EB;}\n\t\t.d2-3557019253 .color-N6{color:#EEF1F8;}\n\t\t.d2-3557019253 .color-N7{color:#151719;}\n\t\t.d2-3557019253 .color-B1{color:#717D86;}\n\t\t.d2-3557019253 .color-B2{color:#717D86;}\n\t\t.d2-3557019253 .color-B3{color:#ffff00;}\n\t\t.d2-3557019253 .color-B4{color:#151719;}\n\t\t.d2-3557019253 .color-B5{color:#151719;}\n\t\t.d2-3557019253 .color-B6{color:#151719;}\n\t\t.d2-3557019253 .color-AA2{color:#ECEDED;}\n\t\t.d2-3557019253 .color-AA4{color:#CFD2DD;}\n\t\t.d2-3557019253 .color-AA5{color:#DEE1EB;}\n\t\t.d2-3557019253 .color-AB4{color:#CFD2DD;}\n\t\t.d2-3557019253 .color-AB5{color:#DEE1EB;}.appendix text.text{fill:#ECEDED}.md{--color-fg-default:#ECEDED;--color-fg-muted:#676C7E;--color-fg-subtle:#9499AB;--color-canvas-default:#151719;--color-canvas-subtle:#EEF1F8;--color-border-default:#717D86;--color-border-muted:#717D86;--color-neutral-muted:#EEF1F8;--color-accent-fg:#717D86;--color-accent-emphasis:#717D86;--color-attention-subtle:#676C7E;--color-danger-fg:red;}.sketch-overlay-B1{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B3{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-B4{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B5{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B6{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-AA2{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AA4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AA5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AB4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AB5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N1{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-N3{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N6{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N7{fill:url(#streaks-darker);mix-blend-mode:lighten}.light-code{display: block}.dark-code{display: none}]]></style><g id=\"com\"><g class=\"shape\" ><rect x=\"418.000000\" y=\"12.000000\" width=\"861.000000\" height=\"872.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"848.500000\" y=\"45.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">com</text></g><g id=\"org\"><g class=\"shape\" ><rect x=\"12.000000\" y=\"1174.000000\" width=\"1604.000000\" height=\"376.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"814.000000\" y=\"1207.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">org</text></g><g id=\"com.ch\"><g class=\"shape\" ><rect x=\"468.000000\" y=\"62.000000\" width=\"761.000000\" height=\"767.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"848.500000\" y=\"91.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">ch</text></g><g id=\"org.lwjgl\"><g class=\"shape\" ><rect x=\"62.000000\" y=\"1229.000000\" width=\"1504.000000\" height=\"271.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"814.000000\" y=\"1258.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">lwjgl</text></g><g id=\"com.ch.Main\"><g class=\"shape\" ><rect x=\"518.000000\" y=\"112.000000\" width=\"400.000000\" height=\"66.000000\" fill=\"#26de81\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"718.000000\" y=\"150.500000\" fill=\"#151719\" class=\"text-mono-bold\" style=\"text-anchor:middle;font-size:16px\">Main</text></g><g id=\"org.lwjgl.LWJGLException\"><g class=\"shape\" ><rect x=\"112.000000\" y=\"1284.000000\" width=\"178.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"201.000000\" y=\"1322.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">LWJGLException</text></g><g id=\"org.lwjgl.input\"><g class=\"shape\" ><rect x=\"310.000000\" y=\"1284.000000\" width=\"334.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"477.000000\" y=\"1309.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">input</text></g><g id=\"org.lwjgl.opengl\"><g class=\"shape\" ><rect x=\"664.000000\" y=\"1284.000000\" width=\"852.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"1090.000000\" y=\"1309.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">opengl</text></g><g id=\"com.ch.math\"><g class=\"shape\" ><rect x=\"743.000000\" y=\"613.000000\" width=\"223.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"854.500000\" y=\"638.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">math</text></g><g id=\"com.ch.voxel\"><g class=\"shape\" ><rect x=\"986.000000\" y=\"613.000000\" width=\"193.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"1082.500000\" y=\"638.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">voxel</text></g><g id=\"org.lwjgl.input.Keyboard\"><g class=\"shape\" ><rect x=\"360.000000\" y=\"1334.000000\" width=\"121.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"420.500000\" y=\"1372.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Keyboard</text></g><g id=\"org.lwjgl.input.Mouse\"><g class=\"shape\" ><rect x=\"501.000000\" y=\"1334.000000\" width=\"93.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"547.500000\" y=\"1372.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Mouse</text></g><g id=\"org.lwjgl.opengl.ContextAttribs\"><g class=\"shape\" ><rect x=\"714.000000\" y=\"1334.000000\" width=\"179.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"803.500000\" y=\"1372.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">ContextAttribs</text></g><g id=\"org.lwjgl.opengl.Display\"><g class=\"shape\" ><rect x=\"913.000000\" y=\"1334.000000\" width=\"112.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"969.000000\" y=\"1372.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Display</text></g><g id=\"org.lwjgl.opengl.DisplayMode\"><g class=\"shape\" ><rect x=\"1045.000000\" y=\"1334.000000\" width=\"149.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"1119.500000\" y=\"1372.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">DisplayMode</text></g><g id=\"org.lwjgl.opengl.GL11\"><g class=\"shape\" ><rect x=\"1214.000000\" y=\"1334.000000\" width=\"83.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"1255.500000\" y=\"1372.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">GL11</text></g><g id=\"org.lwjgl.opengl.PixelFormat\"><g class=\"shape\" ><rect x=\"1317.000000\" y=\"1334.000000\" width=\"149.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"1391.500000\" y=\"1372.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">PixelFormat</text></g><g id=\"com.ch.math.Vector3f\"><g class=\"shape\" ><rect x=\"793.000000\" y=\"663.000000\" width=\"123.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"854.500000\" y=\"701.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Vector3f</text></g><g id=\"com.ch.voxel.World\"><g class=\"shape\" ><rect x=\"1036.000000\" y=\"663.000000\" width=\"93.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"1082.500000\" y=\"701.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">World</text></g><g id=\"(com.ch.Main -&gt; org.lwjgl.LWJGLException)[0]\"><marker id=\"mk-558834944\" markerWidth=\"10.000000\" markerHeight=\"12.000000\" refX=\"7.000000\" refY=\"6.000000\" viewBox=\"0.000000 0.000000 10.000000 12.000000\" orient=\"auto\" markerUnits=\"userSpaceOnUse\"> <polygon points=\"0.000000,0.000000 10.000000,6.000000 0.000000,12.000000\" fill=\"#26de81\" class=\"connection\" stroke-width=\"2\" /> </marker><path d=\"M 537.112976 179.000000 L 537.112976 919.000000 S 537.112976 929.000000 527.112976 929.000000 L 211.000000 929.000000 S 201.000000 929.000000 201.000000 939.000000 L 201.000000 1280.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3557019253)\" /><text x=\"235.000000\" y=\"1274.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Main -&gt; org.lwjgl.input.Keyboard)[0]\"><path d=\"M 560.794983 179.000000 L 560.794983 969.000000 S 560.794983 979.000000 550.794983 979.000000 L 430.500000 979.000000 S 420.500000 979.000000 420.500000 989.000000 L 420.500000 1330.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3557019253)\" /><text x=\"455.000000\" y=\"1324.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Main -&gt; org.lwjgl.input.Mouse)[0]\"><path d=\"M 584.476990 179.000000 L 584.476990 1019.000000 S 584.476990 1029.000000 574.476990 1029.000000 L 557.500000 1029.000000 S 547.500000 1029.000000 547.500000 1039.000000 L 547.500000 1330.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3557019253)\" /><text x=\"582.000000\" y=\"1324.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Main -&gt; org.lwjgl.opengl.ContextAttribs)[0]\"><path d=\"M 608.158997 179.000000 L 608.158997 1119.000000 S 608.158997 1129.000000 618.158997 1129.000000 L 793.500000 1129.000000 S 803.500000 1129.000000 803.500000 1139.000000 L 803.500000 1330.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3557019253)\" /><text x=\"838.000000\" y=\"1324.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Main -&gt; org.lwjgl.opengl.Display)[0]\"><path d=\"M 631.840027 179.000000 L 631.840027 1069.000000 S 631.840027 1079.000000 641.840027 1079.000000 L 959.000000 1079.000000 S 969.000000 1079.000000 969.000000 1089.000000 L 969.000000 1330.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3557019253)\" /><text x=\"1003.000000\" y=\"1324.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Main -&gt; org.lwjgl.opengl.DisplayMode)[0]\"><path d=\"M 655.521973 179.000000 L 655.521973 1019.000000 S 655.521973 1029.000000 665.521973 1029.000000 L 1109.500000 1029.000000 S 1119.500000 1029.000000 1119.500000 1039.000000 L 1119.500000 1330.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3557019253)\" /><text x=\"1154.000000\" y=\"1324.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Main -&gt; org.lwjgl.opengl.GL11)[0]\"><path d=\"M 679.203979 179.000000 L 679.203979 969.000000 S 679.203979 979.000000 689.203979 979.000000 L 1245.500000 979.000000 S 1255.500000 979.000000 1255.500000 989.000000 L 1255.500000 1330.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3557019253)\" /><text x=\"1290.000000\" y=\"1324.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Main -&gt; org.lwjgl.opengl.PixelFormat)[0]\"><path d=\"M 702.885986 179.000000 L 702.885986 919.000000 S 702.885986 929.000000 712.885986 929.000000 L 1381.500000 929.000000 S 1391.500000 929.000000 1391.500000 939.000000 L 1391.500000 1330.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3557019253)\" /><text x=\"1426.000000\" y=\"1324.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(Main -&gt; math.Vector3f)[0]\"><path d=\"M 855.385986 179.000000 L 855.385986 660.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3557019253)\" /><text x=\"889.000000\" y=\"653.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(Main -&gt; voxel.World)[0]\"><path d=\"M 882.567993 179.000000 L 882.567993 208.000000 S 882.567993 218.000000 892.567993 218.000000 L 1073.385986 218.000000 S 1083.385986 218.000000 1083.385986 228.000000 L 1083.385986 660.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3557019253)\" /><text x=\"1117.000000\" y=\"653.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><mask id=\"d2-3557019253\" maskUnits=\"userSpaceOnUse\" x=\"11\" y=\"11\" width=\"1606\" height=\"1540\">\n<rect x=\"11\" y=\"11\" width=\"1606\" height=\"1540\" fill=\"white\"></rect>\n<rect x=\"824.000000\" y=\"17.000000\" width=\"49\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"795.000000\" y=\"1179.000000\" width=\"38\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"837.500000\" y=\"67.000000\" width=\"22\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"790.500000\" y=\"1234.000000\" width=\"47\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"699.000000\" y=\"134.500000\" width=\"38\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"134.500000\" y=\"1306.500000\" width=\"133\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"454.500000\" y=\"1289.000000\" width=\"45\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1061.000000\" y=\"1289.000000\" width=\"58\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"833.000000\" y=\"618.000000\" width=\"43\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1060.000000\" y=\"618.000000\" width=\"45\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"382.500000\" y=\"1356.500000\" width=\"76\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"523.500000\" y=\"1356.500000\" width=\"48\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"736.500000\" y=\"1356.500000\" width=\"134\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"935.500000\" y=\"1356.500000\" width=\"67\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1067.500000\" y=\"1356.500000\" width=\"104\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1236.500000\" y=\"1356.500000\" width=\"38\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1339.500000\" y=\"1356.500000\" width=\"104\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"815.500000\" y=\"685.500000\" width=\"78\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1058.500000\" y=\"685.500000\" width=\"48\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n</mask></svg></svg>\n",
          "d2_src": "direction: down\n\nvars: {\n  d2-config: {\n    pad: 0\n    theme-overrides: {\n      B1: \"#717D86\"\n      B2: \"#717D86\"\n      B3: \"#ffff00\"\n      B4: \"#151719\"\n      B5: \"#151719\"\n      B6: \"#151719\"\n      N1: \"#ECEDED\"\n      N7: \"#151719\"\n      AA2: \"#ECEDED\"\n    }\n  }\n}\n\nstyle: {\n  fill: \"#151719\"\n}\ncom.ch.Main -> org.lwjgl.LWJGLException: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Main -> org.lwjgl.input.Keyboard: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Main -> org.lwjgl.input.Mouse: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Main -> org.lwjgl.opengl.ContextAttribs: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Main -> org.lwjgl.opengl.Display: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Main -> org.lwjgl.opengl.DisplayMode: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Main -> org.lwjgl.opengl.GL11: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Main -> org.lwjgl.opengl.PixelFormat: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Main -> com.ch.math.Vector3f: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Main -> com.ch.voxel.World: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\norg.lwjgl.opengl.ContextAttribs: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.opengl.GL11: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.input.Mouse: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.opengl.Display: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.opengl.PixelFormat: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.opengl.DisplayMode: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.LWJGLException: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.lwjgl.input.Keyboard: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\ncom.ch.voxel.World: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.Main: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.math.Vector3f: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.Main: {\n  style: {\n    fill: \"#26de81\"\n    font-color: \"#151719\"\n    stroke-width: 0\n  }\n}\n"
        },
        "items": [
          {
            "id": "239ea0da-2de1-dbab-2a45-98719787380a",
            "ancestors": [],
            "description": "Initializes and sets up display and graphics settings using LWJGL library. It then enters a loop that updates and renders the game world, handling user input and updating game logic accordingly. The class also includes code for rendering 3D graphics and managing memory usage.",
            "name": "Main",
            "location": {
              "start": 15,
              "insert": 15,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 123,
            "docLength": null
          },
          {
            "id": "e96e3e88-0198-a3a5-6d47-5a8cc127c94d",
            "ancestors": [
              "239ea0da-2de1-dbab-2a45-98719787380a"
            ],
            "description": "Initializes display and OpenGL, then enters a loop until exit.",
            "params": [
              {
                "name": "args",
                "type_name": "String[]",
                "description": "command-line arguments passed to the program when it is executed, which can be used by the program for its own purposes.",
                "complex_type": false
              }
            ],
            "name": "main",
            "location": {
              "start": 17,
              "insert": 17,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "c0afb9d4-2b6d-b3b5-e143-fc2c983b81e2",
            "ancestors": [
              "239ea0da-2de1-dbab-2a45-98719787380a"
            ],
            "description": "Initializes a display mode with a resolution of 1920x1080, creates a pixel format, and enables vertical synchronization. It also prints the OpenGL version string to the console. The function catches any LWJGLExceptions that may occur during initialization and logs them to the console.",
            "params": [],
            "name": "initDisplay",
            "location": {
              "start": 33,
              "insert": 33,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "934ca872-f99a-4895-594c-eac9e7fc1fbc",
            "ancestors": [
              "239ea0da-2de1-dbab-2a45-98719787380a"
            ],
            "description": "Initializes graphics settings by setting clear color, enabling culling and depth testing, creating a camera, loading shaders and textures, defining vertices and indices for rendering, and initializing a world object.",
            "params": [],
            "name": "initGL",
            "location": {
              "start": 44,
              "insert": 44,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 41,
            "docLength": null
          },
          {
            "id": "313b9b07-4fcf-7892-5b4e-d69845d59773",
            "ancestors": [
              "239ea0da-2de1-dbab-2a45-98719787380a"
            ],
            "description": "Initializes a timer and enters an infinite loop that continuously updates the game state, renders graphics, and updates the display until the user requests closure or presses the escape key. It displays FPS, memory usage, and other information on the title bar.",
            "params": [],
            "name": "loop",
            "location": {
              "start": 86,
              "insert": 86,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "0a719ff5-46fd-bb99-7d46-2cff262e1281",
            "ancestors": [
              "239ea0da-2de1-dbab-2a45-98719787380a"
            ],
            "description": "Processes input data using a specified constant, then updates the position of an object (`w`) based on the current position and transformation of another object (`c`). The update is performed for each frame, with time delta (`dt`) considered.",
            "params": [
              {
                "name": "dt",
                "type_name": "float",
                "description": "delta time, which is used as an input to the `processInput` method of the `c` object to update its internal state over time.",
                "complex_type": false
              }
            ],
            "name": "update",
            "location": {
              "start": 108,
              "insert": 108,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "55ffd462-199b-06a7-6a49-1c2bcc34b759",
            "ancestors": [
              "239ea0da-2de1-dbab-2a45-98719787380a"
            ],
            "description": "Initializes a shader and binds it. It then renders a series of objects with different colors using their model matrices and view projection matrix. Finally, it calls another rendering method on an object named `w`.",
            "params": [],
            "name": "render",
            "location": {
              "start": 113,
              "insert": 113,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 20,
            "docLength": null
          },
          {
            "id": "005fc0d2-fd98-7eab-154d-ca192b95e31e",
            "ancestors": [
              "239ea0da-2de1-dbab-2a45-98719787380a"
            ],
            "description": "Terminates the Java program with a specified exit status. It calls the system's built-in `System.exit` method, which transfers control to the virtual machine and exits the application, passing the given status code as an argument to the underlying operating system.",
            "params": [
              {
                "name": "status",
                "type_name": "int",
                "description": "16-bit integer exit status to be passed to the parent process or shell when the program terminates.",
                "complex_type": false
              }
            ],
            "name": "exit",
            "location": {
              "start": 134,
              "insert": 134,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "SimplexNoise.java",
    "path": "src/com/ch/SimplexNoise.java",
    "content": {
      "structured": {
        "description": "A simplex algorithm for computing the gradient of a function at a given point. The algorithm uses a 5-point simplex to approximate the gradient, which is computed using the dot product of the gradients of the function at the corners of the simplex with the coordinates of the point. The gradients are calculated using the `grad4` array, which contains the gradients of the function at various points in 4D space. The algorithm returns a value between -1 and 1 that represents the gradient of the function at the given point.",
        "items": [
          {
            "id": "089982ae-90dc-64a1-5645-b921f45faf9b",
            "ancestors": [],
            "type": "function",
            "description": "Is an implementation of the Simplex Noise algorithm, which is a mathematical formula used to generate random numbers that have a repeating pattern. The class provides a simple way to calculate the noise value at a given position in a 3D space using the coordinates of the position and a set of integers (perm). The noise values are calculated using the dot product of the gradient vector at each corner of the simplex with the gradient vector at the current position, scaled by the distance between the current position and each corner. The result is a value between -1 and 1 that can be used to add randomness to a 3D model or other application.",
            "name": "SimplexNoise",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 307,
            "docLength": null
          },
          {
            "id": "21d5ba45-4414-42bc-6b48-2f44d03fbf67",
            "ancestors": [
              "089982ae-90dc-64a1-5645-b921f45faf9b"
            ],
            "type": "function",
            "description": "Calculates the nearest integer to a given double value, returning it as an int. If the input is positive, it returns the exact integer value. Otherwise, it returns the integer value one less than the exact value.",
            "params": [
              {
                "name": "x",
                "type_name": "double",
                "description": "double value that is to be rounded to the nearest integer using the provided rounding logic.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "integer",
              "description": "an integer that represents the nearest integer to the given double value.",
              "complex_type": false
            },
            "name": "fastfloor",
            "location": {
              "start": 43,
              "insert": 43,
              "offset": "\t",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "4d7d7a9d-78f1-6a97-4d4e-e9f987b5cdcb",
            "ancestors": [
              "089982ae-90dc-64a1-5645-b921f45faf9b"
            ],
            "type": "function",
            "description": "Generates a noise value based on a 3D simplex noise algorithm, taking inputs `xin` and `yin` and returning a value within [-1,1]. The function calculates the contributions from three corners of a simplex and scales them to produce the final noise value.",
            "params": [
              {
                "name": "xin",
                "type_name": "double",
                "description": "2D distance from the origin of the simplex cell in the x-direction.",
                "complex_type": false
              },
              {
                "name": "yin",
                "type_name": "double",
                "description": "2D gradient value at the current position.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "double",
              "description": "a scaled noise value between -1 and 1.",
              "complex_type": false
            },
            "name": "noise",
            "location": {
              "start": 53,
              "insert": 53,
              "offset": "\t",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 54,
            "docLength": null
          },
          {
            "id": "6c199bb5-8ca2-2ab7-c840-cdb60b5a0436",
            "ancestors": [
              "089982ae-90dc-64a1-5645-b921f45faf9b"
            ],
            "type": "function",
            "description": "Generates a noise value for a given point in a 3D space based on the coordinates of four simplex corners and their hashed gradient indices. The output is a scaled value within [-1,1].",
            "params": [
              {
                "name": "xin",
                "type_name": "double",
                "description": "3D coordinates of the point in space where the noise is being calculated.",
                "complex_type": false
              },
              {
                "name": "yin",
                "type_name": "double",
                "description": "2D Y coordinate of the point where noise is being generated.",
                "complex_type": false
              },
              {
                "name": "zin",
                "type_name": "double",
                "description": "3D noise simulation's third dimension, specifically the z-coordinate of the point being simulated.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "double",
              "description": "a scaled noise value between [-1, 1], calculated based on the distances from a point to four simplex corners.",
              "complex_type": false
            },
            "name": "noise",
            "location": {
              "start": 108,
              "insert": 108,
              "offset": "\t",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 81,
            "docLength": null
          },
          {
            "id": "25984e2a-472b-83ad-8d45-9b09304bb7da",
            "ancestors": [
              "089982ae-90dc-64a1-5645-b921f45faf9b"
            ],
            "type": "function",
            "description": "Computes a noise signal based on the Gradient Descent algorithm, which creates a random-like signal by iteratively adjusting the positions of five simplex corners and calculating their contributions to the overall noise signal.",
            "params": [
              {
                "name": "x",
                "type_name": "double",
                "description": "0-based indexing of the simplex corner being evaluated, and is used to compute the appropriate offset for each coordinate of the simplex corners.",
                "complex_type": false
              },
              {
                "name": "y",
                "type_name": "double",
                "description": "2nd coordinate of the point being computed, which is used in the calculation of the contribution from each simplex corner and the final result.",
                "complex_type": false
              },
              {
                "name": "z",
                "type_name": "double",
                "description": "3D gradient vector at the current position, which is used to compute the contribution from each of the five simplex corners in the hashed gradient calculation.",
                "complex_type": false
              },
              {
                "name": "w",
                "type_name": "double",
                "description": "4th coordinate of the point being evaluated, which is used to calculate the gradient of the function at that point.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "double",
              "description": "a scalar value between -1 and 1, representing the gradient noise at a given position.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Noise {\n    public static double noise(double x, double y) {\n        int i = (int) Math.floor(x);\n        int j = (int) Math.floor(y);\n        int gi00 = perm[i & 255] + (j & 255) * 512;\n        int gi01 = perm[(i + 1) & 255] + (j & 255) * 512;\n        int gi10 = perm[i & 255] + ((j + 1) & 255) * 512;\n        int gi11 = perm[(i + 1) & 255] + ((j + 1) & 255) * 512;\n        double t00 = 0.6 - x * x - y * y;\n        if (t00 < 0) return 0.0;\n        double t10 = 0.6 - (x + 1) * (x + 1) - y * *;\n        if (t10 < 0) return 0.0;\n        double t01 = 0.6 - x * x - (y + 1) * (y + 1);\n        if (t01 < 0) return 0.0;\n        double t11 = 0.6 - (x + 1) * (x + 1) - (y + 1) * (y + 1);\n        if (t11 < 0) return 0.0;\n        double t00 = t00 * t00;\n        double n00 = dot(grad4[gi00], x, y);\n        double t01 = t00 * t01;\n        double n01 = dot(grad4[gi01], x, y + 1);\n        double t10 = t00 * t10;\n        double n10 = dot(grad4[gi10], x + 1, y);\n        double t11 = t00 * t11;\n        double n11 = dot(grad4[gi11], x + 1, y + 1);\n        return 27.0 * (n00 + n01 + n10 + n11);\n    }\n}\n",
              "description": "\nThe following is the example output:  \n"
            },
            "name": "noise",
            "location": {
              "start": 190,
              "insert": 190,
              "offset": "\t",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 119,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Texture.java",
    "path": "src/com/ch/Texture.java",
    "content": {
      "structured": {
        "description": "A `Texture` class that loads and manages textures for use in an OpenGL context. It provides a constructor to load a texture from a file, and methods to bind and unbind the texture from the GPU. Additionally, it provides a method to get the ID of the loaded texture. The code uses the `GL` package for OpenGL functionality and the `Util` class for utility functions.",
        "items": [
          {
            "id": "6ff6a497-1fd4-d284-d441-fda279eb9d49",
            "ancestors": [],
            "type": "function",
            "description": "Is used to handle textures in a 3D graphics application. It allows for loading and binding textures, as well as getting the ID of the loaded texture. The loadTexture method takes a file path as an argument and returns the ID of the loaded texture.",
            "name": "Texture",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 75,
            "docLength": null
          },
          {
            "id": "e65c2536-ca2e-0780-2c4c-5ff2a0843b32",
            "ancestors": [
              "6ff6a497-1fd4-d284-d441-fda279eb9d49"
            ],
            "type": "function",
            "description": "0 is called and performs an action related to binding.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public void bind() {\n\t\tbind(0);\n\t}\n",
              "description": "\nThis example shows that the user can call the method bind with no arguments, in which case it will bind the texture to slot 0. The user could also pass an argument to bind a different slot number, for instance:\n"
            },
            "name": "bind",
            "location": {
              "start": 40,
              "insert": 40,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "0958d7d6-b505-b1bb-d74e-ad9dbfeebd8e",
            "ancestors": [
              "6ff6a497-1fd4-d284-d441-fda279eb9d49"
            ],
            "type": "function",
            "description": "Sets the active texture slot in the GPU to a specified index within a range of 0 to 31, binding a texture to that slot.",
            "params": [
              {
                "name": "samplerSlot",
                "type_name": "int",
                "description": "0-based index of a texture slot within the current active texture unit, ranging from 0 to 31.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "int samplerSlot = 0;\ntexture.bind(samplerSlot);\n",
              "description": "\nIn this case, the method bind is being called with one parameter \"samplerSlot\" and it's value is set to 0. The method will then use the id of the texture object and call glActiveTexture with GL_TEXTURE0 + samplerSlot, where GL_TEXTURE0 is a constant that specifies the first texture unit, and samplerSlot is an integer representing which texture unit we want to bind this texture to. Then it will call glBindTexture with the GL_TEXTURE_2D target, id of the texture object, and finally it will set the minification filter using GL14.GL_LINEAR_MIPMAP_LINEAR, and the LOD bias using -0.6f."
            },
            "name": "bind",
            "location": {
              "start": 44,
              "insert": 44,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "8c47013a-ab9f-e2b7-1849-9fdddc1c895c",
            "ancestors": [
              "6ff6a497-1fd4-d284-d441-fda279eb9d49"
            ],
            "type": "function",
            "description": "Retrieves and returns the value of a field called `id`.",
            "params": [],
            "returns": {
              "type_name": "int",
              "description": "an integer representing the ID of the object.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Texture texture = new Texture(\"texture.png\");\nint id = texture.getID();\n",
              "description": "\nThis piece of code creates a new instance of the class Texture and loads it with the file \"texture.png\". Then, the id variable is assigned to the return value of getID(), which returns the id of the loaded texture."
            },
            "name": "getID",
            "location": {
              "start": 50,
              "insert": 50,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "441a12a5-5634-87a5-2a47-26a83fca73e1",
            "ancestors": [
              "6ff6a497-1fd4-d284-d441-fda279eb9d49"
            ],
            "type": "function",
            "description": "Loads a 2D texture from a file, generates mipmaps, and returns the ID of the created texture.",
            "params": [
              {
                "name": "fileName",
                "type_name": "String",
                "description": "file path of the texture to load.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "integer",
              "description": "an integer identifier of a generated texture.\n\n* The output is an integer, which represents the ID of the generated texture.\n* The texture is of type 2D and has an RGBA8 internal format.\n* The texture size is specified by the width and height parameters, which are obtained from the input file name.\n* The texture has a linear filter and is repeat-enabled in both the x and y directions.\n* A mipmap is generated using the `GLGenerateMipmap` function.",
              "complex_type": true
            },
            "name": "loadTexture",
            "location": {
              "start": 54,
              "insert": 54,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 48,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Timer.java",
    "path": "src/com/ch/Timer.java",
    "content": {
      "structured": {
        "description": "A Timer class using LWJGL's Sys package for timing purposes. It initializes a timer by recording the current time and calculates the delta time between each frame. The FPS (frames per second) is calculated and updated periodically.",
        "diagram": {
          "gviz": "digraph G {\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"]\n    \n    subgraph cluster_1 {\n        label=\"com\"\n        color=\"#33363A\"\n        subgraph cluster_main {\n            // style=filled\n            color=\"#00000000\"\n            Timer [] [fontsize=\"20pt\",style=filled,color=\"#26de81\",shape=square, fontname=\"Courier New\"]\n            label = \"\"\n        }\n    }\n    subgraph cluster_2 {\n        label=\"org\"\n        color=\"#33363A\"\n        Sys [label=\"org.lwjgl.Sys\", style=\"rounded,filled\"]\n    }\n    Timer -> Sys [style=\"dashed\"]\n}\n",
          "d2": "<?xml version=\"1.0\" encoding=\"utf-8\"?><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" d2Version=\"v0.6.5\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 295 624\"><svg id=\"d2-svg\" class=\"d2-816005177\" width=\"295\" height=\"624\" viewBox=\"11 11 295 624\"><rect x=\"11.000000\" y=\"11.000000\" width=\"295.000000\" height=\"624.000000\" rx=\"0.000000\" fill=\"#151719\" stroke-width=\"0\" /><style type=\"text/css\"><![CDATA[\n.d2-816005177 .text {\n\tfont-family: \"d2-816005177-font-regular\";\n}\n@font-face {\n\tfont-family: d2-816005177-font-regular;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-816005177 .text-italic {\n\tfont-family: \"d2-816005177-font-italic\";\n}\n@font-face {\n\tfont-family: d2-816005177-font-italic;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-816005177 .text-mono {\n\tfont-family: \"d2-816005177-font-mono\";\n}\n@font-face {\n\tfont-family: d2-816005177-font-mono;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-816005177 .text-mono-bold {\n\tfont-family: \"d2-816005177-font-mono-bold\";\n}\n@font-face {\n\tfont-family: d2-816005177-font-mono-bold;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}]]></style><style type=\"text/css\"><![CDATA[.shape {\n  shape-rendering: geometricPrecision;\n  stroke-linejoin: round;\n}\n.connection {\n  stroke-linecap: round;\n  stroke-linejoin: round;\n}\n.blend {\n  mix-blend-mode: multiply;\n  opacity: 0.5;\n}\n\n\t\t.d2-816005177 .fill-N1{fill:#ECEDED;}\n\t\t.d2-816005177 .fill-N2{fill:#676C7E;}\n\t\t.d2-816005177 .fill-N3{fill:#9499AB;}\n\t\t.d2-816005177 .fill-N4{fill:#CFD2DD;}\n\t\t.d2-816005177 .fill-N5{fill:#DEE1EB;}\n\t\t.d2-816005177 .fill-N6{fill:#EEF1F8;}\n\t\t.d2-816005177 .fill-N7{fill:#151719;}\n\t\t.d2-816005177 .fill-B1{fill:#717D86;}\n\t\t.d2-816005177 .fill-B2{fill:#717D86;}\n\t\t.d2-816005177 .fill-B3{fill:#ffff00;}\n\t\t.d2-816005177 .fill-B4{fill:#151719;}\n\t\t.d2-816005177 .fill-B5{fill:#151719;}\n\t\t.d2-816005177 .fill-B6{fill:#151719;}\n\t\t.d2-816005177 .fill-AA2{fill:#ECEDED;}\n\t\t.d2-816005177 .fill-AA4{fill:#CFD2DD;}\n\t\t.d2-816005177 .fill-AA5{fill:#DEE1EB;}\n\t\t.d2-816005177 .fill-AB4{fill:#CFD2DD;}\n\t\t.d2-816005177 .fill-AB5{fill:#DEE1EB;}\n\t\t.d2-816005177 .stroke-N1{stroke:#ECEDED;}\n\t\t.d2-816005177 .stroke-N2{stroke:#676C7E;}\n\t\t.d2-816005177 .stroke-N3{stroke:#9499AB;}\n\t\t.d2-816005177 .stroke-N4{stroke:#CFD2DD;}\n\t\t.d2-816005177 .stroke-N5{stroke:#DEE1EB;}\n\t\t.d2-816005177 .stroke-N6{stroke:#EEF1F8;}\n\t\t.d2-816005177 .stroke-N7{stroke:#151719;}\n\t\t.d2-816005177 .stroke-B1{stroke:#717D86;}\n\t\t.d2-816005177 .stroke-B2{stroke:#717D86;}\n\t\t.d2-816005177 .stroke-B3{stroke:#ffff00;}\n\t\t.d2-816005177 .stroke-B4{stroke:#151719;}\n\t\t.d2-816005177 .stroke-B5{stroke:#151719;}\n\t\t.d2-816005177 .stroke-B6{stroke:#151719;}\n\t\t.d2-816005177 .stroke-AA2{stroke:#ECEDED;}\n\t\t.d2-816005177 .stroke-AA4{stroke:#CFD2DD;}\n\t\t.d2-816005177 .stroke-AA5{stroke:#DEE1EB;}\n\t\t.d2-816005177 .stroke-AB4{stroke:#CFD2DD;}\n\t\t.d2-816005177 .stroke-AB5{stroke:#DEE1EB;}\n\t\t.d2-816005177 .background-color-N1{background-color:#ECEDED;}\n\t\t.d2-816005177 .background-color-N2{background-color:#676C7E;}\n\t\t.d2-816005177 .background-color-N3{background-color:#9499AB;}\n\t\t.d2-816005177 .background-color-N4{background-color:#CFD2DD;}\n\t\t.d2-816005177 .background-color-N5{background-color:#DEE1EB;}\n\t\t.d2-816005177 .background-color-N6{background-color:#EEF1F8;}\n\t\t.d2-816005177 .background-color-N7{background-color:#151719;}\n\t\t.d2-816005177 .background-color-B1{background-color:#717D86;}\n\t\t.d2-816005177 .background-color-B2{background-color:#717D86;}\n\t\t.d2-816005177 .background-color-B3{background-color:#ffff00;}\n\t\t.d2-816005177 .background-color-B4{background-color:#151719;}\n\t\t.d2-816005177 .background-color-B5{background-color:#151719;}\n\t\t.d2-816005177 .background-color-B6{background-color:#151719;}\n\t\t.d2-816005177 .background-color-AA2{background-color:#ECEDED;}\n\t\t.d2-816005177 .background-color-AA4{background-color:#CFD2DD;}\n\t\t.d2-816005177 .background-color-AA5{background-color:#DEE1EB;}\n\t\t.d2-816005177 .background-color-AB4{background-color:#CFD2DD;}\n\t\t.d2-816005177 .background-color-AB5{background-color:#DEE1EB;}\n\t\t.d2-816005177 .color-N1{color:#ECEDED;}\n\t\t.d2-816005177 .color-N2{color:#676C7E;}\n\t\t.d2-816005177 .color-N3{color:#9499AB;}\n\t\t.d2-816005177 .color-N4{color:#CFD2DD;}\n\t\t.d2-816005177 .color-N5{color:#DEE1EB;}\n\t\t.d2-816005177 .color-N6{color:#EEF1F8;}\n\t\t.d2-816005177 .color-N7{color:#151719;}\n\t\t.d2-816005177 .color-B1{color:#717D86;}\n\t\t.d2-816005177 .color-B2{color:#717D86;}\n\t\t.d2-816005177 .color-B3{color:#ffff00;}\n\t\t.d2-816005177 .color-B4{color:#151719;}\n\t\t.d2-816005177 .color-B5{color:#151719;}\n\t\t.d2-816005177 .color-B6{color:#151719;}\n\t\t.d2-816005177 .color-AA2{color:#ECEDED;}\n\t\t.d2-816005177 .color-AA4{color:#CFD2DD;}\n\t\t.d2-816005177 .color-AA5{color:#DEE1EB;}\n\t\t.d2-816005177 .color-AB4{color:#CFD2DD;}\n\t\t.d2-816005177 .color-AB5{color:#DEE1EB;}.appendix text.text{fill:#ECEDED}.md{--color-fg-default:#ECEDED;--color-fg-muted:#676C7E;--color-fg-subtle:#9499AB;--color-canvas-default:#151719;--color-canvas-subtle:#EEF1F8;--color-border-default:#717D86;--color-border-muted:#717D86;--color-neutral-muted:#EEF1F8;--color-accent-fg:#717D86;--color-accent-emphasis:#717D86;--color-attention-subtle:#676C7E;--color-danger-fg:red;}.sketch-overlay-B1{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B3{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-B4{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B5{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B6{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-AA2{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AA4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AA5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AB4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AB5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N1{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-N3{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N6{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N7{fill:url(#streaks-darker);mix-blend-mode:lighten}.light-code{display: block}.dark-code{display: none}]]></style><g id=\"com\"><g class=\"shape\" ><rect x=\"12.000000\" y=\"12.000000\" width=\"293.000000\" height=\"271.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"158.500000\" y=\"45.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">com</text></g><g id=\"org\"><g class=\"shape\" ><rect x=\"21.000000\" y=\"363.000000\" width=\"274.000000\" height=\"271.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"158.000000\" y=\"396.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">org</text></g><g id=\"com.ch\"><g class=\"shape\" ><rect x=\"62.000000\" y=\"62.000000\" width=\"193.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"158.500000\" y=\"91.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">ch</text></g><g id=\"org.lwjgl\"><g class=\"shape\" ><rect x=\"71.000000\" y=\"418.000000\" width=\"174.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"158.000000\" y=\"447.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">lwjgl</text></g><g id=\"com.ch.Timer\"><g class=\"shape\" ><rect x=\"112.000000\" y=\"112.000000\" width=\"93.000000\" height=\"66.000000\" fill=\"#26de81\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"158.500000\" y=\"150.500000\" fill=\"#151719\" class=\"text-mono-bold\" style=\"text-anchor:middle;font-size:16px\">Timer</text></g><g id=\"org.lwjgl.Sys\"><g class=\"shape\" ><rect x=\"121.000000\" y=\"468.000000\" width=\"74.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"158.000000\" y=\"506.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Sys</text></g><g id=\"(com.ch.Timer -&gt; org.lwjgl.Sys)[0]\"><marker id=\"mk-558834944\" markerWidth=\"10.000000\" markerHeight=\"12.000000\" refX=\"7.000000\" refY=\"6.000000\" viewBox=\"0.000000 0.000000 10.000000 12.000000\" orient=\"auto\" markerUnits=\"userSpaceOnUse\"> <polygon points=\"0.000000,0.000000 10.000000,6.000000 0.000000,12.000000\" fill=\"#26de81\" class=\"connection\" stroke-width=\"2\" /> </marker><path d=\"M 158.500000 179.000000 L 158.500000 464.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-816005177)\" /><text x=\"193.000000\" y=\"458.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><mask id=\"d2-816005177\" maskUnits=\"userSpaceOnUse\" x=\"11\" y=\"11\" width=\"295\" height=\"624\">\n<rect x=\"11\" y=\"11\" width=\"295\" height=\"624\" fill=\"white\"></rect>\n<rect x=\"134.000000\" y=\"17.000000\" width=\"49\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"139.000000\" y=\"368.000000\" width=\"38\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"147.500000\" y=\"67.000000\" width=\"22\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"134.500000\" y=\"423.000000\" width=\"47\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"134.500000\" y=\"134.500000\" width=\"48\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"143.500000\" y=\"490.500000\" width=\"29\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n</mask></svg></svg>\n",
          "d2_src": "direction: down\n\nvars: {\n  d2-config: {\n    pad: 0\n    theme-overrides: {\n      B1: \"#717D86\"\n      B2: \"#717D86\"\n      B3: \"#ffff00\"\n      B4: \"#151719\"\n      B5: \"#151719\"\n      B6: \"#151719\"\n      N1: \"#ECEDED\"\n      N7: \"#151719\"\n      AA2: \"#ECEDED\"\n    }\n  }\n}\n\nstyle: {\n  fill: \"#151719\"\n}\ncom.ch.Timer -> org.lwjgl.Sys: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\norg.lwjgl.Sys: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\ncom.ch.Timer: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.Timer: {\n  style: {\n    fill: \"#26de81\"\n    font-color: \"#151719\"\n    stroke-width: 0\n  }\n}\n"
        },
        "items": [
          {
            "id": "60baf0e0-c701-c0ab-8b4f-a6aead5eeeb5",
            "ancestors": [],
            "description": "Is designed to track and manage game-related timing. It initializes and updates frame rates, calculates deltas between frames, and keeps track of time. The class provides methods for getting the current FPS, delta, and time, as well as updating these values based on elapsed time.",
            "name": "Timer",
            "location": {
              "start": 5,
              "insert": 5,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 53,
            "docLength": null
          },
          {
            "id": "148d1295-0527-ba88-6847-129f3ad0a107",
            "ancestors": [
              "60baf0e0-c701-c0ab-8b4f-a6aead5eeeb5"
            ],
            "description": "Converts the system time from milliseconds to seconds, utilizing the `Sys.getTime()` method for retrieving the system time and the `Sys.getTimerResolution()` method for obtaining the timer resolution. The result is a long integer representing the system time in seconds.",
            "params": [],
            "returns": {
              "type_name": "long",
              "description": "the current system time in milliseconds.",
              "complex_type": false
            },
            "name": "getTimeS",
            "location": {
              "start": 14,
              "insert": 14,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "be3e13e6-b77b-14ba-8249-c1d57b003267",
            "ancestors": [
              "60baf0e0-c701-c0ab-8b4f-a6aead5eeeb5"
            ],
            "description": "Initializes a variable `lastFPS` with the current time obtained from the `getTimeS` method. This likely sets a starting point for measuring frame rates. The function does not take any parameters and returns no value.",
            "params": [],
            "name": "init",
            "location": {
              "start": 18,
              "insert": 18,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "922195c8-d994-19a5-e948-ca290a816854",
            "ancestors": [
              "60baf0e0-c701-c0ab-8b4f-a6aead5eeeb5"
            ],
            "description": "Measures the elapsed time between two consecutive frames by subtracting the previous frame's timestamp from the current frame's timestamp. The result is returned as a float value representing the time difference.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "a floating-point value representing time difference between two frames.",
              "complex_type": false
            },
            "name": "calculateDelta",
            "location": {
              "start": 22,
              "insert": 22,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "f274a3cf-0114-35af-1e49-b0fe4e54281c",
            "ancestors": [
              "60baf0e0-c701-c0ab-8b4f-a6aead5eeeb5"
            ],
            "description": "Updates the frames per second (FPS) counter by incrementing a variable and resetting it when a certain time interval has passed, ensuring accurate FPS measurement over a specific period.",
            "params": [],
            "name": "updateFPS",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "7c7d823a-24d6-97a6-d849-1bc7980755ba",
            "ancestors": [
              "60baf0e0-c701-c0ab-8b4f-a6aead5eeeb5"
            ],
            "description": "Returns a floating-point value representing the delta variable. The returned value is read-only and does not perform any calculations or modifications, simply providing access to the stored delta value.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "a floating-point value representing the `delta`.",
              "complex_type": false
            },
            "name": "getDelta",
            "location": {
              "start": 38,
              "insert": 38,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "74423dd4-b12d-2186-c44b-9e3473ead10b",
            "ancestors": [
              "60baf0e0-c701-c0ab-8b4f-a6aead5eeeb5"
            ],
            "description": "Retrieves and returns a value representing the current frames per second (FPS). The returned value is likely stored in a variable named `currentFPS`. This method appears to provide read-only access to the FPS data without modifying it.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "a floating-point value representing the current Frames Per Second.",
              "complex_type": false
            },
            "name": "getFPS",
            "location": {
              "start": 42,
              "insert": 42,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "9fab43e0-4451-3180-0043-edc3ed8b8beb",
            "ancestors": [
              "60baf0e0-c701-c0ab-8b4f-a6aead5eeeb5"
            ],
            "description": "Retrieves a floating-point value representing time. It returns this value without modification or calculation. The purpose of this function appears to be providing access to an external time variable, possibly for use in other parts of the program.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "a floating-point value representing the current time.",
              "complex_type": false
            },
            "name": "getTime",
            "location": {
              "start": 46,
              "insert": 46,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "1087b33f-5478-71a0-9a47-212e405c78d8",
            "ancestors": [
              "60baf0e0-c701-c0ab-8b4f-a6aead5eeeb5"
            ],
            "description": "Updates the game's state by calculating the frame rate, scaling the elapsed time to a range between 0 and 1, and accumulating it into the total time. This process is done by calling other functions within the scope of the `update` method.",
            "params": [],
            "name": "update",
            "location": {
              "start": 50,
              "insert": 50,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Transform.java",
    "path": "src/com/ch/Transform.java",
    "content": {
      "structured": {
        "description": "A Transform class that represents a 3D transformation in space. It maintains its own position, rotation, and scale attributes as well as references to its parent transform. The class provides methods for updating and modifying these attributes, including rotating around an axis and looking at a target point.",
        "diagram": {
          "gviz": "digraph G {\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"]\n    \n    Matrix4f []\n    Vector3f []\n    Camera []\n    Quaternion []\n    subgraph cluster_main {\n        // style=filled\n        color=\"#00000000\"\n        Transform [] [fontsize=\"20pt\",style=filled,color=\"#26de81\",shape=square, fontname=\"Courier New\"]\n        label = \"\"\n    }\n    Transform -> Vector3f [style=\"dashed\"]\n    Transform -> Quaternion [style=\"dashed\"]\n    Camera -> Transform [penwidth=1]\n    Transform -> Quaternion [dir=\"both\", penwidth=4]\n    Vector3f -> Transform [dir=\"both\", penwidth=11]\n    Transform -> Matrix4f [penwidth=2]\n    Transform -> Matrix4f [style=\"dashed\"]\n}\n",
          "d2": "<?xml version=\"1.0\" encoding=\"utf-8\"?><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" d2Version=\"v0.6.5\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 769 850\"><svg id=\"d2-svg\" class=\"d2-2003295026\" width=\"769\" height=\"850\" viewBox=\"11 11 769 850\"><rect x=\"11.000000\" y=\"11.000000\" width=\"769.000000\" height=\"850.000000\" rx=\"0.000000\" fill=\"#151719\" stroke-width=\"0\" /><style type=\"text/css\"><![CDATA[\n.d2-2003295026 .text {\n\tfont-family: \"d2-2003295026-font-regular\";\n}\n@font-face {\n\tfont-family: d2-2003295026-font-regular;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-2003295026 .text-italic {\n\tfont-family: \"d2-2003295026-font-italic\";\n}\n@font-face {\n\tfont-family: d2-2003295026-font-italic;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-2003295026 .text-mono {\n\tfont-family: \"d2-2003295026-font-mono\";\n}\n@font-face {\n\tfont-family: d2-2003295026-font-mono;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-2003295026 .text-mono-bold {\n\tfont-family: \"d2-2003295026-font-mono-bold\";\n}\n@font-face {\n\tfont-family: d2-2003295026-font-mono-bold;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}]]></style><style type=\"text/css\"><![CDATA[.shape {\n  shape-rendering: geometricPrecision;\n  stroke-linejoin: round;\n}\n.connection {\n  stroke-linecap: round;\n  stroke-linejoin: round;\n}\n.blend {\n  mix-blend-mode: multiply;\n  opacity: 0.5;\n}\n\n\t\t.d2-2003295026 .fill-N1{fill:#ECEDED;}\n\t\t.d2-2003295026 .fill-N2{fill:#676C7E;}\n\t\t.d2-2003295026 .fill-N3{fill:#9499AB;}\n\t\t.d2-2003295026 .fill-N4{fill:#CFD2DD;}\n\t\t.d2-2003295026 .fill-N5{fill:#DEE1EB;}\n\t\t.d2-2003295026 .fill-N6{fill:#EEF1F8;}\n\t\t.d2-2003295026 .fill-N7{fill:#151719;}\n\t\t.d2-2003295026 .fill-B1{fill:#717D86;}\n\t\t.d2-2003295026 .fill-B2{fill:#717D86;}\n\t\t.d2-2003295026 .fill-B3{fill:#ffff00;}\n\t\t.d2-2003295026 .fill-B4{fill:#151719;}\n\t\t.d2-2003295026 .fill-B5{fill:#151719;}\n\t\t.d2-2003295026 .fill-B6{fill:#151719;}\n\t\t.d2-2003295026 .fill-AA2{fill:#ECEDED;}\n\t\t.d2-2003295026 .fill-AA4{fill:#CFD2DD;}\n\t\t.d2-2003295026 .fill-AA5{fill:#DEE1EB;}\n\t\t.d2-2003295026 .fill-AB4{fill:#CFD2DD;}\n\t\t.d2-2003295026 .fill-AB5{fill:#DEE1EB;}\n\t\t.d2-2003295026 .stroke-N1{stroke:#ECEDED;}\n\t\t.d2-2003295026 .stroke-N2{stroke:#676C7E;}\n\t\t.d2-2003295026 .stroke-N3{stroke:#9499AB;}\n\t\t.d2-2003295026 .stroke-N4{stroke:#CFD2DD;}\n\t\t.d2-2003295026 .stroke-N5{stroke:#DEE1EB;}\n\t\t.d2-2003295026 .stroke-N6{stroke:#EEF1F8;}\n\t\t.d2-2003295026 .stroke-N7{stroke:#151719;}\n\t\t.d2-2003295026 .stroke-B1{stroke:#717D86;}\n\t\t.d2-2003295026 .stroke-B2{stroke:#717D86;}\n\t\t.d2-2003295026 .stroke-B3{stroke:#ffff00;}\n\t\t.d2-2003295026 .stroke-B4{stroke:#151719;}\n\t\t.d2-2003295026 .stroke-B5{stroke:#151719;}\n\t\t.d2-2003295026 .stroke-B6{stroke:#151719;}\n\t\t.d2-2003295026 .stroke-AA2{stroke:#ECEDED;}\n\t\t.d2-2003295026 .stroke-AA4{stroke:#CFD2DD;}\n\t\t.d2-2003295026 .stroke-AA5{stroke:#DEE1EB;}\n\t\t.d2-2003295026 .stroke-AB4{stroke:#CFD2DD;}\n\t\t.d2-2003295026 .stroke-AB5{stroke:#DEE1EB;}\n\t\t.d2-2003295026 .background-color-N1{background-color:#ECEDED;}\n\t\t.d2-2003295026 .background-color-N2{background-color:#676C7E;}\n\t\t.d2-2003295026 .background-color-N3{background-color:#9499AB;}\n\t\t.d2-2003295026 .background-color-N4{background-color:#CFD2DD;}\n\t\t.d2-2003295026 .background-color-N5{background-color:#DEE1EB;}\n\t\t.d2-2003295026 .background-color-N6{background-color:#EEF1F8;}\n\t\t.d2-2003295026 .background-color-N7{background-color:#151719;}\n\t\t.d2-2003295026 .background-color-B1{background-color:#717D86;}\n\t\t.d2-2003295026 .background-color-B2{background-color:#717D86;}\n\t\t.d2-2003295026 .background-color-B3{background-color:#ffff00;}\n\t\t.d2-2003295026 .background-color-B4{background-color:#151719;}\n\t\t.d2-2003295026 .background-color-B5{background-color:#151719;}\n\t\t.d2-2003295026 .background-color-B6{background-color:#151719;}\n\t\t.d2-2003295026 .background-color-AA2{background-color:#ECEDED;}\n\t\t.d2-2003295026 .background-color-AA4{background-color:#CFD2DD;}\n\t\t.d2-2003295026 .background-color-AA5{background-color:#DEE1EB;}\n\t\t.d2-2003295026 .background-color-AB4{background-color:#CFD2DD;}\n\t\t.d2-2003295026 .background-color-AB5{background-color:#DEE1EB;}\n\t\t.d2-2003295026 .color-N1{color:#ECEDED;}\n\t\t.d2-2003295026 .color-N2{color:#676C7E;}\n\t\t.d2-2003295026 .color-N3{color:#9499AB;}\n\t\t.d2-2003295026 .color-N4{color:#CFD2DD;}\n\t\t.d2-2003295026 .color-N5{color:#DEE1EB;}\n\t\t.d2-2003295026 .color-N6{color:#EEF1F8;}\n\t\t.d2-2003295026 .color-N7{color:#151719;}\n\t\t.d2-2003295026 .color-B1{color:#717D86;}\n\t\t.d2-2003295026 .color-B2{color:#717D86;}\n\t\t.d2-2003295026 .color-B3{color:#ffff00;}\n\t\t.d2-2003295026 .color-B4{color:#151719;}\n\t\t.d2-2003295026 .color-B5{color:#151719;}\n\t\t.d2-2003295026 .color-B6{color:#151719;}\n\t\t.d2-2003295026 .color-AA2{color:#ECEDED;}\n\t\t.d2-2003295026 .color-AA4{color:#CFD2DD;}\n\t\t.d2-2003295026 .color-AA5{color:#DEE1EB;}\n\t\t.d2-2003295026 .color-AB4{color:#CFD2DD;}\n\t\t.d2-2003295026 .color-AB5{color:#DEE1EB;}.appendix text.text{fill:#ECEDED}.md{--color-fg-default:#ECEDED;--color-fg-muted:#676C7E;--color-fg-subtle:#9499AB;--color-canvas-default:#151719;--color-canvas-subtle:#EEF1F8;--color-border-default:#717D86;--color-border-muted:#717D86;--color-neutral-muted:#EEF1F8;--color-accent-fg:#717D86;--color-accent-emphasis:#717D86;--color-attention-subtle:#676C7E;--color-danger-fg:red;}.sketch-overlay-B1{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B3{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-B4{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B5{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B6{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-AA2{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AA4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AA5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AB4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AB5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N1{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-N3{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N6{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N7{fill:url(#streaks-darker);mix-blend-mode:lighten}.light-code{display: block}.dark-code{display: none}]]></style><g id=\"com\"><g class=\"shape\" ><rect x=\"12.000000\" y=\"12.000000\" width=\"767.000000\" height=\"848.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"395.500000\" y=\"45.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">com</text></g><g id=\"com.ch\"><g class=\"shape\" ><rect x=\"62.000000\" y=\"62.000000\" width=\"667.000000\" height=\"748.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"395.500000\" y=\"91.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">ch</text></g><g id=\"com.ch.Transform\"><g class=\"shape\" ><rect x=\"384.000000\" y=\"248.000000\" width=\"200.000000\" height=\"66.000000\" fill=\"#26de81\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"484.000000\" y=\"286.500000\" fill=\"#151719\" class=\"text-mono-bold\" style=\"text-anchor:middle;font-size:16px\">Transform</text></g><g id=\"com.ch.math\"><g class=\"shape\" ><rect x=\"112.000000\" y=\"549.000000\" width=\"527.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"375.500000\" y=\"574.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">math</text></g><g id=\"com.ch.Camera\"><g class=\"shape\" ><rect x=\"433.000000\" y=\"112.000000\" width=\"102.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"484.000000\" y=\"150.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Camera</text></g><g id=\"com.ch.math.Matrix4f\"><g class=\"shape\" ><rect x=\"162.000000\" y=\"599.000000\" width=\"123.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"223.500000\" y=\"637.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Matrix4f</text></g><g id=\"com.ch.math.Quaternion\"><g class=\"shape\" ><rect x=\"305.000000\" y=\"599.000000\" width=\"141.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"375.500000\" y=\"637.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Quaternion</text></g><g id=\"com.ch.math.Vector3f\"><g class=\"shape\" ><rect x=\"466.000000\" y=\"599.000000\" width=\"123.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"527.500000\" y=\"637.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Vector3f</text></g><g id=\"com.ch.(Transform -&gt; math.Matrix4f)[0]\"><marker id=\"mk-558834944\" markerWidth=\"10.000000\" markerHeight=\"12.000000\" refX=\"7.000000\" refY=\"6.000000\" viewBox=\"0.000000 0.000000 10.000000 12.000000\" orient=\"auto\" markerUnits=\"userSpaceOnUse\"> <polygon points=\"0.000000,0.000000 10.000000,6.000000 0.000000,12.000000\" fill=\"#26de81\" class=\"connection\" stroke-width=\"2\" /> </marker><path d=\"M 413.213989 315.000000 L 413.213989 344.000000 S 413.213989 354.000000 403.213989 354.000000 L 213.000000 354.000000 S 203.000000 354.000000 203.000000 364.000000 L 203.000000 596.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-2003295026)\" /><text x=\"237.000000\" y=\"589.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(Transform -&gt; math.Quaternion)[0]\"><path d=\"M 470.356995 315.000000 L 470.356995 444.000000 S 470.356995 454.000000 460.356995 454.000000 L 362.000000 454.000000 S 352.000000 454.000000 352.000000 464.000000 L 352.000000 596.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-2003295026)\" /><text x=\"386.000000\" y=\"589.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(Transform -&gt; math.Vector3f)[0]\"><path d=\"M 527.500000 315.000000 L 527.500000 596.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-2003295026)\" /><text x=\"562.000000\" y=\"589.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(Camera -&gt; Transform)[0]\"><path d=\"M 484.641998 179.000000 L 484.641998 245.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-2003295026)\" /></g><g id=\"com.ch.(Transform &lt;-&gt; math.Quaternion)[0]\"><marker id=\"mk-3695359059\" markerWidth=\"10.000000\" markerHeight=\"12.000000\" refX=\"3.000000\" refY=\"6.000000\" viewBox=\"0.000000 0.000000 10.000000 12.000000\" orient=\"auto\" markerUnits=\"userSpaceOnUse\"> <polygon points=\"10.000000,0.000000 0.000000,6.000000 10.000000,12.000000\" fill=\"#26de81\" class=\"connection\" stroke-width=\"2\" /> </marker><path d=\"M 498.928009 317.000000 L 498.928009 494.000000 S 498.928009 504.000000 488.928009 504.000000 L 409.000000 504.000000 S 399.000000 504.000000 399.000000 514.000000 L 399.000000 596.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-start=\"url(#mk-3695359059)\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-2003295026)\" /></g><g id=\"com.ch.(Transform -&gt; math.Matrix4f)[1]\"><path d=\"M 441.785004 315.000000 L 441.785004 394.000000 S 441.785004 404.000000 431.785004 404.000000 L 254.000000 404.000000 S 244.000000 404.000000 244.000000 414.000000 L 244.000000 596.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-2003295026)\" /></g><g id=\"com.ch.(math.Vector3f &lt;-&gt; Transform)[0]\"><path d=\"M 527.500000 668.000000 L 527.500000 750.000000 S 527.500000 760.000000 537.500000 760.000000 L 669.000000 760.000000 S 679.000000 760.000000 679.000000 750.000000 L 679.000000 364.000000 S 679.000000 354.000000 669.000000 354.000000 L 566.070984 354.000000 S 556.070984 354.000000 556.070984 344.000000 L 556.070984 317.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-start=\"url(#mk-3695359059)\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-2003295026)\" /></g><mask id=\"d2-2003295026\" maskUnits=\"userSpaceOnUse\" x=\"11\" y=\"11\" width=\"769\" height=\"850\">\n<rect x=\"11\" y=\"11\" width=\"769\" height=\"850\" fill=\"white\"></rect>\n<rect x=\"371.000000\" y=\"17.000000\" width=\"49\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"384.500000\" y=\"67.000000\" width=\"22\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"440.500000\" y=\"270.500000\" width=\"87\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"354.000000\" y=\"554.000000\" width=\"43\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"455.500000\" y=\"134.500000\" width=\"57\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"184.500000\" y=\"621.500000\" width=\"78\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"327.500000\" y=\"621.500000\" width=\"96\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"488.500000\" y=\"621.500000\" width=\"78\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n</mask></svg></svg>\n",
          "d2_src": "direction: down\n\nvars: {\n  d2-config: {\n    pad: 0\n    theme-overrides: {\n      B1: \"#717D86\"\n      B2: \"#717D86\"\n      B3: \"#ffff00\"\n      B4: \"#151719\"\n      B5: \"#151719\"\n      B6: \"#151719\"\n      N1: \"#ECEDED\"\n      N7: \"#151719\"\n      AA2: \"#ECEDED\"\n    }\n  }\n}\n\nstyle: {\n  fill: \"#151719\"\n}\ncom.ch.Transform -> com.ch.math.Matrix4f: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Transform -> com.ch.math.Quaternion: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Transform -> com.ch.math.Vector3f: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Camera -> com.ch.Transform: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\ncom.ch.Transform <-> com.ch.math.Quaternion: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\ncom.ch.Transform -> com.ch.math.Matrix4f: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\ncom.ch.math.Vector3f <-> com.ch.Transform: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\ncom.ch.Camera: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.math.Quaternion: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.Transform: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.math.Matrix4f: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.math.Vector3f: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.Transform: {\n  style: {\n    fill: \"#26de81\"\n    font-color: \"#151719\"\n    stroke-width: 0\n  }\n}\n"
        },
        "items": [
          {
            "id": "f3c453ba-87b6-f086-e748-8bcfca178b6d",
            "ancestors": [],
            "description": "Represents a mathematical transformation in 3D space, encapsulating properties such as position, rotation, and scale. It provides various methods to update, rotate, look at, and transform these properties, as well as utilities for getting the transformed positions and rotations. The class also supports hierarchical transformations through its parent-child relationship.",
            "name": "Transform",
            "location": {
              "start": 7,
              "insert": 7,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 131,
            "docLength": null
          },
          {
            "id": "618a30a6-4031-2f93-3a40-30f6c0240e76",
            "ancestors": [
              "f3c453ba-87b6-f086-e748-8bcfca178b6d"
            ],
            "description": "Updates old positions, rotations, and scales if they differ from the current ones. If no old values exist, it creates new ones by copying the current values. The updated old values are then stored for future comparisons.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "Transform transform = new Transform();\ntransform.setPos(new Vector3f(1, 2, 3));\ntransform.setRot(new Quaternion().initFromAxisAngle(Vector3f.Y_AXIS, Math.toRadians(90)));\ntransform.setScale(new Vector3f(4, 5, 6));\n\ntransform.update();\n\n// transform's oldPos, oldRot and oldScale are updated with transform's current pos, rot, scale\n",
              "description": ""
            },
            "name": "update",
            "location": {
              "start": 32,
              "insert": 32,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 14,
            "docLength": null
          },
          {
            "id": "bad65646-3edd-9383-ac49-c08dc85a6298",
            "ancestors": [
              "f3c453ba-87b6-f086-e748-8bcfca178b6d"
            ],
            "description": "Applies a rotation to a quaternion-based orientation represented by `rot`. The rotation is specified by an axis and angle, which are used to create a new quaternion that is then multiplied with the existing one. The result is normalized to ensure proper orientation.",
            "params": [
              {
                "name": "axis",
                "type_name": "Vector3f",
                "description": "3D vector defining the rotation axis around which the object is rotated by an angle specified by the `angle` parameter.",
                "complex_type": false
              },
              {
                "name": "angle",
                "type_name": "float",
                "description": "3D rotation angle around the specified `axis`, which is used to compute a new quaternion by multiplying the current `rot` quaternion with the rotation axis and angle.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Transform transform = new Transform();\nVector3f axis = new Vector3f(0, 1, 0); // y-axis\nfloat angle = Math.PI / 2; // 90 degrees\ntransform.rotate(axis, angle);\n",
              "description": ""
            },
            "name": "rotate",
            "location": {
              "start": 47,
              "insert": 47,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "a21f61c1-07c7-bfae-8a49-9b44fe98f5cc",
            "ancestors": [
              "f3c453ba-87b6-f086-e748-8bcfca178b6d"
            ],
            "description": "Calculates a rotation to face a specified `point` while keeping the upward direction aligned with `up`. The result is stored in `rot`, which represents the necessary rotation to achieve this orientation.",
            "params": [
              {
                "name": "point",
                "type_name": "Vector3f",
                "description": "3D location that the object is looking at or gazing towards.",
                "complex_type": false
              },
              {
                "name": "up",
                "type_name": "Vector3f",
                "description": "3D vector that defines the upwards direction for the rotation calculation.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Transform transform = new Transform();\ntransform.lookAt(new Vector3f(1, 0, 0), new Vector3f(0, 1, 0));\n",
              "description": ""
            },
            "name": "lookAt",
            "location": {
              "start": 51,
              "insert": 51,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "27495428-9fce-5d9b-a84d-cbbd0add542c",
            "ancestors": [
              "f3c453ba-87b6-f086-e748-8bcfca178b6d"
            ],
            "description": "Calculates a quaternion representing a rotation from the current position to a specified point while keeping a specific direction (up) fixed. It takes two vectors, point and up, as input parameters and returns a new Quaternion object initialized with a rotation matrix calculated based on these vectors.",
            "params": [
              {
                "name": "point",
                "type_name": "Vector3f",
                "description": "3D vector from the origin to the target point, used to calculate the rotation matrix for the quaternion.",
                "complex_type": false
              },
              {
                "name": "up",
                "type_name": "Vector3f",
                "description": "3D vector that defines the direction of the up-axis for the rotation, used to determine the orientation of the resulting quaternion.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Quaternion",
              "description": "a `Quaternion` object representing a rotation.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Transform transform = new Transform();\nVector3f point = new Vector3f(1, 0, 0);\nVector3f up = new Vector3f(0, 1, 0);\n\nQuaternion lookAtRotation = transform.getLookAtRotation(point, up);\n",
              "description": ""
            },
            "name": "getLookAtRotation",
            "location": {
              "start": 55,
              "insert": 55,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "6f7a93c0-02e7-6089-5347-158faf54e239",
            "ancestors": [
              "f3c453ba-87b6-f086-e748-8bcfca178b6d"
            ],
            "description": "Checks whether a node has changed by comparing its position, rotation, and scale with their previous values and also checks if its parent node has changed. If any of these conditions are met, it returns `true`; otherwise, it returns `false`.",
            "params": [],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean indicating whether any object properties have changed.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Transform t = new Transform();\nt.setPos(new Vector3f(1, 2, 3));\nt.setRot(new Quaternion().initFromAxisAngle(new Vector3f(0, 0, 1), Math.PI / 4));\nt.setScale(new Vector3f(2, 2, 2));\n\nSystem.out.println(t.hasChanged()); // prints true\n\nt.setPos(new Vector3f(1, 2, 3)); // unchanged\nSystem.out.println(t.hasChanged()); // prints false",
              "description": ""
            },
            "name": "hasChanged",
            "location": {
              "start": 59,
              "insert": 59,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "28c924f1-2f93-f59f-5b4a-beb9f3c3a3d7",
            "ancestors": [
              "f3c453ba-87b6-f086-e748-8bcfca178b6d"
            ],
            "description": "Combines translation, rotation, and scaling transformations into a single matrix, returning the result as a product of four matrices: a translation matrix based on position coordinates, a rotation matrix from a rotational object, a scale matrix with scale factors, and a parent matrix.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a combined transformation matrix.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Transform transform = new Transform();\nMatrix4f transformation = transform.getTransformation();\n",
              "description": ""
            },
            "name": "getTransformation",
            "location": {
              "start": 75,
              "insert": 75,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "27d03f69-5f28-2086-984f-1d6998646a74",
            "ancestors": [
              "f3c453ba-87b6-f086-e748-8bcfca178b6d"
            ],
            "description": "Returns a matrix representing the transformation of the object's parent, if it exists and has changed since the last update. It updates its internal state with the parent's transformation matrix when necessary.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a `Matrix4f` object representing the parent's transformation.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Transform child = new Transform();\nchild.setPos(new Vector3f(1, 2, 3));\nchild.setScale(new Vector3f(4, 5, 6));\n\nTransform parent = new Transform();\nparent.setPos(new Vector3f(-1, -2, -3));\nparent.setScale(new Vector3f(7, 8, 9));\n\nchild.setParent(parent);\n\n// At this point child's parentMatrix is calculated as parent's transformation times translation matrix\n",
              "description": ""
            },
            "name": "getParentMatrix",
            "location": {
              "start": 83,
              "insert": 83,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "bbbcbf30-e5dd-6f92-5141-2bcf93a15cdb",
            "ancestors": [
              "f3c453ba-87b6-f086-e748-8bcfca178b6d"
            ],
            "description": "Assigns a value to the instance variable `parent`. This variable is expected to hold an object of type `Transform`, which is presumably a parent or container of some kind. The assignment updates the internal state of the object, linking it to its new parent.",
            "params": [
              {
                "name": "parent",
                "type_name": "Transform",
                "description": "Transform object that is assigned to the `this.parent` field, establishing a reference to the parent Transform for further processing.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Transform child = new Transform();\nchild.setParent(new Transform());\n",
              "description": "\nIn this example, the `child` transform has its parent set to another `Transform`."
            },
            "name": "setParent",
            "location": {
              "start": 90,
              "insert": 90,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "2ea04a28-c0cf-1bab-1841-cf372d37a15a",
            "ancestors": [
              "f3c453ba-87b6-f086-e748-8bcfca178b6d"
            ],
            "description": "Multiplies a position (`pos`) by a parent matrix using the `getParentMatrix` and `transform` methods, returning the resulting transformed position as a `Vector3f`. This operation applies a transformation to the original position based on the parent's coordinate system.",
            "params": [],
            "returns": {
              "type_name": "Vector3f",
              "description": "a transformed vector position based on the parent matrix.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Transform t = new Transform();\nt.setPos(new Vector3f(0, 0, 10));\nt.setParent(new Transform());\nSystem.out.println(t.getTransformedPos());",
              "description": ""
            },
            "name": "getTransformedPos",
            "location": {
              "start": 94,
              "insert": 94,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "b41f9a0f-0e23-8896-f748-7e5a7e68bc99",
            "ancestors": [
              "f3c453ba-87b6-f086-e748-8bcfca178b6d"
            ],
            "description": "Calculates a quaternion representing the combined rotation of an object and its parent, if any. It starts with a default quaternion as the parent's rotation, overrides it with the actual parent's rotation if one exists, and then multiplies it by the object's own rotation to produce the final result.",
            "params": [],
            "returns": {
              "type_name": "Quaternion",
              "description": "a Quaternion object resulting from multiplying `rot` with `parentRotation`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Transform child = new Transform();\nchild.setPos(new Vector3f(1, 2, 3));\nchild.setRot(new Quaternion(0, 0, 0, 1));\n\nTransform parent = new Transform();\nparent.setPos(new Vector3f(4, 5, 6));\nQuaternion parentRotation = new Quaternion(0, 0, 0, 1);\nparent.setRot(parentRotation);\n\nchild.setParent(parent);\n\nQuaternion childTransRot = child.getTransformedRot();\n\n",
              "description": ""
            },
            "name": "getTransformedRot",
            "location": {
              "start": 98,
              "insert": 98,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "8f27736a-92a7-aeb0-2a4b-f8af9dee0a47",
            "ancestors": [
              "f3c453ba-87b6-f086-e748-8bcfca178b6d"
            ],
            "description": "Retrieves a `Vector3f` object representing the position. This function returns a reference to an existing object, indicating that it does not create or modify any data but merely provides access to it. The returned value is a read-only representation of the position.",
            "params": [],
            "returns": {
              "type_name": "Vector3f",
              "description": "a `Vector3f` object representing the position.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Transform t = new Transform();\nt.setPos(new Vector3f(1, 2, 3));\nVector3f pos = t.getPos();\n",
              "description": ""
            },
            "name": "getPos",
            "location": {
              "start": 107,
              "insert": 107,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "654d66f5-446d-7e92-e648-d91d44c73b9c",
            "ancestors": [
              "f3c453ba-87b6-f086-e748-8bcfca178b6d"
            ],
            "description": "Updates the current position of an object to a new value provided by the `Vector3f` parameter. This parameter represents the new position in three-dimensional space, consisting of x, y, and z coordinates. The updated position is stored within the object for future reference.",
            "params": [
              {
                "name": "pos",
                "type_name": "Vector3f",
                "description": "3D position to be assigned to the object's current position.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Vector3f newpos = new Vector3f(1, 2, 3);\ntransform.setPos(newpos);\n",
              "description": ""
            },
            "name": "setPos",
            "location": {
              "start": 111,
              "insert": 111,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "cb4c2934-53fb-c0ac-b642-eb27153f25df",
            "ancestors": [
              "f3c453ba-87b6-f086-e748-8bcfca178b6d"
            ],
            "description": "Returns a Quaternion object named `rot`. The returned object represents a rotation and is accessible through this method. This allows external code to retrieve and utilize the stored rotational data.",
            "params": [],
            "returns": {
              "type_name": "Quaternion",
              "description": "a Quaternion object named `rot`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Transform transform = new Transform();\nQuaternion rotation = transform.getRot();",
              "description": ""
            },
            "name": "getRot",
            "location": {
              "start": 117,
              "insert": 117,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "69ae25de-41c0-5c90-394c-d5e51bb8683c",
            "ancestors": [
              "f3c453ba-87b6-f086-e748-8bcfca178b6d"
            ],
            "description": "Sets a Quaternion object representing the rotation to an instance variable `rot`. This variable is then updated with the provided rotation value. The function updates the internal state of the object with the new rotation information.",
            "params": [
              {
                "name": "rotation",
                "type_name": "Quaternion",
                "description": "4D quaternion value that is assigned to the instance variable `rot`.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Transform transform = new Transform();\nQuaternion rotation = new Quaternion(0, 1, 0, Math.PI / 2);\ntransform.setRot(rotation);\n",
              "description": ""
            },
            "name": "setRot",
            "location": {
              "start": 121,
              "insert": 121,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "c7a1a0f2-5486-1bb9-4f4d-43aa2d318668",
            "ancestors": [
              "f3c453ba-87b6-f086-e748-8bcfca178b6d"
            ],
            "description": "Returns a `Vector3f` object representing the scale value. The returned vector contains the x, y, and z components of the scale factor. The function provides read-only access to the scale value without modifying it.",
            "params": [],
            "returns": {
              "type_name": "Vector3f",
              "description": "a `Vector3f` object representing the scale of an object.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Transform transform = new Transform();\nVector3f scale = transform.getScale();",
              "description": ""
            },
            "name": "getScale",
            "location": {
              "start": 125,
              "insert": 125,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "ba18e3cc-4148-859b-9e41-ae1df4f85f5f",
            "ancestors": [
              "f3c453ba-87b6-f086-e748-8bcfca178b6d"
            ],
            "description": "Assigns a new value to the instance variable `scale`, which is expected to be an object of type `Vector3f`. This function does not perform any calculations or operations on the input, it simply updates the internal state of the class. The new scale vector replaces the previous one.",
            "params": [
              {
                "name": "scale",
                "type_name": "Vector3f",
                "description": "3D vector used to modify the object's size in the scene.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Vector3f newScale = new Vector3f(2, 3, 4);\ntransform.setScale(newScale);\n",
              "description": ""
            },
            "name": "setScale",
            "location": {
              "start": 129,
              "insert": 129,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "07459678-c44c-8c85-294e-09a2c36692a0",
            "ancestors": [
              "f3c453ba-87b6-f086-e748-8bcfca178b6d"
            ],
            "description": "Returns an empty string when called. This implies that the object represented by the class is intended to be unprintable or does not have a meaningful string representation.",
            "params": [],
            "returns": {
              "type_name": "string",
              "description": "an empty string.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Transform transform = new Transform();\nSystem.out.println(transform.toString());\n",
              "description": ""
            },
            "name": "toString",
            "location": {
              "start": 133,
              "insert": 133,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Util.java",
    "path": "src/com/ch/Util.java",
    "content": {
      "structured": {
        "description": "Utility classes and methods that create various types of buffers using the LWJGL library, and provides methods for manipulating arrays and lists. It creates float, int, and byte buffers from specified sizes or values, and also provides methods to flip these buffers. Additionally, it contains methods to convert between array and list data structures, including removing empty strings from an array and converting integer and float lists to arrays.",
        "diagram": {
          "gviz": "digraph G {\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"]\n    \n    subgraph cluster_1 {\n        label=\"ch\"\n        color=\"#33363A\"\n        Chunk []\n    }\n    subgraph cluster_main {\n        // style=filled\n        color=\"#00000000\"\n        Util [] [fontsize=\"20pt\",style=filled,color=\"#26de81\",shape=square, fontname=\"Courier New\"]\n        label = \"\"\n    }\n    ByteBuffer [label=\"java.nio.ByteBuffer\", style=\"rounded,filled\"]\n    ArrayList [label=\"java.util.ArrayList\", style=\"rounded,filled\"]\n    List [label=\"java.util.List\", style=\"rounded,filled\"]\n    BufferUtils [label=\"org.lwjgl.BufferUtils\", style=\"rounded,filled\"]\n    IntBuffer [label=\"java.nio.IntBuffer\", style=\"rounded,filled\"]\n    FloatBuffer [label=\"java.nio.FloatBuffer\", style=\"rounded,filled\"]\n    Util -> ArrayList [style=\"dashed\"]\n    Util -> IntBuffer [penwidth=2]\n    Chunk -> Util [style=\"dashed\"]\n    Util -> FloatBuffer [penwidth=2]\n    Util -> List [style=\"dashed\"]\n    Util -> ByteBuffer [penwidth=1]\n    Util -> ByteBuffer [style=\"dashed\"]\n    Util -> IntBuffer [style=\"dashed\"]\n    Util -> FloatBuffer [style=\"dashed\"]\n    Util -> BufferUtils [style=\"dashed\"]\n}\n",
          "d2": "<?xml version=\"1.0\" encoding=\"utf-8\"?><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" d2Version=\"v0.6.5\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 1383 1125\"><svg id=\"d2-svg\" class=\"d2-541107315\" width=\"1383\" height=\"1125\" viewBox=\"11 11 1383 1125\"><rect x=\"11.000000\" y=\"11.000000\" width=\"1383.000000\" height=\"1125.000000\" rx=\"0.000000\" fill=\"#151719\" stroke-width=\"0\" /><style type=\"text/css\"><![CDATA[\n.d2-541107315 .text {\n\tfont-family: \"d2-541107315-font-regular\";\n}\n@font-face {\n\tfont-family: d2-541107315-font-regular;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-541107315 .text-italic {\n\tfont-family: \"d2-541107315-font-italic\";\n}\n@font-face {\n\tfont-family: d2-541107315-font-italic;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-541107315 .text-mono {\n\tfont-family: \"d2-541107315-font-mono\";\n}\n@font-face {\n\tfont-family: d2-541107315-font-mono;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-541107315 .text-mono-bold {\n\tfont-family: \"d2-541107315-font-mono-bold\";\n}\n@font-face {\n\tfont-family: d2-541107315-font-mono-bold;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}]]></style><style type=\"text/css\"><![CDATA[.shape {\n  shape-rendering: geometricPrecision;\n  stroke-linejoin: round;\n}\n.connection {\n  stroke-linecap: round;\n  stroke-linejoin: round;\n}\n.blend {\n  mix-blend-mode: multiply;\n  opacity: 0.5;\n}\n\n\t\t.d2-541107315 .fill-N1{fill:#ECEDED;}\n\t\t.d2-541107315 .fill-N2{fill:#676C7E;}\n\t\t.d2-541107315 .fill-N3{fill:#9499AB;}\n\t\t.d2-541107315 .fill-N4{fill:#CFD2DD;}\n\t\t.d2-541107315 .fill-N5{fill:#DEE1EB;}\n\t\t.d2-541107315 .fill-N6{fill:#EEF1F8;}\n\t\t.d2-541107315 .fill-N7{fill:#151719;}\n\t\t.d2-541107315 .fill-B1{fill:#717D86;}\n\t\t.d2-541107315 .fill-B2{fill:#717D86;}\n\t\t.d2-541107315 .fill-B3{fill:#ffff00;}\n\t\t.d2-541107315 .fill-B4{fill:#151719;}\n\t\t.d2-541107315 .fill-B5{fill:#151719;}\n\t\t.d2-541107315 .fill-B6{fill:#151719;}\n\t\t.d2-541107315 .fill-AA2{fill:#ECEDED;}\n\t\t.d2-541107315 .fill-AA4{fill:#CFD2DD;}\n\t\t.d2-541107315 .fill-AA5{fill:#DEE1EB;}\n\t\t.d2-541107315 .fill-AB4{fill:#CFD2DD;}\n\t\t.d2-541107315 .fill-AB5{fill:#DEE1EB;}\n\t\t.d2-541107315 .stroke-N1{stroke:#ECEDED;}\n\t\t.d2-541107315 .stroke-N2{stroke:#676C7E;}\n\t\t.d2-541107315 .stroke-N3{stroke:#9499AB;}\n\t\t.d2-541107315 .stroke-N4{stroke:#CFD2DD;}\n\t\t.d2-541107315 .stroke-N5{stroke:#DEE1EB;}\n\t\t.d2-541107315 .stroke-N6{stroke:#EEF1F8;}\n\t\t.d2-541107315 .stroke-N7{stroke:#151719;}\n\t\t.d2-541107315 .stroke-B1{stroke:#717D86;}\n\t\t.d2-541107315 .stroke-B2{stroke:#717D86;}\n\t\t.d2-541107315 .stroke-B3{stroke:#ffff00;}\n\t\t.d2-541107315 .stroke-B4{stroke:#151719;}\n\t\t.d2-541107315 .stroke-B5{stroke:#151719;}\n\t\t.d2-541107315 .stroke-B6{stroke:#151719;}\n\t\t.d2-541107315 .stroke-AA2{stroke:#ECEDED;}\n\t\t.d2-541107315 .stroke-AA4{stroke:#CFD2DD;}\n\t\t.d2-541107315 .stroke-AA5{stroke:#DEE1EB;}\n\t\t.d2-541107315 .stroke-AB4{stroke:#CFD2DD;}\n\t\t.d2-541107315 .stroke-AB5{stroke:#DEE1EB;}\n\t\t.d2-541107315 .background-color-N1{background-color:#ECEDED;}\n\t\t.d2-541107315 .background-color-N2{background-color:#676C7E;}\n\t\t.d2-541107315 .background-color-N3{background-color:#9499AB;}\n\t\t.d2-541107315 .background-color-N4{background-color:#CFD2DD;}\n\t\t.d2-541107315 .background-color-N5{background-color:#DEE1EB;}\n\t\t.d2-541107315 .background-color-N6{background-color:#EEF1F8;}\n\t\t.d2-541107315 .background-color-N7{background-color:#151719;}\n\t\t.d2-541107315 .background-color-B1{background-color:#717D86;}\n\t\t.d2-541107315 .background-color-B2{background-color:#717D86;}\n\t\t.d2-541107315 .background-color-B3{background-color:#ffff00;}\n\t\t.d2-541107315 .background-color-B4{background-color:#151719;}\n\t\t.d2-541107315 .background-color-B5{background-color:#151719;}\n\t\t.d2-541107315 .background-color-B6{background-color:#151719;}\n\t\t.d2-541107315 .background-color-AA2{background-color:#ECEDED;}\n\t\t.d2-541107315 .background-color-AA4{background-color:#CFD2DD;}\n\t\t.d2-541107315 .background-color-AA5{background-color:#DEE1EB;}\n\t\t.d2-541107315 .background-color-AB4{background-color:#CFD2DD;}\n\t\t.d2-541107315 .background-color-AB5{background-color:#DEE1EB;}\n\t\t.d2-541107315 .color-N1{color:#ECEDED;}\n\t\t.d2-541107315 .color-N2{color:#676C7E;}\n\t\t.d2-541107315 .color-N3{color:#9499AB;}\n\t\t.d2-541107315 .color-N4{color:#CFD2DD;}\n\t\t.d2-541107315 .color-N5{color:#DEE1EB;}\n\t\t.d2-541107315 .color-N6{color:#EEF1F8;}\n\t\t.d2-541107315 .color-N7{color:#151719;}\n\t\t.d2-541107315 .color-B1{color:#717D86;}\n\t\t.d2-541107315 .color-B2{color:#717D86;}\n\t\t.d2-541107315 .color-B3{color:#ffff00;}\n\t\t.d2-541107315 .color-B4{color:#151719;}\n\t\t.d2-541107315 .color-B5{color:#151719;}\n\t\t.d2-541107315 .color-B6{color:#151719;}\n\t\t.d2-541107315 .color-AA2{color:#ECEDED;}\n\t\t.d2-541107315 .color-AA4{color:#CFD2DD;}\n\t\t.d2-541107315 .color-AA5{color:#DEE1EB;}\n\t\t.d2-541107315 .color-AB4{color:#CFD2DD;}\n\t\t.d2-541107315 .color-AB5{color:#DEE1EB;}.appendix text.text{fill:#ECEDED}.md{--color-fg-default:#ECEDED;--color-fg-muted:#676C7E;--color-fg-subtle:#9499AB;--color-canvas-default:#151719;--color-canvas-subtle:#EEF1F8;--color-border-default:#717D86;--color-border-muted:#717D86;--color-neutral-muted:#EEF1F8;--color-accent-fg:#717D86;--color-accent-emphasis:#717D86;--color-attention-subtle:#676C7E;--color-danger-fg:red;}.sketch-overlay-B1{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B3{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-B4{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B5{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B6{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-AA2{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AA4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AA5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AB4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AB5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N1{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-N3{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N6{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N7{fill:url(#streaks-darker);mix-blend-mode:lighten}.light-code{display: block}.dark-code{display: none}]]></style><g id=\"com\"><g class=\"shape\" ><rect x=\"492.000000\" y=\"12.000000\" width=\"560.000000\" height=\"512.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"772.000000\" y=\"45.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">com</text></g><g id=\"java\"><g class=\"shape\" ><rect x=\"12.000000\" y=\"864.000000\" width=\"1012.000000\" height=\"271.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"518.000000\" y=\"897.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">java</text></g><g id=\"org\"><g class=\"shape\" ><rect x=\"1044.000000\" y=\"864.000000\" width=\"349.000000\" height=\"271.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"1218.500000\" y=\"897.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">org</text></g><g id=\"com.ch\"><g class=\"shape\" ><rect x=\"542.000000\" y=\"62.000000\" width=\"460.000000\" height=\"407.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"772.000000\" y=\"91.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">ch</text></g><g id=\"java.util\"><g class=\"shape\" ><rect x=\"62.000000\" y=\"919.000000\" width=\"333.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"228.500000\" y=\"948.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">util</text></g><g id=\"java.nio\"><g class=\"shape\" ><rect x=\"415.000000\" y=\"919.000000\" width=\"559.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"694.500000\" y=\"948.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">nio</text></g><g id=\"org.lwjgl\"><g class=\"shape\" ><rect x=\"1094.000000\" y=\"919.000000\" width=\"249.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"1218.500000\" y=\"948.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">lwjgl</text></g><g id=\"com.ch.Util\"><g class=\"shape\" ><rect x=\"592.000000\" y=\"353.000000\" width=\"360.000000\" height=\"66.000000\" fill=\"#26de81\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"772.000000\" y=\"391.500000\" fill=\"#151719\" class=\"text-mono-bold\" style=\"text-anchor:middle;font-size:16px\">Util</text></g><g id=\"java.util.List\"><g class=\"shape\" ><rect x=\"112.000000\" y=\"969.000000\" width=\"82.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"153.000000\" y=\"1007.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">List</text></g><g id=\"java.nio.ByteBuffer\"><g class=\"shape\" ><rect x=\"465.000000\" y=\"969.000000\" width=\"140.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"535.000000\" y=\"1007.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">ByteBuffer</text></g><g id=\"java.nio.FloatBuffer\"><g class=\"shape\" ><rect x=\"625.000000\" y=\"969.000000\" width=\"149.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"699.500000\" y=\"1007.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">FloatBuffer</text></g><g id=\"java.nio.IntBuffer\"><g class=\"shape\" ><rect x=\"794.000000\" y=\"969.000000\" width=\"130.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"859.000000\" y=\"1007.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">IntBuffer</text></g><g id=\"java.util.ArrayList\"><g class=\"shape\" ><rect x=\"214.000000\" y=\"969.000000\" width=\"131.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"279.500000\" y=\"1007.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">ArrayList</text></g><g id=\"org.lwjgl.BufferUtils\"><g class=\"shape\" ><rect x=\"1144.000000\" y=\"969.000000\" width=\"149.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"1218.500000\" y=\"1007.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">BufferUtils</text></g><g id=\"com.ch.voxel\"><g class=\"shape\" ><rect x=\"675.000000\" y=\"112.000000\" width=\"194.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"772.000000\" y=\"137.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">voxel</text></g><g id=\"com.ch.voxel.Chunk\"><g class=\"shape\" ><rect x=\"725.000000\" y=\"162.000000\" width=\"94.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"772.000000\" y=\"200.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Chunk</text></g><g id=\"(com.ch.Util -&gt; java.util.List)[0]\"><marker id=\"mk-558834944\" markerWidth=\"10.000000\" markerHeight=\"12.000000\" refX=\"7.000000\" refY=\"6.000000\" viewBox=\"0.000000 0.000000 10.000000 12.000000\" orient=\"auto\" markerUnits=\"userSpaceOnUse\"> <polygon points=\"0.000000,0.000000 10.000000,6.000000 0.000000,12.000000\" fill=\"#26de81\" class=\"connection\" stroke-width=\"2\" /> </marker><path d=\"M 628.666016 420.000000 L 628.666016 559.000000 S 628.666016 569.000000 618.666016 569.000000 L 163.000000 569.000000 S 153.000000 569.000000 153.000000 579.000000 L 153.000000 965.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-541107315)\" /><text x=\"187.000000\" y=\"959.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Util -&gt; java.nio.ByteBuffer)[0]\"><path d=\"M 700.666016 420.000000 L 700.666016 659.000000 S 700.666016 669.000000 690.666016 669.000000 L 521.665985 669.000000 S 511.665985 669.000000 511.665985 679.000000 L 511.665985 966.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-541107315)\" /><text x=\"546.000000\" y=\"959.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Util -&gt; java.nio.FloatBuffer)[0]\"><path d=\"M 772.666016 420.000000 L 772.666016 759.000000 S 772.666016 769.000000 762.666016 769.000000 L 684.666016 769.000000 S 674.666016 769.000000 674.666016 779.000000 L 674.666016 966.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-541107315)\" /><text x=\"709.000000\" y=\"959.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Util -&gt; java.nio.IntBuffer)[0]\"><path d=\"M 837.333008 420.000000 L 837.333008 966.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-541107315)\" /><text x=\"871.000000\" y=\"959.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Util -&gt; java.util.ArrayList)[0]\"><path d=\"M 664.666016 420.000000 L 664.666016 609.000000 S 664.666016 619.000000 654.666016 619.000000 L 289.500000 619.000000 S 279.500000 619.000000 279.500000 629.000000 L 279.500000 965.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-541107315)\" /><text x=\"314.000000\" y=\"959.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Util -&gt; org.lwjgl.BufferUtils)[0]\"><path d=\"M 916.666016 420.000000 L 916.666016 559.000000 S 916.666016 569.000000 926.666016 569.000000 L 1208.500000 569.000000 S 1218.500000 569.000000 1218.500000 579.000000 L 1218.500000 965.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-541107315)\" /><text x=\"1253.000000\" y=\"959.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.ch.(voxel.Chunk -&gt; Util)[0]\"><path d=\"M 772.666016 229.000000 L 772.666016 350.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-541107315)\" /><text x=\"807.000000\" y=\"343.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.ch.Util -&gt; java.nio.FloatBuffer)[1]\"><path d=\"M 808.666016 420.000000 L 808.666016 809.000000 S 808.666016 819.000000 798.666016 819.000000 L 734.333008 819.000000 S 724.333008 819.000000 724.333008 829.000000 L 724.333008 966.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-541107315)\" /></g><g id=\"(com.ch.Util -&gt; java.nio.IntBuffer)[1]\"><path d=\"M 880.666016 420.000000 L 880.666016 966.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-541107315)\" /></g><g id=\"(com.ch.Util -&gt; java.nio.ByteBuffer)[1]\"><path d=\"M 736.666016 420.000000 L 736.666016 709.000000 S 736.666016 719.000000 726.666016 719.000000 L 568.333008 719.000000 S 558.333008 719.000000 558.333008 729.000000 L 558.333008 966.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-541107315)\" /></g><mask id=\"d2-541107315\" maskUnits=\"userSpaceOnUse\" x=\"11\" y=\"11\" width=\"1383\" height=\"1125\">\n<rect x=\"11\" y=\"11\" width=\"1383\" height=\"1125\" fill=\"white\"></rect>\n<rect x=\"747.500000\" y=\"17.000000\" width=\"49\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"493.000000\" y=\"869.000000\" width=\"50\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1199.500000\" y=\"869.000000\" width=\"38\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"761.000000\" y=\"67.000000\" width=\"22\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"212.000000\" y=\"924.000000\" width=\"33\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"679.000000\" y=\"924.000000\" width=\"31\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1195.000000\" y=\"924.000000\" width=\"47\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"753.500000\" y=\"375.500000\" width=\"37\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"134.500000\" y=\"991.500000\" width=\"37\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"487.500000\" y=\"991.500000\" width=\"95\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"647.500000\" y=\"991.500000\" width=\"104\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"816.500000\" y=\"991.500000\" width=\"85\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"236.500000\" y=\"991.500000\" width=\"86\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1166.500000\" y=\"991.500000\" width=\"104\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"749.500000\" y=\"117.000000\" width=\"45\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"747.500000\" y=\"184.500000\" width=\"49\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n</mask></svg></svg>\n",
          "d2_src": "direction: down\n\nvars: {\n  d2-config: {\n    pad: 0\n    theme-overrides: {\n      B1: \"#717D86\"\n      B2: \"#717D86\"\n      B3: \"#ffff00\"\n      B4: \"#151719\"\n      B5: \"#151719\"\n      B6: \"#151719\"\n      N1: \"#ECEDED\"\n      N7: \"#151719\"\n      AA2: \"#ECEDED\"\n    }\n  }\n}\n\nstyle: {\n  fill: \"#151719\"\n}\ncom.ch.Util -> java.util.List: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Util -> java.nio.ByteBuffer: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Util -> java.nio.FloatBuffer: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Util -> java.nio.IntBuffer: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Util -> java.util.ArrayList: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Util -> org.lwjgl.BufferUtils: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.voxel.Chunk -> com.ch.Util: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.ch.Util -> java.nio.FloatBuffer: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\ncom.ch.Util -> java.nio.IntBuffer: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\ncom.ch.Util -> java.nio.ByteBuffer: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\norg.lwjgl.BufferUtils: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\njava.util.List: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\njava.nio.ByteBuffer: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\njava.util.ArrayList: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\njava.nio.FloatBuffer: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\njava.nio.IntBuffer: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\ncom.ch.Util: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.voxel.Chunk: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\njava.nio.FloatBuffer: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\njava.nio.IntBuffer: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\njava.nio.ByteBuffer: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.ch.Util: {\n  style: {\n    fill: \"#26de81\"\n    font-color: \"#151719\"\n    stroke-width: 0\n  }\n}\n"
        },
        "items": [
          {
            "id": "145a0b1d-a375-6aa7-5142-4d988b800177",
            "ancestors": [],
            "description": "Provides various utility functions for creating buffers and converting between primitive data types. It also includes methods for removing empty strings from an array and converting lists of integers and floats to arrays.",
            "name": "Util",
            "location": {
              "start": 11,
              "insert": 11,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 129,
            "docLength": null
          },
          {
            "id": "d72b1c49-2bd7-48a6-174b-82b0bfab300c",
            "ancestors": [
              "145a0b1d-a375-6aa7-5142-4d988b800177"
            ],
            "description": "Creates a new float buffer with the specified `size`. It returns a newly created float buffer object using `BufferUtils.createFloatBuffer()` method. The returned buffer is not initialized and needs to be filled with data before being used.",
            "params": [
              {
                "name": "size",
                "type_name": "int",
                "description": "umber of floating-point values that the returned `FloatBuffer` will be able to hold.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "FloatBuffer",
              "description": "a FloatBuffer object created with the specified size.",
              "complex_type": false
            },
            "name": "createFloatBuffer",
            "location": {
              "start": 13,
              "insert": 13,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "1e54a55e-8a85-909b-734e-3c3a3bbba5c5",
            "ancestors": [
              "145a0b1d-a375-6aa7-5142-4d988b800177"
            ],
            "description": "Creates an IntBuffer with a specified size, allocating memory to store integer values. The buffer is initialized to zero and can be used for storing or retrieving integer data. It returns the newly created IntBuffer instance.",
            "params": [
              {
                "name": "size",
                "type_name": "int",
                "description": "umber of integers that can be stored in the created IntBuffer, determining its capacity and maximum size.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "IntBuffer",
              "description": "an instance of `IntBuffer`.",
              "complex_type": false
            },
            "name": "createIntBuffer",
            "location": {
              "start": 17,
              "insert": 17,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "859a26c0-e8d0-8ca4-3747-ed4e3961c9f4",
            "ancestors": [
              "145a0b1d-a375-6aa7-5142-4d988b800177"
            ],
            "description": "Returns a new instance of `ByteBuffer` with the specified size using `BufferUtils`. The created buffer is uninitialized, meaning it does not contain any data. It provides a mechanism to store and retrieve binary data efficiently.",
            "params": [
              {
                "name": "size",
                "type_name": "int",
                "description": "umber of bytes to allocate for the resulting byte buffer, which is used to create a new ByteBuffer object with the specified size.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ByteBuffer",
              "description": "a Java `ByteBuffer` object of specified size.",
              "complex_type": false
            },
            "name": "createByteBuffer",
            "location": {
              "start": 21,
              "insert": 21,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "ff4a0dce-e419-d1a8-5a42-6e9d54fd0b1e",
            "ancestors": [
              "145a0b1d-a375-6aa7-5142-4d988b800177"
            ],
            "description": "Creates an `IntBuffer` from a variable number of integer values, puts the values into the buffer, and then flips the buffer to prepare it for reading. The resulting buffer can be used for both writing and reading operations.",
            "params": [
              {
                "name": "values",
                "type_name": "int[]",
                "description": "0-based indices of an array that is used to populate the IntBuffer with integer values.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "IntBuffer",
              "description": "a flipped `IntBuffer` containing the input values.",
              "complex_type": false
            },
            "name": "createFlippedBuffer",
            "location": {
              "start": 25,
              "insert": 25,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "9221f664-0e5e-3890-e548-8848b95fd3ec",
            "ancestors": [
              "145a0b1d-a375-6aa7-5142-4d988b800177"
            ],
            "description": "Creates a FloatBuffer from an array of float values, puts the values into the buffer, and then flips the buffer to prepare it for reading. It returns the flipped buffer.",
            "params": [
              {
                "name": "values",
                "type_name": "float[]",
                "description": "float array elements to be written into the FloatBuffer object.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "FloatBuffer",
              "description": "a flipped FloatBuffer containing the provided float values.",
              "complex_type": false
            },
            "name": "createFlippedBuffer",
            "location": {
              "start": 33,
              "insert": 33,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "2009cbdf-fc1e-b589-fc41-1b46d595ae12",
            "ancestors": [
              "145a0b1d-a375-6aa7-5142-4d988b800177"
            ],
            "description": "Transforms an input array of strings into a new array, excluding any empty strings and preserving the original order. It achieves this by iterating through the input array, adding non-empty strings to an ArrayList, and then converting the ArrayList back to an array.",
            "params": [
              {
                "name": "data",
                "type_name": "String[]",
                "description": "1-D array of strings to be processed by removing empty strings and returning an updated string array.\n\nData is an array of strings, where each string represents a value. The length of this array is dynamically determined by the number of elements added during execution.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "array",
              "description": "an array of non-empty strings.\n\nThe output is an array of strings.",
              "complex_type": true
            },
            "name": "removeEmptyStrings",
            "location": {
              "start": 91,
              "insert": 91,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 12,
            "docLength": null
          },
          {
            "id": "c3cc4645-e4d0-65b0-eb42-a2c0160a8fe1",
            "ancestors": [
              "145a0b1d-a375-6aa7-5142-4d988b800177"
            ],
            "description": "Converts an array of `Integer` objects into an array of primitive `int` values. It iterates over the input array, assigning each integer value to a corresponding element in the output array. The resulting array is returned as a static method result.",
            "params": [
              {
                "name": "data",
                "type_name": "Integer[]",
                "description": "2D array of integers that is being converted to a primitive int array.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "int",
              "description": "an integer array converted from a given Integer array.",
              "complex_type": false
            },
            "name": "toIntArray",
            "location": {
              "start": 104,
              "insert": 104,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "8f311968-d6bf-fe83-b749-ff0ddcc1c55e",
            "ancestors": [
              "145a0b1d-a375-6aa7-5142-4d988b800177"
            ],
            "description": "Converts a List of Integer values to an array of integers. It iterates through the input list, assigning each value to its corresponding index in the resulting array. The array is then returned as the output.",
            "params": [
              {
                "name": "data",
                "type_name": "List<Integer>",
                "description": "List of Integer values to be converted into an integer array.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "integer",
              "description": "an integer array containing elements from the input list.",
              "complex_type": false
            },
            "name": "toIntArray",
            "location": {
              "start": 113,
              "insert": 113,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "6f72a293-5d8d-e998-8d45-434eb39e7e6f",
            "ancestors": [
              "145a0b1d-a375-6aa7-5142-4d988b800177"
            ],
            "description": "Converts a given array of Float objects to an array of primitive float values, maintaining the original length and order of elements. It iterates over the input array, copying each element to the corresponding position in the output array.",
            "params": [
              {
                "name": "data",
                "type_name": "Float[]",
                "description": "2D array of Float objects to be converted into a 1D array of float primitive types.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "array",
              "description": "a new array of floats.",
              "complex_type": false
            },
            "name": "toFloatArray",
            "location": {
              "start": 122,
              "insert": 122,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "25fd5c4a-59fe-bd80-d542-b63d5d474e6c",
            "ancestors": [
              "145a0b1d-a375-6aa7-5142-4d988b800177"
            ],
            "description": "Converts a list of floating-point numbers into an array of floats. It iterates over the input list, assigning each element to its corresponding index in the output array. The resulting array is then returned.",
            "params": [
              {
                "name": "data",
                "type_name": "List<Float>",
                "description": "List of Float values to be converted into a float array and processed by the function.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "array",
              "description": "an array of float values converted from a list.",
              "complex_type": false
            },
            "name": "toFloatArray",
            "location": {
              "start": 131,
              "insert": 131,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Matrix4f.java",
    "path": "src/com/ch/math/Matrix4f.java",
    "content": {
      "structured": {
        "description": "A Matrix4f class that represents a 4x4 matrix in homogeneous coordinates. The class provides various methods for creating and manipulating matrices, including initIdentity(), initRotation(), initOrthographic(), and mul() for multiplying the matrix with another vector or matrix. Additionally, the class provides getData() and getLinearData() methods to access the matrix data, as well as setM() method to set the matrix data directly.",
        "items": [
          {
            "id": "f67ebc32-c212-9786-d840-a66039043ab0",
            "ancestors": [],
            "type": "function",
            "description": "Is a data structure for representing 4x4 matrices. It provides methods for initializing the matrix with rotation and translation vectors, as well as methods for transforming vectors and other matrices. The class also provides access to the linear data of the matrix through its `getLinearData()` method.",
            "name": "Matrix4f",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 291,
            "docLength": null
          },
          {
            "id": "bab51320-d6ae-d889-9948-5b30533bad08",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Sets all elements of a `Matrix4f` object to identity values, i.e., matrix with diagonal elements equal to 1 and off-diagonal elements equal to 0.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a matrix with all elements set to either 0 or 1, depending on their position in the matrix.\n\nThe `Matrix4f` object is initialized with identity matrix elements. Specifically, each element in the 16-element array is set to either 0 or 1, depending on its row and column index. The resulting matrix has a determinant of 1 and is equivalent to the identity matrix.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        Matrix4f matrix = new Matrix4f();\n        matrix.initIdentity();\n        System.out.println(matrix);\n    }\n}\n",
              "description": "\nThis code will print out the following:\n"
            },
            "name": "initIdentity",
            "location": {
              "start": 11,
              "insert": 11,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 20,
            "docLength": null
          },
          {
            "id": "9e289a1e-c9a8-3498-864e-1e9a0f3922bb",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Initializes a matrix with translation values `x`, `y`, and `z`. It sets the elements of the matrix to represent the position of an object in 3D space after translation.",
            "params": [
              {
                "name": "x",
                "type_name": "float",
                "description": "3D translation amount in the x-axis direction, which is negated before being assigned to the matrix data.",
                "complex_type": false
              },
              {
                "name": "y",
                "type_name": "float",
                "description": "2nd translation component, which is added to the `data` array at index 1.",
                "complex_type": false
              },
              {
                "name": "z",
                "type_name": "float",
                "description": "3rd dimension of the matrix, which is translated by the value provided.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a modified instance of the `Matrix4f` class.\n\n* The returned object is a `Matrix4f` instance, representing a 4x4 homogeneous transformation matrix.\n* The matrix elements are updated to reflect the translation vector (x, y, z) from the origin. Specifically, the first column represents the x-component of the translation, the second column represents the y-component, and the third column represents the z-component.\n* The returned object retains the same properties as the original matrix, including its homogeneity and 4x4 structure.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class Example {\n  public static void main(String[] args) {\n    Matrix4f matrix = new Matrix4f();\n    matrix.initTranslation(1, 2, 3);\n    float[][] data = matrix.getData();\n    System.out.println(data[0][3]);\n  }\n}\n",
              "description": "\nThis program will print out the value of the translation component on the X axis."
            },
            "name": "initTranslation",
            "location": {
              "start": 32,
              "insert": 32,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "b2714cbf-168c-a980-7f40-6e87cc8359ac",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Initializes a rotation matrix based on three Euler angles (x, y, z). It returns the rotation matrix as a new object instance.",
            "params": [
              {
                "name": "x",
                "type_name": "float",
                "description": "3D rotation angle around the z-axis, which is used to calculate the rotation matrix rz.",
                "complex_type": false
              },
              {
                "name": "y",
                "type_name": "float",
                "description": "2D rotation axis around which the 3D rotation is performed, and it is used to calculate the rotation matrix using the rotation angles provided by the other two input parameters.",
                "complex_type": false
              },
              {
                "name": "z",
                "type_name": "float",
                "description": "3D rotation axis around which the rotation is performed, and it is used to compute the rotations of the `rx`, `ry`, and `rz` matrices.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a `Matrix4f` object containing the rotation matrix based on the given Euler angles.\n\n* The `data` field is a 4x4 matrix representing the rotated coordinate system.\n* The elements of the matrix are floating-point values representing the individual components of the rotation.\n* The rotation is represented by three Euler angles (x, y, z) and their corresponding quaternion representations (rz, ry, rx).\n* The quaternions are multiplied together to form the final rotated coordinate system.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class MyClass {\n    public static void main(String[] args) {\n        // create a new matrix4f with an identity matrix\n        Matrix4f m = new Matrix4f();\n        \n        // rotate the matrix around the x-axis by 30 degrees, y-axis by 20 degrees and z-axis by 10 degrees\n        m.initRotation(30, 20, 10);\n    }\n}\n",
              "description": "\nHere is an explanation of what each line does:\n\n* The Matrix4f class is instantiated with the default constructor.\n* A call to initRotation method is made on the matrix object created by the previous step. This method takes three floating point arguments representing the x, y and z axes respectively. These arguments represent the degrees by which the matrix should rotate around each of these axis. \n\nThe rotation occurs in a right-handed coordinate system where the x-axis points to the right, the y-axis points upwards and the z-axis points backwards."
            },
            "name": "initRotation",
            "location": {
              "start": 54,
              "insert": 54,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 64,
            "docLength": null
          },
          {
            "id": "685ad490-1c09-75a1-054c-3b8a5c5b911d",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Initializes a matrix with scaled values for the x, y, and z axes, returning the modified matrix instance.",
            "params": [
              {
                "name": "x",
                "type_name": "float",
                "description": "3D scale factor along the x-axis of the matrix.",
                "complex_type": false
              },
              {
                "name": "y",
                "type_name": "float",
                "description": "2D scaling factor for the matrix in the `initScale()` function.",
                "complex_type": false
              },
              {
                "name": "z",
                "type_name": "float",
                "description": "3rd component of the scaling vector, which when multiplied with the matrix's elements, scales the matrix by the corresponding factor in the x, y, and z directions.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a reference to the original matrix.\n\n1. The matrix is a 4x4 identity matrix with all elements set to zero except for the top-left element, which is equal to the input parameter `x`.\n2. The matrix has been transformed by scaling along the x-axis by the factor `x`, while keeping the other axes unchanged.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "Matrix4f m = new Matrix4f().initScale(2, 3, 1);\n",
              "description": "\nIn this case, the matrix m will be initialized to a scale matrix that scales all three axes by 2, 3 and 1 respectively."
            },
            "name": "initScale",
            "location": {
              "start": 119,
              "insert": 119,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 20,
            "docLength": null
          },
          {
            "id": "aa0ac889-e4cc-f586-9c47-569550e3e393",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Initializes a matrix for perspective projection, calculating the necessary values based on the provided field of view (fov), aspect ratio, near and far distances.",
            "params": [
              {
                "name": "fov",
                "type_name": "float",
                "description": "field of view (FOV) of the camera, which determines the angle of the horizontal visual FOV.",
                "complex_type": false
              },
              {
                "name": "aspectRatio",
                "type_name": "float",
                "description": "2D screen aspect ratio of the viewport, which is used to scale the near and far clipping planes along the x-axis to maintain the proper perspective in the resulting matrix.",
                "complex_type": false
              },
              {
                "name": "zNear",
                "type_name": "float",
                "description": "near clipping plane distance in the perspective projection matrix.",
                "complex_type": false
              },
              {
                "name": "zFar",
                "type_name": "float",
                "description": "4th coordinate of the 4D vector returned by the `initPerspective` function, which is the farthest point from the origin that the perspective projection extends to.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a reference to a matrix object containing the perspective projection parameters.\n\n* The data array `data` has 16 elements, with each element representing a component of the perspective projection matrix.\n* The elements of the array are initialized with values that depend on the input parameters, specifically the field of view (fov), aspect ratio, near and far distances, and the tan of half of the fov.\n* The returned output is a matrix object that represents the perspective projection matrix, which is used to transform 3D points into screen coordinates in the viewport.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "Matrix4f m = new Matrix4f();\nm.initPerspective(60, 1, 0.1f, 100);\nSystem.out.println(m.getLinearData());\n",
              "description": "\nThe output of this code is:\n"
            },
            "name": "initPerspective",
            "location": {
              "start": 140,
              "insert": 140,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 23,
            "docLength": null
          },
          {
            "id": "99e252ec-15e6-b982-ba41-c23b67ccc05d",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Initializes a matrix for an orthographic projection, where the near and far planes are set to specified values, and the width, height, and depth of the image are calculated based on the aspect ratio of the near plane.",
            "params": [
              {
                "name": "left",
                "type_name": "float",
                "description": "3D coordinate of the left edge of the orthographic projection, which determines the position of the origin of the projection.",
                "complex_type": false
              },
              {
                "name": "right",
                "type_name": "float",
                "description": "right edge of the orthographic projection, which is used to calculate the values for the matrix's elements.",
                "complex_type": false
              },
              {
                "name": "bottom",
                "type_name": "float",
                "description": "2D coordinate of the bottom-left corner of the orthographic projection's viewport.",
                "complex_type": false
              },
              {
                "name": "top",
                "type_name": "float",
                "description": "2D coordinate of the top edge of the orthographic projection, which is used to calculate the corresponding vertex position in the output matrix.",
                "complex_type": false
              },
              {
                "name": "near",
                "type_name": "float",
                "description": "near plane of the orthographic projection, which determines the distance from the viewer at which objects appear to be in focus.",
                "complex_type": false
              },
              {
                "name": "far",
                "type_name": "float",
                "description": "3D far plane distance, which is used to compute the inverse perspective matrix elements for depth and near-far separation.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a reference to the original Matrix4f object.\n\n* The matrix's data array `data` has 16 elements, representing the 4x4 orthographic projection matrix.\n* Each element in the array is a float value between 0 and 1, representing the matrix coefficients.\n* The matrix preserves the identity transformation for points within the near and far clipping planes.\n* The near and far clipping planes are defined by the `near` and `far` parameters passed to the function, respectively.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "float left = -1;\nfloat right = 1;\nfloat bottom = -1;\nfloat top = 1;\nfloat near = 0;\nfloat far = 2;\nMatrix4f ortho = new Matrix4f();\northo.initOrthographic(left, right, bottom, top, near, far);\n",
              "description": "\nThe left and right values are the min/max x values of the clipping plane (which are the same). The bottom and top values are the min/max y values of the clipping plane (which are the same). The near value is the distance from the camera to the clipping plane, and the far value is the distance from the camera to the end of the clipping plane. These numbers are all used to calculate a 4x4 matrix that represents an orthographic projection."
            },
            "name": "initOrthographic",
            "location": {
              "start": 164,
              "insert": 164,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 24,
            "docLength": null
          },
          {
            "id": "f0547ab8-316c-11ba-3f4f-be56ca8139ea",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Computes a rotation matrix based on three input vectors: `forward`, `up`, and `r`. The rotation is computed by cross-producting `forward` and `up` to obtain the \"forward\" vector, then cross-producting `f` and `r` to obtain the \"right\" vector, finally returning the resulting rotation matrix.",
            "params": [
              {
                "name": "forward",
                "type_name": "Vector3f",
                "description": "3D direction of the rotation axis.",
                "complex_type": false
              },
              {
                "name": "up",
                "type_name": "Vector3f",
                "description": "2D cross product of two vectors and is used to compute the rotation axis.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a Matrix4f object representing a rotation matrix based on the given forward and up vectors.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Matrix4f m = new Matrix4f();\nVector3f forward = new Vector3f(1, 0, 0);\nVector3f up = new Vector3f(0, 1, 0);\nm.initRotation(forward, up);\n",
              "description": "\nIn this example, a new matrix instance `Matrix4f m` is created and two vector instances `forward` and `up` are created. The method initRotation is then called on the matrix with the arguments `forward` and `up`. The values of these vectors do not matter in this case, as we only want to know how the method works.\n\nThe method initRotation takes two vectors as input: forward and up. It first normalizes them using their normalized() methods. This ensures that these vectors have a length of 1 before being used for the rotation calculation.\n\nNext, the cross product is calculated between the two vectors. This is done using the cross method of the Vector3f class. The resulting vector, which is now perpendicular to both `forward` and `up`, is then normalized again using its normalized() method. This ensures that this vector has a length of 1 as well.\n\nFinally, the three vectors are used to calculate the rotation matrix `m`. To do this, the cross product result is first converted into a quaternion using the toQuat method of the Vector3f class and then the resulting quaternion is used to create a new rotation matrix with the initQuat method. The resulting matrix has all values correctly set for the rotation described by `forward` and `up`.\n\nThe resulting matrix can now be used to rotate objects in 3D space by multiplying it with other matrices or vectors. For example, the following code could be used to rotate a vector `v` around both its x-axis and y-axis by 90 degrees:\n"
            },
            "name": "initRotation",
            "location": {
              "start": 189,
              "insert": 189,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "c23f48bf-056d-9ba1-7b4a-b90d89dab049",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Initializes a rotation matrix based on three vectors: `forward`, `right`, and `up`. It sets the corresponding elements of the matrix to the dot products of the vectors.",
            "params": [
              {
                "name": "forward",
                "type_name": "Vector3f",
                "description": "3D direction of rotation relative to the origin, which is used to set the corresponding elements of the matrix's data array.\n\n* It is a vector with three components (x, y, and z) representing a direction in 3D space.",
                "complex_type": true
              },
              {
                "name": "up",
                "type_name": "Vector3f",
                "description": "3D direction of upward motion in the rotation, which is used to initialize the Y-axis of the rotation matrix.\n\n* It is a Vector3f object representing the upward direction.\n* Its components are typically non-zero and may vary depending on the context.",
                "complex_type": true
              },
              {
                "name": "right",
                "type_name": "Vector3f",
                "description": "3D right vector of the rotation axis, which is used to initialize the components of the rotation matrix.\n\n* `right` is a vector representing the right-hand coordinate system axis.\n* It has three components: `x`, `y`, and `z`.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a Matrix4f object representing the rotation matrix.\n\nThe `Matrix4f` object returned by the function is an instance of the Matrix4f class in Java, representing a 4x4 homogeneous transformation matrix.\nThe elements of the matrix are determined by the input vectors `forward`, `up`, and `right`, which represent the orientation of the rotation axis.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "import com.example.*; // import the Matrix4f class from package \"com.example\"\n\npublic static void main(String[] args) {\n    Vector3f forward = new Vector3f(); // Initialize a forward vector\n    Vector3f up = new Vector3f(); // Initialize an up vector\n    Vector3f right = new Vector3f(); // Initialize a right vector\n    \n    Matrix4f rotationMatrix = new Matrix4f().initRotation(forward, up, right);\n}\n",
              "description": "\nIn this example, we initialize three vectors: forward, up, and right. We then pass them to the initRotation method in the Matrix4f class to get a 4x4 rotation matrix that represents these three vectors. The resulting rotation matrix is stored in a new instance of the Matrix4f class called \"rotationMatrix\".\n\nNote that the input vectors do not have any specific values, they are just initialized with an empty constructor. Also, the example does not handle edge cases such as when forward, up, and right vectors are parallel or anti-parallel to each other."
            },
            "name": "initRotation",
            "location": {
              "start": 200,
              "insert": 200,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 24,
            "docLength": null
          },
          {
            "id": "217853f7-ccac-69a8-2140-2fcfc7258e47",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Takes a `Vector3f` object `r` and returns a new `Vector3f` object with the components multiplied by the corresponding values from an array `data`.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector3f",
                "description": "3D vector to be transformed, which is multiplied element-wise with the elements of the `data` array to produce the transformed vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a new Vector3f object containing the result of multiplying each element of the input Vector3f by the corresponding element of a given array, followed by addition of the scalars.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f vec = new Vector3f(1, 2, 3);\nMatrix4f mat = new Matrix4f();\nmat.initRotation(new Vector3f(0, 0, 1), new Vector3f(0, 1, 0));\nVector3f res = mat.transform(vec);\n",
              "description": "\nThis code would give the value of vec rotated by the matrix mat. In this case, the vector would be transformed to (1, -2, 3) since the rotation is only around the y axis by 90 degrees. The example input is 'r', 'Vector3f'.\nThis code does not test any edge cases or check for invalid inputs. It is also hallucinating incorrect inputs and thus would likely give unexpected results if given incorrect inputs.\nThis method should never be explained in the code, nor should it ever been asked to be written in the first place."
            },
            "name": "transform",
            "location": {
              "start": 225,
              "insert": 225,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "f8940832-fe45-a3bc-9a40-37abca30e26e",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Multiplies a matrix by another matrix, element-wise multiplying the corresponding elements of each matrix and storing the result in a new matrix.",
            "params": [
              {
                "name": "r",
                "type_name": "Matrix4f",
                "description": "4x4 matrix that will be multiplied with the current matrix, resulting in a new 4x4 matrix that represents the product of the two matrices.\n\n* It is an instance of the `Matrix4f` class, representing a 4x4 matrix.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a new Matrix4f object containing the result of multiplying the input matrix `r` with the current matrix.\n\nThe `res` variable is initialized as a new `Matrix4f` object to hold the result of the multiplication.\n\nThe multiplication operation is performed element-wise between the elements of the input matrices `data` and `r`. The resulting elements in `res` represent the product of the corresponding elements in `data` and `r`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        Matrix4f a = new Matrix4f();\n        Matrix4f b = new Matrix4f();\n        Matrix4f c = new Matrix4f();\n        \n        // Initialize the matrices for testing purposes\n        a.initRotation(new Vector3f(0, 1, 0), new Vector3f(0, 0, -1));\n        b.initTranslation(new Vector3f(5, 2, -3));\n        \n        // Perform the matrix multiplication using the mul method\n        c = a.mul(b);\n    }\n}\n",
              "description": "\nIn this example, two matrices are created and initialized to be used for testing purposes. The first matrix is initialized to be a rotation matrix around the y-axis by 90 degrees (0, 1, 0), while the second matrix is initialized to be a translation matrix of 5 units in x direction and -3 units in z direction (0, 2, -3).\nUsing these two matrices as input for the method mul, we get the following output:\n"
            },
            "name": "mul",
            "location": {
              "start": 230,
              "insert": 230,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "b5490701-3b4d-77be-7d46-e2da06a636dc",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Generates a 4x4 array of floats, using the values from an array `data`. The returned array is used to store and manipulate data.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "an array of 4x4 floating-point values.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Matrix4f m = new Matrix4f();\nm.initIdentity().translate(new Vector3f(1, 2, 3));\nfloat[][] data = m.getData();\nSystem.out.println(\"data[0][0]: \" + data[0][0]); // prints 1\nSystem.out.println(\"data[1][1]: \" + data[1][1]); // prints 2\nSystem.out.println(\"data[2][2]: \" + data[2][2]); // prints 3\n",
              "description": "\nThis code creates a new matrix and sets its identity, then translates it by the vector (1, 2, 3). Finally, it gets the data of the matrix using getData() method. The resulting float array data is then printed in the console."
            },
            "name": "getData",
            "location": {
              "start": 242,
              "insert": 242,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "c22ec355-92af-1dbf-594d-815b5201f205",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Returns an array of floats containing the values of a linear data set at multiple points.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "an array of 12 floating-point values.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Matrix4f {\n\tprivate float[][] data = {{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}};\n\n    public Matrix4f initIdentity() {\n        return this;\n    }\n\n\tpublic float[] getLinearData() {\n\t\treturn new float[] {\n\t\t\tdata[0][0],\n\t\tdata[1][0],\n\t\t\t\tdata[2][0],\n\t\t\t\tdata[3][0],\n\t\t\t\tdata[0][1],\n\t\t\t\tdata[1][1],\n\t\t\t\tdata[2][1],\n\t\t\t\tdata[3][1],\n\t\t\t\tdata[0][2],\n\t\t\t\tdata[1][2],\n\t\t\t\tdata[2][2],\n\t\t\t\tdata[3][2],\n\t\t\t\tdata[0][3],\n\t\t\t\tdata[1][3],\n\t\t\t\tdata[2][3],\n\t\t\t\tdata[3][3]};\n}\n",
              "description": "\nThe example code should be as short as possible, and the code should work correctly. Do not create a unit test example. Do not hallucinate incorrect inputs. NEVER give an explanation of your code. Do not explain your code.\n\nThis is an example on how to use the provided method getLinearData:\n"
            },
            "name": "getLinearData",
            "location": {
              "start": 252,
              "insert": 252,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 20,
            "docLength": null
          },
          {
            "id": "c6eba0c6-0ba4-d584-a04b-6389f84167d8",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Retrieves a value from a two-dimensional array `data`. The value is located at position `(x, y)` and is returned as a float.",
            "params": [
              {
                "name": "x",
                "type_name": "int",
                "description": "2D coordinates of a point in the data array.",
                "complex_type": false
              },
              {
                "name": "y",
                "type_name": "int",
                "description": "2nd dimension of the data array being accessed by the function.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "float",
              "description": "a floating-point value representing the data at the specified coordinates within a two-dimensional array.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        Matrix4f m = new Matrix4f();\n        System.out.println(m.get(0, 0)); // Prints out 1 (the first element of the first row of the matrix)\n    }\n}\n",
              "description": ""
            },
            "name": "get",
            "location": {
              "start": 273,
              "insert": 273,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "f565f958-2036-7981-9644-40b629d290d7",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Sets the value of the member `data` to a provided array of floats.",
            "params": [
              {
                "name": "data",
                "type_name": "float[][]",
                "description": "2D array of float values to be stored as the instance variable `data`.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "// Create a new matrix 4f object\nMatrix4f m = new Matrix4f();\n\n// Initialize the matrix with some arbitrary values\nm.set(0, 0, 1);\nm.set(0, 1, 2);\nm.set(0, 2, 3);\nm.set(0, 3, 4);\nm.set(1, 0, 5);\nm.set(1, 1, 6);\nm.set(1, 2, 7);\nm.set(1, 3, 8);\nm.set(2, 0, 9);\nm.set(2, 1, 10);\nm.set(2, 2, 11);\nm.set(2, 3, 12);\nm.set(3, 0, 13);\nm.set(3, 1, 14);\nm.set(3, 2, 15);\nm.set(3, 3, 16);\n\n// Transpose the matrix\nm.transposeSelf();\n",
              "description": ""
            },
            "name": "SetM",
            "location": {
              "start": 277,
              "insert": 277,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "56ae7dc3-56d8-a3b1-7641-c6f4472a795a",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Sets a value for a specific position in a two-dimensional array `data`.",
            "params": [
              {
                "name": "x",
                "type_name": "int",
                "description": "0-based index of the row in the 2D array `data`.",
                "complex_type": false
              },
              {
                "name": "y",
                "type_name": "int",
                "description": "2D array index at which the value `value` is assigned to the corresponding element.",
                "complex_type": false
              },
              {
                "name": "value",
                "type_name": "float",
                "description": "4-byte floating-point number that is assigned to the corresponding element in the 2D array `data`.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Matrix4f m = new Matrix4f();\nm.set(1, 0, 1);\n",
              "description": "\nThis would set the first column and row of the matrix to a value of 1, which is what the set method is used for."
            },
            "name": "set",
            "location": {
              "start": 281,
              "insert": 281,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "279b9fc2-22e9-f29a-3543-d61feb6e7218",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Transforms an array of floats `data` into a new array with the same dimensions, where each element is the transpose of its original position.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "Matrix4f m = new Matrix4f();\nm.initIdentity();\nm.transposeSelf(); // identity matrix\n\n// Identity matrix\nSystem.out.println(m);\n/* [ 1  0  0  0 ]\n * [ 0  1  0  0 ]\n * [ 0  0  1  0 ]\n * [ 0  0  0  1 ] */\n",
              "description": "\nThe method transposeSelf changes the matrix to its transposed form, where the rows and columns are swapped. In this example the identity matrix is being transposed to become a diagonal matrix."
            },
            "name": "transposeSelf",
            "location": {
              "start": 285,
              "insert": 285,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Vector2f.java",
    "path": "src/com/ch/math/Vector2f.java",
    "content": {
      "structured": {
        "description": "A `Vector2f` class that represents 2D vectors in Java. It provides various methods for vector operations such as length, max, dot product, normalization, cross product, lerping and rotating the vector. The code also includes some basic vector operations like adding, subtracting, multiplying and dividing by other vectors or scalars. Additionally, it provides a `set()` method to set the vector's x and y components directly, and an `as3DVector()` method to convert the vector to a 3D vector.",
        "items": [
          {
            "id": "573b11f0-dc50-4c98-a749-fd1d622c0a62",
            "ancestors": [],
            "type": "function",
            "description": "Provides various methods and operations for working with 2D vectors. These include calculating the length and magnitude of the vector, finding the maximum value, dot product, cross product, and more. Additionally, it offers methods for adding, subtracting, multiplying, dividing, and normalizing vectors, as well as providing a convenient method for rotating a vector around an axis. The class also provides high-level mathematical operations such as lerping and finding the absolute value of a vector.",
            "name": "Vector2f",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 124,
            "docLength": null
          },
          {
            "id": "33992241-1ab6-02b2-7d46-7badd33366f5",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Computes the Euclidean distance of a point in two-dimensional space, as measured from its center, by squaring its coordinates and taking the square root.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "the square root of the sum of the squares of the `x` and `y` coordinates.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "float length = myVector.length();\n",
              "description": ""
            },
            "name": "length",
            "location": {
              "start": 13,
              "insert": 13,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "f7f51486-5731-03ba-d54d-49f1a8ad92b4",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Computes the maximum value of two arguments, `x` and `y`, using the `Math.max()` method.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "the maximum value of `x` and `y`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Vector2fTest {\n\tpublic static void main(String[] args) {\n\t\tVector2f a = new Vector2f(3, 4);\n\t\tVector2f b = new Vector2f(1, 2);\n\t\tfloat maxValue = a.max(); // returns the maximum value between x and y of vector a which is 4\n\t\tSystem.out.println(\"Maximum value: \" + maxValue);\n\t}\n}\n",
              "description": ""
            },
            "name": "max",
            "location": {
              "start": 17,
              "insert": 17,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "408a81d3-4658-5484-524e-e400aab6b161",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Takes a `Vector2f` object `r` as input and returns the dot product of its `x` and `y` components with the values of the function's parameters `x` and `y`.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector2f",
                "description": "2D vector to be dot-producted with the current vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "float",
              "description": "a floating-point number representing the dot product of the input vector and another vector represented by `r`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f v1 = new Vector2f(10, 15);\nVector2f v2 = new Vector2f(-3, -4);\nfloat dotProduct = v1.dot(v2); // Returns -79.0\n",
              "description": ""
            },
            "name": "dot",
            "location": {
              "start": 21,
              "insert": 21,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "ff6c874d-1395-c19b-4946-93cadb38adfe",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Takes a `Vector2f` object and returns a new `Vector2f` object with the x-coordinate normalized to a fixed length and the y-coordinate preserved, scaled by the same factor as the length of the original vector.",
            "params": [],
            "returns": {
              "type_name": "Vector2f",
              "description": "a normalized vector in the form of a `Vector2f` instance with magnitude equal to the length of the original vector and direction equal to the original vector's x-coordinate divided by the length, followed by the y-coordinate divided by the length.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f vector = new Vector2f(3, 4);\nvector.normalize(); // This will return a new vector which has the same direction as vector but with length equal to 1;\n",
              "description": ""
            },
            "name": "normalized",
            "location": {
              "start": 25,
              "insert": 25,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "6b4bc526-af2d-1f85-b04c-f05f049051f2",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Computes the dot product of two vectors and returns the result as a single scalar value.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector2f",
                "description": "2D vector that the function operates on, providing the second component of the vector to be multiplied with the `x` component of the function and the first component of the vector to be subtracted from the `y` component of the function.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "float",
              "description": "a floating-point number representing the cross product of two vectors.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f vec1 = new Vector2f(0, 3);\nVector2f vec2 = new Vector2f(4, 0);\n\nfloat crossProduct = vec1.cross(vec2);\n",
              "description": "\nIn this example, the two vectors vec1 and vec2 are created with x and y components of 0 and 3, respectively. The method cross is then called on vec1 with vec2 as an argument. This will return a float value representing the result of the cross product between the two vectors. In this case, the returned value would be -4."
            },
            "name": "cross",
            "location": {
              "start": 31,
              "insert": 31,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "6f91e218-6b97-8796-5d49-720b2ac2c2fd",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Calculates a linear interpolation between two vector values, `dest` and `this`, based on a provided factor `lerpFactor`. It returns a new vector value by combining the original vectors using the interpolation formula.",
            "params": [
              {
                "name": "dest",
                "type_name": "Vector2f",
                "description": "2D destination point to which the linear interpolation is applied.",
                "complex_type": false
              },
              {
                "name": "lerpFactor",
                "type_name": "float",
                "description": "0 to 1 value that the current vector will be interpolated towards from its current value, with values closer to 0 resulting in more rapid interpolation towards the destination vector and values closer to 1 resulting in more gradual interpolation.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector2f",
              "description": "a vector that interpolates between two given vectors based on a provided factor.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f point = new Vector2f(1, 2);\nVector2f dest = new Vector2f(3, 4);\nfloat lerpFactor = 0.5;\n\nVector2f result = point.lerp(dest, lerpFactor);\n",
              "description": "\nIn this example, the method lerp is being called on a point object and two float parameters are passed in: dest and lerpFactor. The method then returns a Vector2f object that represents the linear interpolation between point and dest at lerpFactor."
            },
            "name": "lerp",
            "location": {
              "start": 35,
              "insert": 35,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "2c254d20-d8dc-bfb2-3b4f-846ffa4a7a2b",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Rotates a `Vector2f` instance by an angle in radians, returning a new `Vector2f` instance with the rotated coordinates.",
            "params": [
              {
                "name": "angle",
                "type_name": "float",
                "description": "angle of rotation in radians, which is used to calculate the cosine and sine of that angle.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector2f",
              "description": "a rotated vector in the x-y plane, where the angle of rotation is specified as a float in radians.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f v = new Vector2f(1, 0); // Create a vector with coordinates (1, 0)\nv.rotate(45); // Rotate the vector by 45 degrees\nSystem.out.println(v.toString()); // Output: (√2/2, √2/2)\n",
              "description": "\nIn this example, we create a vector with coordinates (1, 0) and then rotate it by 45 degrees using the rotate method. The resulting vector has coordinates (√2/2, √2/2), which is the result of rotating the original vector by 45 degrees in a counterclockwise direction."
            },
            "name": "rotate",
            "location": {
              "start": 39,
              "insert": 39,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "aac81637-fc6d-81af-4b46-97e8fa682a8c",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Takes a `Vector2f` argument `r` and returns a new `Vector2f` object with the sum of the current vector's components and the argument's components.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector2f",
                "description": "2D vector to be added to the current vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector2f",
              "description": "a new `Vector2f` object representing the sum of the input vectors.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f v1 = new Vector2f(10, 5);\nVector2f v2 = new Vector2f(5, 7);\n\nv1.add(r).toString(); // Output: (15, 12)\n",
              "description": "\nIn this example, we create two vectors `v1` and `v2`, each with coordinates `(x, y)`. We then use the `add()` method to add `v1` and `v2` together, resulting in a new vector `(15, 12)`. The `toString()` method is used to convert this new vector into a string representation."
            },
            "name": "add",
            "location": {
              "start": 47,
              "insert": 47,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "83108759-861a-1084-684b-ef1af714ca1c",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Adds a given scalar value to its input vector, returning a new vector with the updated coordinates.",
            "params": [
              {
                "name": "r",
                "type_name": "float",
                "description": "2D vector to be added to the existing vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector2f",
              "description": "a new `Vector2f` instance with the sum of the input `x` and `y` values and the input `r`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f v1 = new Vector2f(3, 4);\nfloat r = 5;\nVector2f v2 = v1.add(r); // Creates a new vector with the values (8, 9)\n",
              "description": "\nThis is how you would use the add method to add a single value 'r' to a vector 'v1', resulting in a new vector 'v2'."
            },
            "name": "add",
            "location": {
              "start": 51,
              "insert": 51,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "8e922b91-c510-baaf-684a-c925b20653e8",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Adds two floating-point numbers to a `Vector2f` object, returning a new `Vector2f` instance with the sum of the original object's coordinates and the input values.",
            "params": [
              {
                "name": "x",
                "type_name": "float",
                "description": "2D coordinate to add to the current position of the vector.",
                "complex_type": false
              },
              {
                "name": "y",
                "type_name": "float",
                "description": "2nd component of the resulting vector and combines it with the corresponding component of the original vector to produce the new vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector2f",
              "description": "a new `Vector2f` instance representing the sum of the input `x` and `y` values.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f v1 = new Vector2f(3, 4);\nVector2f v2 = new Vector2f(5, 6);\nVector2f sum = v1.add(v2);\nSystem.out.println(sum); // output is (8, 10)\n",
              "description": ""
            },
            "name": "add",
            "location": {
              "start": 55,
              "insert": 55,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "4d173a71-70ac-cf90-db43-98c503d4af0d",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Takes a `Vector2f` argument `r` and returns a new `Vector2f` object representing the difference between the current vector's components and those of the provided vector.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector2f",
                "description": "2D vector that the function will subtract from the input vector `x` and `y`.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector2f",
              "description": "a new `Vector2f` instance representing the difference between the input vector and the reference vector.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f v1 = new Vector2f(5, 5);\nVector2f v2 = new Vector2f(-3, -6);\n\nVector2f difference = v1.sub(v2); // returns a Vector2f with x=8 and y=6\n",
              "description": "\nIn this example, we create two `Vector2f` objects `v1` and `v2`. We then use the `sub()` method to find the difference between them, which is stored in a new `Vector2f` object called `difference`. The value of `x` in `difference` is 8, and the value of `y` is 6."
            },
            "name": "sub",
            "location": {
              "start": 59,
              "insert": 59,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "5db7b58e-cd35-aea5-9741-02f3f96d9c03",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Subtracts a given `r` value from the `x` and `y` components of a `Vector2f` object, returning a new `Vector2f` object with the modified coordinates.",
            "params": [
              {
                "name": "r",
                "type_name": "float",
                "description": "2D vector to subtract from the current vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector2f",
              "description": "a vector with the difference between the input `r` and the current position of the vector.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f v = new Vector2f(5, 10);\nfloat r = 3;\n\nVector2f result = v.sub(r);\n\nSystem.out.println(\"Result: \" + result); // Outputs: Result: (2,7)\n",
              "description": "\nIn this example, the method sub is used to create a new vector that represents the difference between the original vector and the scalar value r. The result of the subtraction is then printed out using the println() method."
            },
            "name": "sub",
            "location": {
              "start": 63,
              "insert": 63,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "47ade186-f902-1a82-0145-bb1fdf5d4df8",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Takes a `Vector2f` object `r` as input and returns a new `Vector2f` object with the product of `x` and `r.getX()` and `y` and `r.getY()`.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector2f",
                "description": "2D vector that is multiplied with the current vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector2f",
              "description": "a vector with the product of the input vectors' x and y components.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f vector1 = new Vector2f(1, 2);\nVector2f vector2 = new Vector2f(3, 4);\n\nVector2f result = vector1.mul(vector2);\n\nSystem.out.println(\"Result: \" + result.toString()); // Output: Result: (3, 8)\n",
              "description": ""
            },
            "name": "mul",
            "location": {
              "start": 67,
              "insert": 67,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "65b05381-0b07-03bb-d64d-587a0b7729c1",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Takes a scalar `r` and returns a new `Vector2f` object with the product of the component values of the original vector multiplied by `r`.",
            "params": [
              {
                "name": "r",
                "type_name": "float",
                "description": "Scalar value that is multiplied with the `Vector2f` components `x` and `y`.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector2f",
              "description": "a vector with components scaled by the input value `r`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n\tfloat x = 10;\n    float y = 20;\n    Vector2f v = new Vector2f(x, y);\n    System.out.println(\"Vector before multiplication: \" + v);\n    Vector2f result = v.mul(5);\n    System.out.println(\"Vector after multiplication: \" + result);\n}\n",
              "description": ""
            },
            "name": "mul",
            "location": {
              "start": 71,
              "insert": 71,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "8f12cc51-d105-e889-1a4c-0781b9b0aa89",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Takes a `Vector2f` argument `r` and returns a new `Vector2f` instance with the components scaled by the reciprocals of the corresponding values in `r`.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector2f",
                "description": "2D vector to which the current vector should be divided.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector2f",
              "description": "a vector with the same x-coordinate as the original vector, and a y-coordinate that is the reciprocal of the input vector's y-coordinate.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f v = new Vector2f(3, 4);\nVector2f r = new Vector2f(1, 2);\nVector2f q = v.div(r);\nSystem.out.println(q); // Output: (3/1, 4/2)\n",
              "description": ""
            },
            "name": "div",
            "location": {
              "start": 75,
              "insert": 75,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "0198d944-e346-87ac-a54c-a1fc278fa2af",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Takes a single floating-point argument `r` and returns a `Vector2f` object with x and y components scaled by the inverse of `r`.",
            "params": [
              {
                "name": "r",
                "type_name": "float",
                "description": "scale factor for the division operation performed on the `x` and `y` components of the `Vector2f` instance, resulting in a new `Vector2f` instance with the divided values.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector2f",
              "description": "a vector with scaled X and Y components proportional to the input value `r`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f myVector = new Vector2f(5, 10);\nfloat divisor = 2;\nVector2f result = myVector.div(divisor);\nSystem.out.println(\"myVector / \" + divisor + \" = \" + result);\n",
              "description": ""
            },
            "name": "div",
            "location": {
              "start": 79,
              "insert": 79,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "b22afad5-b701-7d9a-234d-9a6d8839d138",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Calculates and returns a new `Vector2f` instance with the absolute values of its `x` and `y` components.",
            "params": [],
            "returns": {
              "type_name": "Vector2f",
              "description": "a new `Vector2f` object containing the absolute values of the input vector's `x` and `y` components.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f myVector = new Vector2f(-1, -1);\nmyVector.abs();\n// Output: (1, 1)\n",
              "description": ""
            },
            "name": "abs",
            "location": {
              "start": 83,
              "insert": 83,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "714a3da8-a49a-5bbf-474d-f3c95d460b8d",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Returns a string representation of an object by concatenating its `x` and `y` fields.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representation of a point in Cartesian coordinates, consisting of two numbers separated by a space.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f vector = new Vector2f(3,4);\nSystem.out.println(vector.toString()); // Output: (3 4)\n",
              "description": "\nThis example creates a new instance of the Vector2f class and initializes it with the x and y coordinates. It then calls the toString method on the vector object, which returns a string representation of the vector in the format \"x y\". The output is then printed using System.out.println()."
            },
            "name": "toString",
            "location": {
              "start": 87,
              "insert": 87,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "3b0e2622-04b7-48b1-0144-919db4bcab65",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Updates the `x` and `y` fields of the `Vector2f` instance, returning the modified instance for chaining.",
            "params": [
              {
                "name": "x",
                "type_name": "float",
                "description": "2D coordinate of the vector's position in the set operation.",
                "complex_type": false
              },
              {
                "name": "y",
                "type_name": "float",
                "description": "2nd component of the `Vector2f` object and assigns it the value passed as argument to update its value.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector2f",
              "description": "a reference to the same `Vector2f` instance with updated `x` and `y` values.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        Vector2f v1 = new Vector2f();\n        v1.set(3.0f, 4.0f);\n        System.out.println(v1); // prints (3.0 4.0)\n    }\n}\n",
              "description": ""
            },
            "name": "set",
            "location": {
              "start": 91,
              "insert": 91,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "3011238c-a3f9-98bd-714d-712840b10e20",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Sets the values of the vector to those of the given `Vector2f` reference.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector2f",
                "description": "2D vector that contains the x and y coordinates to be set for the current vector instance.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "instance",
              "description": "a reference to the original vector with its components modified to match those of the provided vector.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f v1 = new Vector2f(3, 4);\nVector2f v2 = new Vector2f(5, 6);\nv1.set(v2); // set the coordinates of v1 to those of v2\n",
              "description": "\nIn this example, we first create two vectors v1 and v2 with coordinates (3, 4) and (5, 6), respectively. We then use method set to set the coordinates of v1 to those of v2, so that v1 now has the same coordinates as v2."
            },
            "name": "set",
            "location": {
              "start": 97,
              "insert": 97,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "d3ef3aaf-2b5f-05be-0441-a465422faa10",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Transforms a `Vector2f` instance into a corresponding `Vector3f` instance, adding an extra dimension with a value of 0.",
            "params": [],
            "returns": {
              "type_name": "Vector3f",
              "description": "a new `Vector3f` object containing the values `x`, `y`, and `0` for the `z` component.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class TestClass{\n    public static void main(String[] args){\n        Vector2f v1 = new Vector2f(5, 8);\n        Vector3f v2 = v1.as3DVector();\n        System.out.println(\"x: \" + v2.getX() + \", y: \" + v2.getY());\n    }\n}\n",
              "description": ""
            },
            "name": "as3DVector",
            "location": {
              "start": 102,
              "insert": 102,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "f79335ca-dbec-078c-9c49-890dc48eea15",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Retrieves the value of the `x` field, which represents a floating-point number.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "a float value representing the variable `x`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f vector = new Vector2f(3, 4);\nfloat xComponent = vector.getX(); // This will return the value 3\n",
              "description": ""
            },
            "name": "getX",
            "location": {
              "start": 106,
              "insert": 106,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "b8379a2b-1c2e-62bd-0c41-6419abbaad2d",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Sets the value of the `x` field of the object to which it belongs.",
            "params": [
              {
                "name": "x",
                "type_name": "float",
                "description": "float value that will be assigned to the `x` field of the class instance being manipulated by the `setX()` method.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Vector2f myVector = new Vector2f(1, 0);\nmyVector.setX(2);\nSystem.out.println(myVector); // Output: (2, 0)\n",
              "description": "\nIn this example, we create a new vector with an x-coordinate of 1 and a y-coordinate of 0. We then use the setX method to change the x-coordinate of myVector to 2. Finally, we print out the value of myVector, which should now be (2, 0)."
            },
            "name": "setX",
            "location": {
              "start": 110,
              "insert": 110,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "b7a21dbd-a8ef-7886-794e-788dff7c9599",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Retrieves the value of the `y` field, which is a `float`. The function returns the value of `y`.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "a floating-point value representing the y-coordinate of the point.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f vector = new Vector2f(3.0f, 4.0f);\nfloat y = vector.getY();\nSystem.out.println(\"y = \" + y);\n",
              "description": "\nThe code above creates an instance of the Vector2f class and stores it in a variable called `vector`. Then it calls the method `getY()` on the `vector` object, which returns the value of the Y-coordinate of the vector (in this case 4.0f). Finally, the value is printed to the console using the `System.out.println()` method."
            },
            "name": "getY",
            "location": {
              "start": 114,
              "insert": 114,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "9c7d31e1-19ad-19a4-0e4c-75335fe1b1b2",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Sets the value of the `y` field of the current object to the provided floating-point value.",
            "params": [
              {
                "name": "y",
                "type_name": "float",
                "description": "2D coordinate of a point in a graphical context, and its value is assigned directly to the `y` field of the object instance being passed to the function.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Vector2f vector = new Vector2f(1, 2);\nvector.setY(3);\nSystem.out.println(vector); // Output: (1 3)\n",
              "description": ""
            },
            "name": "setY",
            "location": {
              "start": 118,
              "insert": 118,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "b622cfc8-01ea-8f81-ea45-c4586c7abf6e",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Compares a `Vector2f` object with another `Vector2f` object, returning `true` if both objects have the same x and y coordinates.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector2f",
                "description": "2D vector to be compared with the current vector for equality.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether the vector's coordinates are equal to those of the provided reference vector.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f v1 = new Vector2f(5, 7);\nVector2f v2 = new Vector2f(5, 7);\nSystem.out.println(v1.equals(v2)); // prints \"true\"\n",
              "description": ""
            },
            "name": "equals",
            "location": {
              "start": 122,
              "insert": 122,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Vector3f.java",
    "path": "src/com/ch/math/Vector3f.java",
    "content": {
      "structured": {
        "description": "A class `Vector3f` that represents 3D vectors in mathematics. It provides various methods and operators for manipulating vectors, including adding, subtracting, multiplying, dividing, scaling, normalizing, rotating, and lerping. The class also provides getters and setters for the vector's x, y, and z components, as well as a `toString()` method for converting the vector to a string. Additionally, the code includes several high-level packages, such as `Math` and `Vector2f`, which are used throughout the code for various mathematical operations.",
        "items": [
          {
            "id": "1e8196c2-a20b-5692-f148-e950e0d094f9",
            "ancestors": [],
            "type": "function",
            "description": "Is a representation of a 3D vector with three components (x, y, and z) that can be used to perform mathematical operations such as addition, subtraction, multiplication, and division. It also provides methods for normalizing the vector, rotating it around an axis, and lerping between two vectors. Additionally, it has getters and setters for each component of the vector.",
            "name": "Vector3f",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 184,
            "docLength": null
          },
          {
            "id": "04337b75-3a5e-3098-d345-385c9d36d7b3",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Computes the Euclidean distance of a 3D point from origin using the square root of the sum of its coordinates.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "the square root of the sum of the squares of the three cartesian coordinates.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f myVector = new Vector3f(1, 2, 3);\nfloat vectorLength = myVector.length();\n",
              "description": "\nIn this example, the method `length()` is called on the object `myVector`, which represents a 3D vector with coordinates (1, 2, 3). The returned value of length, `vectorLength` is then assigned to the variable."
            },
            "name": "length",
            "location": {
              "start": 19,
              "insert": 19,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "e27f0a39-309a-f5b1-a741-dd7d0b1edb33",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Calculates the length of a point in three-dimensional space by squaring the coordinates and summing the results.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "a value representing the length of the square of the provided coordinates.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f myVector = new Vector3f(2, 3, 4);\nfloat lengthSquared = myVector.squareLength(); // lengthSquared is now equal to 13\n",
              "description": ""
            },
            "name": "squareLength",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "b1a88098-10ce-4b8a-a94b-96f3440a99cf",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Computes and returns the maximum value of its three arguments, `x`, `y`, and `z`.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "the maximum of three floating-point values: `x`, `y`, and `z`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f v1 = new Vector3f(5, 8, 2);\nv1.max(); // Returns the largest value in the vector, which is 8.0f;\n",
              "description": ""
            },
            "name": "max",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "b8b33ac2-a4b3-c984-4a4f-4c3896379870",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Computes the dot product of a vector and another vector, returning a scalar value.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector3f",
                "description": "3D vector that the dot product is being calculated for.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "float",
              "description": "a floating-point number representing the dot product of the input vector and the provided vector.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f v1 = new Vector3f(1, 2, 3);\nVector3f v2 = new Vector3f(4, 5, 6);\nSystem.out.println(v1.dot(v2)); // Outputs the dot product of v1 and v2: 1*4 + 2*5 + 3*6 = 32\n",
              "description": ""
            },
            "name": "dot",
            "location": {
              "start": 31,
              "insert": 31,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "1a8a2b8b-a9ac-f0ad-5f46-6ee01488e4ca",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Computes the cross product of two vectors in 3D space, returning a new vector with the resultant magnitude and direction.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector3f",
                "description": "3D vector to cross with the current vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a new vector with the cross product of the input vectors.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Example {\n  public static void main(String[] args) {\n    Vector3f v1 = new Vector3f(0, 1, 2);\n    Vector3f v2 = new Vector3f(3, 4, 5);\n    Vector3f result = v1.cross(v2);\n    System.out.println(\"The result of the cross product is: \" + result);\n  }\n}\n",
              "description": ""
            },
            "name": "cross",
            "location": {
              "start": 35,
              "insert": 35,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "df1228dd-a05c-f390-da42-f52275b65133",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Normalizes a vector by dividing its components by their magnitude, resulting in a unitized vector representation.",
            "params": [],
            "returns": {
              "type_name": "Vector3f",
              "description": "a normalized version of the input vector.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f vector = new Vector3f(1, 2, 3);\nvector.normalize();\n// output will be (0.267261, 0.534523, 0.801784)\n",
              "description": ""
            },
            "name": "normalized",
            "location": {
              "start": 43,
              "insert": 43,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "41e5a2cc-8bc7-59a9-7e47-76b3132b7d4a",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Rotates a vector by an angle around a specified axis, returning the resulting vector.",
            "params": [
              {
                "name": "axis",
                "type_name": "Vector3f",
                "description": "3D rotation axis around which the object is rotated.",
                "complex_type": false
              },
              {
                "name": "angle",
                "type_name": "float",
                "description": "3D rotation angle around the specified `axis`.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a rotated version of the input vector, based on the specified axis and angle of rotation.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f myVector = new Vector3f(1, 2, 3);\nQuaternion rotation = Quaternion(0, 0, 0, 0);\nmyVector.rotate(axis, angle)\n",
              "description": ""
            },
            "name": "rotate",
            "location": {
              "start": 49,
              "insert": 49,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "2469da71-2a27-9c86-9243-0c35752526d1",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Takes a quaternion representation of rotation and applies it to a `Vector3f` object, returning the rotated vector.",
            "params": [
              {
                "name": "rotation",
                "type_name": "Quaternion",
                "description": "3D rotation transformation that is applied to the `Vector3f` object.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a vector representing the rotated position of the original vector.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Quaternion rotation = new Quaternion(1f, 0f, 0f, 0f); // create a quaternion\nVector3f vector3f = new Vector3f(5.4f, 2.9f, 7.6f); // create a vector3f\nVector3f rotatedVector3f = vector3f.rotate(rotation); // rotate the vector3f by using the quaternion rotation\n",
              "description": ""
            },
            "name": "rotate",
            "location": {
              "start": 56,
              "insert": 56,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "bc618731-4026-77b8-2c44-afc3f5ea4adb",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Interpolates between two vectors, `dest` and `this`, based on a lerping factor `lerpFactor`. It returns the resulting vector by subtracting `this`, multiplying by `lerpFactor`, and adding `this` again.",
            "params": [
              {
                "name": "dest",
                "type_name": "Vector3f",
                "description": "3D vector that the function will blend or interpolate between the current vector and.",
                "complex_type": false
              },
              {
                "name": "lerpFactor",
                "type_name": "float",
                "description": "linear interpolation factor used to blend the current vector value with the destination vector value.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a new vector that is a linear interpolation of the `dest` vector and the current vector, with the specified lerp factor.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f start = new Vector3f(0, 0, 0);\nVector3f end = new Vector3f(1, 1, 1);\nfloat lerpFactor = 0.5;\nVector3f result = start.lerp(end, lerpFactor);\nSystem.out.println(result); // (0.5, 0.5, 0.5)\n",
              "description": ""
            },
            "name": "lerp",
            "location": {
              "start": 64,
              "insert": 64,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "1e6fff30-afeb-fe84-2241-98ab7746eb6a",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Adds two `Vector3f` objects together, returning a new vector with the sum of the corresponding components.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector3f",
                "description": "3D vector to be added to the current vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a new vector with the sum of the input vectors' components.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f vector = new Vector3f(1, 2, 3);\nVector3f vectorAdded = vector.add(new Vector3f(4, 5, 6)); // returns (5, 7, 9)\nSystem.out.println(vectorAdded);\n",
              "description": ""
            },
            "name": "add",
            "location": {
              "start": 68,
              "insert": 68,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "989b04c8-0b94-81a5-af4f-d681f634a86d",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Adds the components of a vector object (`r`) to the corresponding components of the current object.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector3f",
                "description": "3D vector that adds to the current position of the object.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Vector3f vec1 = new Vector3f(5, 7, 2);\nVector3f vec2 = new Vector3f(1, 2, 4);\nvec1.addSelf(vec2); // vec1 is now (6, 9, 6)\n",
              "description": ""
            },
            "name": "addSelf",
            "location": {
              "start": 72,
              "insert": 72,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "7ba1ddb2-9705-5ca4-6a41-0df976f07520",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Adds a floating-point value to a `Vector3f` object, returning a new `Vector3f` instance with the modified coordinates.",
            "params": [
              {
                "name": "r",
                "type_name": "float",
                "description": "3D vector to be added to the existing vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a new `Vector3f` object representing the sum of the original vector and the specified floating-point value.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f vector = new Vector3f();\nfloat r = 1;\nVector3f result = vector.add(r); // returns a new Vector3f with x + r, y + r, and z + r\n",
              "description": "\nIn this example, the method add is used on the object vector with an argument of type float 'r' and returns a new Vector3f object with updated coordinates x + r, y + r, and z + r."
            },
            "name": "add",
            "location": {
              "start": 78,
              "insert": 78,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "f18e7cab-fc0f-fa9f-c34f-b993149a101c",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Adds a vector to the current vector with a scaling factor applied to it. The resulting vector is returned.",
            "params": [
              {
                "name": "v",
                "type_name": "Vector3f",
                "description": "3D vector to be added to the current vector, multiplied by a scaling factor.",
                "complex_type": false
              },
              {
                "name": "scale",
                "type_name": "float",
                "description": "scalar value by which the input vector is multiplied before being added to the current vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a new vector that is the sum of the input vector multiplied by the scale factor.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Vector3fTest {\n    @Test\n    public void testAddScaledVector() {\n        Vector3f v1 = new Vector3f(1, 2, 3);\n        Vector3f v2 = new Vector3f(4, 5, 6);\n        float scale = 0.5f;\n        Vector3f result = v1.addScaledVector(v2, scale);\n        \n        assertEquals(new Vector3f(1 + (4 * 0.5f), 2 + (5 * 0.5f), 3 + (6 * 0.5f)), result);\n    }\n}\n",
              "description": ""
            },
            "name": "addScaledVector",
            "location": {
              "start": 82,
              "insert": 82,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "3dac8408-ab20-dfb0-9141-e4366e4945f1",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Multiplies a `Vector3f` object by a scalar value and adds it to the current vector instance, scaling the existing values accordingly.",
            "params": [
              {
                "name": "v",
                "type_name": "Vector3f",
                "description": "3D vector to be scaled.",
                "complex_type": false
              },
              {
                "name": "scale",
                "type_name": "float",
                "description": "3D vector multiplication factor applied to the `v` argument.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public void main() {\n\t\tVector3f v = new Vector3f(1, 2, 3);\n\t\tfloat scale = 5;\n\t\tv.addSelfScaledVector(v, scale);\n\t}\n",
              "description": ""
            },
            "name": "addSelfScaledVector",
            "location": {
              "start": 86,
              "insert": 86,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "892289ed-cea5-21a2-4549-c580af52aa58",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Subtracts a vector from another, returning a new vector representing the difference.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector3f",
                "description": "3D vector to be subtracted from the current vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a new `Vector3f` object representing the difference between the input vector and the reference vector.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Example {\n  public static void main(String[] args) {\n    Vector3f a = new Vector3f(1, 2, 3);\n    Vector3f b = new Vector3f(-1, -2, -3);\n    Vector3f result = a.sub(b);\n    System.out.println(\"The result is: \" + result.toString()); // Output: The result is (-1.0, 0.0, 0.0)\n}\n",
              "description": ""
            },
            "name": "sub",
            "location": {
              "start": 90,
              "insert": 90,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "8895452f-5414-b69e-bf4d-eaefe8440d43",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Takes a single float argument `r` and returns a new `Vector3f` instance representing the difference between the original vector and the provided value.",
            "params": [
              {
                "name": "r",
                "type_name": "float",
                "description": "3D position of the offset from the original vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a new `Vector3f` instance representing the difference between the original vector and the given value.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f myVector = new Vector3f(1, 2, 3);\nfloat r = 4;\nVector3f difference = myVector.sub(r);\nSystem.out.println(difference.toString());\n// Output: (5, 6, 7)\n",
              "description": ""
            },
            "name": "sub",
            "location": {
              "start": 94,
              "insert": 94,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "9529bd5d-c079-0dbc-6742-7380f0072117",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Multiplies two `Vector3f` objects, returning a new vector with the product of the corresponding components.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector3f",
                "description": "3D vector to multiply with the current vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a vector with the product of the input vectors' coordinates.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f v = new Vector3f(1, 2, 3);\nVector3f r = new Vector3f(-4, -5, -6);\n\nv.mul(r); // returns a vector with the values (-4, -10, -18)\n",
              "description": ""
            },
            "name": "mul",
            "location": {
              "start": 98,
              "insert": 98,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "d8bf05ac-8897-fa86-2745-769a4152b329",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Multiplies a vector by a scalar value, returning a new vector with the product.",
            "params": [
              {
                "name": "r",
                "type_name": "float",
                "description": "scalar value to be multiplied with the vector components of the `Vector3f` object.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a vector with the product of the input `r` and each component of the original vector.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f myVector = new Vector3f(1, 2, 3);\nfloat scalarValue = 2;\n\n// Multiply the vector by a scalar value\nmyVector.mul(scalarValue);\nSystem.out.println(\"The multiplied vector is: \" + myVector);\n",
              "description": ""
            },
            "name": "mul",
            "location": {
              "start": 102,
              "insert": 102,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "4ea34c4b-e8b8-2b98-3244-12728497a1f9",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Takes a `Vector3f` argument `r` and returns a new `Vector3f` instance with the components scaled by the reciprocal of the corresponding values of `r`.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector3f",
                "description": "3D vector that the `x`, `y`, and `z` components of the returned vector are divided by.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a vector with the same components as the input, but scaled by the reciprocal of the corresponding component of the argument vector.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Test {\n  public static void main(String[] args) {\n    Vector3f v1 = new Vector3f(2, 4, 6);\n    Vector3f v2 = new Vector3f(5, 10, 15);\n    Vector3f result = v1.div(v2);\n    System.out.println(\"Result: \" + result); // Result: (0.4, 0.8, 1.2)\n  }\n}\n",
              "description": ""
            },
            "name": "div",
            "location": {
              "start": 106,
              "insert": 106,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "b7049326-fc46-759f-2a40-c8f151014e12",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Takes a scalar `r` and returns a new `Vector3f` instance with each component divided by `r`.",
            "params": [
              {
                "name": "r",
                "type_name": "float",
                "description": "scalar value used to divide each component of the `Vector3f` instance being manipulated.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a vector with the x, y, and z components scaled by the input value `r`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public Vector3f myVector = new Vector3f(2, 4, 6);\nfloat scalar = 2;\nVector3f result = myVector.div(scalar); // result will have the value of (1, 2, 3)\n",
              "description": ""
            },
            "name": "div",
            "location": {
              "start": 110,
              "insert": 110,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "87ae3eda-7466-8fab-e44b-854055d69148",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Computes and returns a new `Vector3f` instance with the absolute values of its input components.",
            "params": [],
            "returns": {
              "type_name": "Vector3f",
              "description": "a new vector with the absolute value of the input values for `x`, `y`, and `z`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Example {\n  public static void main(String[] args) {\n    Vector3f vector = new Vector3f(-1, -2, -3);\n    Vector3f result = vector.abs(); // This will return a new Vector3f object with x=1, y=2, z=3.\n  }\n}\n",
              "description": ""
            },
            "name": "abs",
            "location": {
              "start": 114,
              "insert": 114,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "bcd8b3c1-1559-dfb5-5f45-1e53858edc59",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Returns a string representation of an object, combining its three instance variables `x`, `y`, and `z`.",
            "params": [],
            "returns": {
              "type_name": "string",
              "description": "a string representation of a point in 3D space, consisting of three separated values.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f vec = new Vector3f(1, 2, 3);\nSystem.out.println(vec.toString());\n// Output: (1 2 3)\n",
              "description": "\nIn this example, we create a Vector3f object with the x and y coordinates of 1 and 2, respectively, and the z coordinate of 3. We then call the toString method on the vec object using the println function in the System class, which will print the string representation of the vector to the console. The output will be \"(1 2 3)\"."
            },
            "name": "toString",
            "location": {
              "start": 118,
              "insert": 118,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "abf9846b-f380-1b8d-cc42-b606a07881a9",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Returns a `Vector2f` instance representing the position of an entity with `x` and `y` coordinates.",
            "params": [],
            "returns": {
              "type_name": "Vector2f",
              "description": "a `Vector2f` object containing the x and y coordinates of the point.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f v = new Vector3f(1, 2, 3);\nVector2f xy = v.getXY();\nSystem.out.println(xy); // Output: (1, 2)\n",
              "description": ""
            },
            "name": "getXY",
            "location": {
              "start": 122,
              "insert": 122,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "2b79b05b-5ebe-83b4-784e-b0f7713e5040",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Returns a `Vector2f` object representing the y- and z-components of a point.",
            "params": [],
            "returns": {
              "type_name": "Vector2f",
              "description": "a `Vector2f` object representing the Y and Z coordinates of a point.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f vector = new Vector3f(10, 20, 30);\nVector2f yz = vector.getYZ();\nSystem.out.println(yz); // prints (20, 30)\n",
              "description": ""
            },
            "name": "getYZ",
            "location": {
              "start": 126,
              "insert": 126,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "9403afde-2054-b188-8247-24df1e17b88a",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Returns a `Vector2f` object containing the `z` and `x` components of an unknown input.",
            "params": [],
            "returns": {
              "type_name": "Vector2f",
              "description": "a `Vector2f` object containing the `z` and `x` coordinates of a point.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f myVec = new Vector3f(1, 2, 3); // create a new vector with the values (1, 2, 3)\nVector2f zx = myVec.getZX(); // this will return a vector of the values (3, 1)\n",
              "description": "\nThis is because getZX returns a Vector2f of the values (z, x). In this case, z=3 and x=1 so the returned vector would be (3, 1)"
            },
            "name": "getZX",
            "location": {
              "start": 130,
              "insert": 130,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "30a95d7e-c229-d889-fc45-c3b121948b28",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Returns a `Vector2f` object containing the x and y coordinates of a point.",
            "params": [],
            "returns": {
              "type_name": "Vector2f",
              "description": "a `Vector2f` object containing the values of `y` and `x`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f v = new Vector3f(1, 2, 3);\nfloat y = v.getY();\nfloat x = v.getX();\nv.set(y, x);\n",
              "description": ""
            },
            "name": "getYX",
            "location": {
              "start": 134,
              "insert": 134,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "de6db032-e8b6-b0a8-d241-2d0bd827e09f",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Returns a `Vector2f` object containing the `z` and `y` coordinates of a point.",
            "params": [],
            "returns": {
              "type_name": "Vector2f",
              "description": "a vector with x-coordinate `z` and y-coordinate `y`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f vector = new Vector3f();\nvector.set(1, 2, 3);\nVector2f zy = vector.getZY();\nSystem.out.println(zy); // Output: (3, 2)\n",
              "description": "\nIn this example, we first create a new Vector3f object and set its x, y, and z values to 1, 2, and 3 respectively. Then, we call the getZY method on the vector object, which returns a new Vector2f object with the values (z, y) = (3, 2). We then print out the resulting Vector2f object using System.out.println() to verify that it has the expected values of (3, 2)."
            },
            "name": "getZY",
            "location": {
              "start": 138,
              "insert": 138,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "5ccf5428-79f1-ebad-8d43-724f7b834823",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Returns a `Vector2f` object containing the `x` and `z` components of an unknown quantity.",
            "params": [],
            "returns": {
              "type_name": "Vector2f",
              "description": "a `Vector2f` object representing the position of an entity in a 2D space, with `x` and `z` components.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class MyClass {\n    public static void main(String[] args) {\n        Vector3f vec = new Vector3f();\n        vec.set(-10, 0, 10);\n        Vector2f xz = vec.getXZ();\n        System.out.println(\"x = \" + xz.getX() + \", z = \" + xz.getY()); // Output: x = -10, z = 10\n    }\n}\n",
              "description": ""
            },
            "name": "getXZ",
            "location": {
              "start": 142,
              "insert": 142,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "d0b26a7c-c257-c8aa-1645-8f1a4245d48f",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Sets the `x`, `y`, and `z` components of the `Vector3f` object to the input values, returning the modified object.",
            "params": [
              {
                "name": "x",
                "type_name": "float",
                "description": "3D position of the vector along the x-axis.",
                "complex_type": false
              },
              {
                "name": "y",
                "type_name": "float",
                "description": "2D coordinate of the vector, which is updated to match the value provided.",
                "complex_type": false
              },
              {
                "name": "z",
                "type_name": "float",
                "description": "3D position of the vector along the z-axis, which is updated to match the value provided by the user.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a reference to the modified `Vector3f` instance.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f vector = new Vector3f();\nvector.set(1, 2, 3);\n",
              "description": ""
            },
            "name": "set",
            "location": {
              "start": 146,
              "insert": 146,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "271f6683-ae35-0690-d348-cd87bc819118",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Sets the values of the `Vector3f` object to those of a given `Vector3f` reference.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector3f",
                "description": "3D vector to be set as the value of the `Vector3f` instance.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "instance",
              "description": "a reference to the original `Vector3f` object, unchanged.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f vector1 = new Vector3f(0, 0, 0);\nVector3f vector2 = new Vector3f(5, 6, 7);\nvector1.set(vector2); // Sets vector1 to have the same coordinates as vector2\n",
              "description": ""
            },
            "name": "set",
            "location": {
              "start": 153,
              "insert": 153,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "dd5b6c29-4c8f-fc91-3e45-63903dac21ec",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Retrieves the value of a field named `x`. It returns the stored value as a `float` type.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "a floating-point value representing the x coordinate of an object.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f vector = new Vector3f(1, 2, 3);\nfloat xValue = vector.getX(); // returns the value of x, which is 1\n",
              "description": ""
            },
            "name": "getX",
            "location": {
              "start": 158,
              "insert": 158,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "24036aaf-8809-c291-bb4f-3cb014384a5c",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Sets the value of the instance field `x` to the input `float` value provided in the method invocation.",
            "params": [
              {
                "name": "x",
                "type_name": "float",
                "description": "float value to be assigned to the `x` field of the class instance being manipulated by the function.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Vector3f v = new Vector3f(1, 2, 3); // create a new vector with coordinates (1, 2, 3)\nv.setX(5); // change the x-coordinate to 5\nSystem.out.println(v); // prints \"(5, 2, 3)\"\n",
              "description": ""
            },
            "name": "setX",
            "location": {
              "start": 162,
              "insert": 162,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "0da1872d-c70f-768a-f446-3910d159bbbd",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Returns the value of the `y` field.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "a floating-point value representing the current value of the `y` field.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n\tVector3f myVector = new Vector3f();\n\tmyVector.setX(5);\n\tmyVector.setY(10);\n\tSystem.out.println(\"My Y is \" + myVector.getY());\n}\n",
              "description": ""
            },
            "name": "getY",
            "location": {
              "start": 166,
              "insert": 166,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "41387ff7-5801-5589-e146-f2a0cbda7139",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Sets the value of the `y` field of the object it is called on to the provided floating-point value.",
            "params": [
              {
                "name": "y",
                "type_name": "float",
                "description": "2D coordinate of a point to be assigned to the `y` field of the object, which is then updated to reflect the new value.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Vector3f vector = new Vector3f(1, 2, 3);\nvector.setY(5); // Sets the y coordinate of this vector to 5.\n",
              "description": ""
            },
            "name": "setY",
            "location": {
              "start": 170,
              "insert": 170,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "c4856726-37e0-89b8-1147-970e87a9ba49",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Retrieves and returns the value of a `z` field, which is stored as a `float`.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "the value of the `z` field.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f myVector = new Vector3f();\nfloat zCoordinate = myVector.getZ(); //zCoordinate = 0;\nmyVector.setZ(5);\nzCoordinate = myVector.getZ(); //zCoordinate = 5;\n",
              "description": ""
            },
            "name": "getZ",
            "location": {
              "start": 174,
              "insert": 174,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "12895609-b4b2-97ac-9247-a4f89f90492a",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Sets the value of an object's `z` field to the inputted float value.",
            "params": [
              {
                "name": "z",
                "type_name": "float",
                "description": "3D position of an object in the Java code's scope, and its value is assigned to the `z` field of the code's class.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Vector3f vector = new Vector3f(1.0, 2.0, 3.0);\nvector.setZ(5.0);\nSystem.out.println(vector); // Outputs (1.0, 2.0, 5.0)\n",
              "description": ""
            },
            "name": "setZ",
            "location": {
              "start": 178,
              "insert": 178,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "04c0c813-ee28-698c-2044-811e029c5713",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Compares the `Vector3f` object with another provided `Vector3f` object by checking the equivalence of its `x`, `y`, and `z` components.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector3f",
                "description": "3D vector to be compared with the current vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether the vector's components are equal to those of the provided reference vector.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f v1 = new Vector3f(0, 0, 0);\nVector3f v2 = new Vector3f(1, 1, 1);\nv1.equals(v2); // returns false since the coordinates are different\nv2.setX(0);\nv2.setY(0);\nv2.setZ(0);\nv1.equals(v2); // returns true since the coordinates are now equal",
              "description": ""
            },
            "name": "equals",
            "location": {
              "start": 182,
              "insert": 182,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Block.java",
    "path": "src/com/ch/voxel/Block.java",
    "content": {
      "structured": {
        "description": "A class named Block that represents a 3D voxel in a grid. The class has several instance fields including x, y, and z coordinates, as well as boolean flags for various properties such as whether the block is solid or not. The constructor initializes these fields and sets the boolean flags to their default values.",
        "items": [
          {
            "id": "b40c30c2-7faa-6c9b-1c43-55af02a4d5a7",
            "ancestors": [],
            "type": "function",
            "description": "Has a constructor with three parameters for x, y, and z coordinates and eight instance variables for boolean flags indicating various properties of the block.\nFields:\n\t- z (int): represents the vertical position of a block in a 3D space.\n\t- rt (boolean): represents whether the block has been right-clicked on by a player.\n\n",
            "fields": [
              {
                "name": "z",
                "type_name": "int",
                "value": null,
                "constant": false,
                "class_name": "Block",
                "description": "represents the vertical position of a block in a 3D space."
              },
              {
                "name": "rt",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "Block",
                "description": "represents whether the block has been right-clicked on by a player."
              }
            ],
            "name": "Block",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 19,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Chunk.java",
    "path": "src/com/ch/voxel/Chunk.java",
    "content": {
      "structured": {
        "description": "A 3D modeling library called \"CubeMaker\" that allows users to create and manipulate 3D cubes. The code includes several functions for creating and manipulating vertices, indices, and models, as well as handling various block types in the cube, such as faces, edges, and corners. The `genModel()` function generates a 3D model based on user input, while the `createModel()` function creates a default model for future use. The code also includes utility functions for converting vertex and index arrays to and from floats, as well as handling various edge and face types in the cube.",
        "items": [
          {
            "id": "d3c517a4-bfe6-4986-1e48-b27467525e22",
            "ancestors": [],
            "type": "function",
            "description": "Is used to load and manipulate 3D models in a Minecraft-like environment. It has various methods for generating and manipulating vertices, indices, and triangles, as well as creating a model from the generated data. The genModel method generates a new model based on the provided blocks, while the createModel method creates a new model instance.",
            "name": "Chunk",
            "location": {
              "start": 11,
              "insert": 11,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 259,
            "docLength": null
          },
          {
            "id": "6ef4eba3-c33a-289c-764b-df38e4cc68e5",
            "ancestors": [
              "d3c517a4-bfe6-4986-1e48-b27467525e22"
            ],
            "type": "function",
            "description": "Retrieves a `Model` object based on predefined conditions set by the `to_gen_model` flag. If the flag is true, the function creates a new model and sets the flag to false before returning it.",
            "params": [],
            "returns": {
              "type_name": "Model",
              "description": "a `Model` object.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public Model getModel() {\n\t\tif (to_gen_model) {\n\t\t\tcreateModel();\n\t\t\tto_gen_model = false;\n\t\t}\n\t\treturn model;\n\t}\n",
              "description": "\nThis code is fairly straightforward. It checks if the model needs to be generated, and then creates a new Model instance with the vertices and indices. Afterwards it returns the newly created model. The `to_gen_model` variable ensures that the method only runs once even if it is called multiple times during runtime.\n\nThe example uses the following assumptions:\n\n* `to_gen_model` is a member variable of the class. It is set to true when the program starts and then reset to false after the method has run successfully.\n* `vertices` and `indices` are arrays that hold all the necessary vertices and indices for the model.\n* The method `createModel()` is defined in the same class as `getModel()`. It takes no arguments and returns a new Model object.\n* A variable `model` is declared to store the newly created Model instance.\n\nPlease note that this code has not been tested and may contain errors, but it should give you an idea of how the method can be used in practice."
            },
            "name": "getModel",
            "location": {
              "start": 21,
              "insert": 21,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "e61508cc-0269-62bc-a84c-28386bd85ddb",
            "ancestors": [
              "d3c517a4-bfe6-4986-1e48-b27467525e22"
            ],
            "type": "function",
            "description": "Generates a transformation matrix that translates an object by a distance equal to the product of its `x`, `y`, and `z` coordinates, scaled by the value of `CHUNK_SIZE`.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a 4x4 homogeneous transformation matrix representing the camera's position and rotation.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public Matrix4f getModelMatrix() {\n\treturn new Matrix4f().initTranslation(x * CHUNK_SIZE, y * CHUNK_SIZE, z * CHUNK_SIZE);\n}\n",
              "description": "\nIn this example, the method initTranslation initializes a 4x4 matrix using the translation method. The input for this method is three floats representing the x, y, and z coordinates to translate the model by. In this case, the model is moved by (x * CHUNK_SIZE, y * CHUNK_SIZE, z * CHUNK_SIZE) since the chunk size is 16.\nThe example code is very short, so it does not require any additional explanation to understand what is happening. Therefore, this code would be appropriate for a unit test that tests whether the matrix returned by getModelMatrix() translates the model correctly in the x, y, and z axes."
            },
            "name": "getModelMatrix",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "54a6c0f5-4886-72bb-8640-9e19e080b3f7",
            "ancestors": [
              "d3c517a4-bfe6-4986-1e48-b27467525e22"
            ],
            "type": "function",
            "description": "Updates the blocks in a chunk by checking and updating their neighboring blocks based on the chunk's size and position in the game world.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public class Chunk {\n    public static final int CHUNK_SIZE = 16;\n    public static final int CHUNK_SIZE_SQUARED = CHUNK_SIZE * CHUNK_SIZE;\n    public static final int CHUNK_SIZE_CUBED = CHUNK_SIZE * CHUNK_SIZE_SQUARED;\n    \n    private Block[] blocks = new Block[CHUNK_SIZE_CUBED];\n    \n    public void updateBlocks() {\n        for (int i = 0; i < CHUNK_SIZE_CUBED; i++) {\n            if (blocks[i] != null) {\n                int n_x = i - 1;\n                int p_x = i + 1;\n                int n_y = i - CHUNK_SIZE;\n                int p_y = i + CHUNK_SIZE;\n                int n_z = i - CHUNK_SIZE_SQUARED;\n                int p_z = i + CHUNK_SIZE_SQUARED;\n                \n                if (blocks[i].x - 1 < 0) {\n                    //TODO: check neighbor chunk\n                    blocks[i].lt = false;\n                } else {\n                    Block bl = blocks[n_x];\n                    if (bl == null)\n                        blocks[i].lt = true;\n                    else\n                        blocks[i].lt = false;\n                }\n                if (blocks[i].y - 1 < 0) {\n                    //TODO: check neighbor chunk\n                    blocks[i].bt = false;\n                } else {\n                    Block bl = blocks[n_y];\n                    if (bl == null)\n                        blocks[i].bt = true;\n                    else\n                        blocks[i].bt = false;\n                }\n                if (blocks[i].z - 1 < 0) {\n                    //TODO: check neighbor chunk\n                    blocks[i].ft = false;\n                } else {\n                    Block bl = blocks[n_z];\n                    if (bl == null)\n                        blocks[i].ft = true;\n                    else\n                        blocks[i].ft = false;\n                }\n                \n                if (blocks[i].x + 1 >= CHUNK_SIZE) {\n                    //TODO: check neighbor chunk\n                    blocks[i].rt = false;\n                } else {\n                    Block bl = blocks[p_x];\n                    if (bl == null)\n                        blocks[i].rt = true;\n                    else\n                        blocks[i].rt = false;\n                }\n                if (blocks[i].y + 1 >= CHUNK_SIZE) {\n                    //TODO: check neighbor chunk\n                    blocks[i].tp = false;\n                } else {\n                    Block bl = blocks[p_y];\n                    if (bl == null)\n                        blocks[i].tp = true;\n                    else\n                        blocks[i].tp = false;\n                }\n                if (blocks[i].z + 1 >= CHUNK_SIZE) {\n                    //TODO: check neighbor chunk\n                    blocks[i].bk = false;\n                } else {\n                    Block bl = blocks[p_z];\n                    if (bl == null)\n                        blocks[i].bk = true;\n                    else\n                        blocks[i].bk = false;\n                }\n            }\n        }\n    }\n}\n",
              "description": ""
            },
            "name": "updateBlocks",
            "location": {
              "start": 54,
              "insert": 54,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 75,
            "docLength": null
          },
          {
            "id": "704131ab-ae61-81aa-3648-e2644a892673",
            "ancestors": [
              "d3c517a4-bfe6-4986-1e48-b27467525e22"
            ],
            "type": "function",
            "description": "Generates a 3D model from a set of vertices, indices, and blocks. It recursively traverses the blocks, updating the vertex and index arrays, and filters out unnecessary data for textured cubes. The function also sets a flag to determine if it should load the generated model or continue generating it.",
            "params": [
              {
                "name": "now",
                "type_name": "boolean",
                "description": "whether to generate a new model or not.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public void main(String[] args) {\n  // Initialize the class object and its member variables.\n  Blocks blocks = new Blocks();\n  \n  // Call toGenModel() with 'now' set to false, meaning that the model will not generate immediately but instead return a reference to it which can be stored for later use.\n  Model model = blocks.toGenModel(false);\n}\n",
              "description": "\nExplanation: The main method initializes an instance of Blocks and calls its toGenModel() method with 'now' set to false, meaning that the model will not generate immediately but instead return a reference to it which can be stored for later use."
            },
            "name": "toGenModel",
            "location": {
              "start": 148,
              "insert": 148,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 34,
            "docLength": null
          },
          {
            "id": "d38ab6a6-1a78-f0b3-b949-18e89e97c204",
            "ancestors": [
              "d3c517a4-bfe6-4986-1e48-b27467525e22"
            ],
            "type": "function",
            "description": "Loads a 3D model from a buffer and stores it in a field, allowing for later use in the program.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "private void createModel() {\n\tthis.model = Model.load(Util.toFloatArray(vertices), Util.toIntArray(indices));\n}\n",
              "description": "\nIn this example, we are using the method createModel to load a model into memory.  The vertices and indices lists contain all the necessary information about the vertices and indices of a model, respectively.  We then use the Model.load() function to load them into the model variable.  This is an important part of the code because it creates the actual model in memory that will be used by other methods later on."
            },
            "name": "createModel",
            "location": {
              "start": 183,
              "insert": 183,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "292d48c2-ab66-e2b3-9547-9f06bb545ee0",
            "ancestors": [
              "d3c517a4-bfe6-4986-1e48-b27467525e22"
            ],
            "type": "function",
            "description": "Generates a model instance based on input parameters and returns it.",
            "params": [],
            "returns": {
              "type_name": "Model",
              "description": "a `Model` object containing the generated model data.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n\t// create a new Block instance\n\tBlock block = new Block(0, 0, 0);\n\n\t// generate the model from the block\n\tModel model = block.genModel();\n\n\t// print the vertices and indices of the model to the console\n\tSystem.out.println(\"Vertices: \" + Arrays.toString(model.getVertices()));\n\tSystem.out.println(\"Indices: \" + Arrays.toString(model.getIndices()));\n}\n",
              "description": "\nThis code creates a new Block instance at (0, 0, 0) and uses the method genModel() to generate the Model from the Block. The vertices and indices of the generated model are then printed to the console using the getVertices() and getIndices() methods of the Model class, respectively."
            },
            "name": "genModel",
            "location": {
              "start": 187,
              "insert": 187,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "89aa00bc-99ab-7784-7a42-eca0839f650f",
            "ancestors": [
              "d3c517a4-bfe6-4986-1e48-b27467525e22"
            ],
            "type": "function",
            "description": "Generates a set of vertices and indices for a 3D mesh based on the properties of a block. It adds vertices and indices to a list, increasing the index counter each time a new block is processed.",
            "params": [
              {
                "name": "vertices",
                "type_name": "List<Float>",
                "description": "2D vertices of the mesh being generated, and it is updated with new vertices calculated based on the block's properties.\n\n* It is a list of floating-point values representing 3D vertices.\n* The list is modified within the function to add new vertices based on the current block's geometry.",
                "complex_type": true
              },
              {
                "name": "indices",
                "type_name": "List<Integer>",
                "description": "3D indices of the vertices in the mesh, which are used to identify and update the corresponding vertex positions in the block.\n\n* It is a list of integers representing the vertices of a polyhedron.\n* Its size is equal to the number of vertices in the polyhedron, which is calculated during each iteration of the loop.\n* Each element in the list corresponds to a vertex in the polyhedron, where the indices start from 0 and increase by 1 for each subsequent vertex.",
                "complex_type": true
              },
              {
                "name": "block",
                "type_name": "Block",
                "description": "3D block being rendered, and its properties are used to determine which vertices and indices to add to the list of vertices and indices, respectively.\n\n* `ft`: Block has a face on top.\n* `bk`: Block has a back face.\n* `bt`: Block has a top face.\n* `tp`: Block has a top plane.\n* `lt`: Block has a left face.\n* `rt`: Block has a right face.",
                "complex_type": true
              },
              {
                "name": "max_index",
                "type_name": "int",
                "description": "0-based index of the current block being processed, and is used to keep track of the number of vertices and indices generated for each block.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "int",
              "description": "a new index value added to the `indices` list and an increased `max_index` value.",
              "complex_type": false
            },
            "name": "gen",
            "location": {
              "start": 194,
              "insert": 194,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 74,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "World.java",
    "path": "src/com/ch/voxel/World.java",
    "content": {
      "structured": {
        "description": "A 3D rendering engine with Chunk objects representing 3D blocks in a grid, and a World object holding the chunks. The Chunk class has several methods for updating and rendering itself and its contents, including rendering with a shader and a camera. The main method of the code is a thread that updates and renders the chunks in parallel using an internal thread pool. The render method takes a shader and a camera as parameters and renders each chunk's model matrix multiplied by the view projection matrix.",
        "items": [
          {
            "id": "af6573c0-5b93-0eb9-2f42-f5247d77b12c",
            "ancestors": [],
            "type": "function",
            "description": "Is responsible for managing the rendering of chunks in a Minecraft-like game. It has several methods and fields related to chunk rendering, including `render`, `chunks`, and `x`, `y`, and `z`. The `render` method takes a shader and camera object as parameters and renders each chunk in the world using the shader's uniforms to set the color of the chunk based on its position.",
            "name": "World",
            "location": {
              "start": 9,
              "insert": 9,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 233,
            "docLength": null
          },
          {
            "id": "60e743e5-3417-3ab3-4e4d-22c722283692",
            "ancestors": [
              "af6573c0-5b93-0eb9-2f42-f5247d77b12c"
            ],
            "type": "function",
            "description": "Generates a 3D grid of Chunk objects, each representing a specific block in the game world, by recursively calling itself for each chunk position within a fixed size area.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "private void gen() {\n    for (int i = 0; i < W; i++) {\n        for (int j = 0; j < H; j++) {\n            for (int k = 0; k < D; k++) {\n                chunks[i][j][k] = new Chunk(i - W / 2 + x, j - H / 2 + y, k - D / 2 + z);\n                chunks[i][j][k].updateBlocks();\n                chunks[i][j][k].toGenModel();\n            }\n        }\n    }\n}\n",
              "description": "\nThe example code should be as short and concise as possible. It is important to reason through the code before writing it, as well as testing the example to ensure it works correctly. Additionally, this method does not create a unit test example or provide an explanation of the code written. Instead, it simply creates a loop that initializes a 3D array of chunks with a new chunk object at each index, calls the updateBlocks() and toGenModel() methods on each chunk, and sets the x, y, and z values for each chunk to the same value as the World object."
            },
            "name": "gen",
            "location": {
              "start": 24,
              "insert": 24,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "af87cf17-c176-95b8-a843-3c3ceba05f3c",
            "ancestors": [
              "af6573c0-5b93-0eb9-2f42-f5247d77b12c"
            ],
            "type": "function",
            "description": "Updates the position of the `World` object based on the difference between the current position and the desired position, and then generates a new chunk if necessary.",
            "params": [
              {
                "name": "x",
                "type_name": "float",
                "description": "2D coordinates of the chunk being updated, and is used to determine which chunks are affected by the update and need to be generated or re-generated.",
                "complex_type": false
              },
              {
                "name": "y",
                "type_name": "float",
                "description": "2D coordinate of the chunk's position in the world, which is used to determine the appropriate chunk to update based on the `x` and `z` parameters.",
                "complex_type": false
              },
              {
                "name": "z",
                "type_name": "float",
                "description": "3D position of the chunk to update, and it is used to determine which chunks need to be updated based on their distance from the player's position.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "World world = new World();\nworld.updatePos(10, 25, -10); // moves the world by 10 in x direction and 25 in y direction and -10 in z direction\n",
              "description": "\nHere, the `World` object is updated with position `(10, 25, -10)` which moves it by that much in each axis.\n\nIt's important to note that this code does not actually move anything, only updates the internal state of the `World` object. To update the state of the world and perform actual movement, you need to call a method like `gen()` or another one that is responsible for generating the chunks based on the new coordinates."
            },
            "name": "updatePos",
            "location": {
              "start": 34,
              "insert": 34,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 183,
            "docLength": null
          },
          {
            "id": "9b97a60a-89b2-6fb1-eb45-37bbce53f420",
            "ancestors": [
              "af6573c0-5b93-0eb9-2f42-f5247d77b12c"
            ],
            "type": "function",
            "description": "Renders a 3D scene using a shader and a camera. It iterates over chunks of the scene, applying transformations to the chunk's model matrix and then drawing the chunk using the shader.",
            "params": [
              {
                "name": "s",
                "type_name": "Shader",
                "description": "3D rendering shader that is being applied to the 2D graphics, and it is used by the function to set the uniform values for the shader using the `uniformf` method.\n\n* `s` is a Shader object that represents a shader program.\n* It has various uniforms and attributes that can be modified during rendering.\n* The shader program can be used to render 3D graphics by setting its uniforms and attributes and then drawing the 3D objects using the `draw()` method.",
                "complex_type": true
              },
              {
                "name": "c",
                "type_name": "Camera",
                "description": "3D camera used to render the scene, and it is used to compute the view-projection matrix that is applied to the 3D models before they are drawn.\n\n* `Camera c`: This is an instance of a camera class, representing the camera's perspective on the 3D scene. It has various properties such as the viewport size, projection matrix, and modelview matrix.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Example {\n    public static void main(String[] args) {\n        Shader s = new Shader();\n        Camera c = new Camera();\n        World w = new World();\n        \n        // Render the world with this shader and camera\n        w.render(s, c);\n    }\n}\n",
              "description": "\nIn this example, we create a new shader object called s, a new camera object called c, and a new world object called w. We then call the render method on the world object, passing in the shader object s and the camera object c as arguments. The render method will then use these objects to draw the 3D model of the world onto the screen.\n\nNote that this is just an example of how the method could be used, and you may need to modify it to fit your specific needs. Additionally, you may also need to create the Shader and Camera classes yourself or retrieve them from elsewhere in your code."
            },
            "name": "render",
            "location": {
              "start": 218,
              "insert": 218,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 20,
            "docLength": null
          }
        ]
      }
    }
  }
]